{"version":3,"sources":["components/icons/pile.js","components/icons/play.js","components/icons/editCard.js","components/icons/editStacks.js","components/icons/logOut.js","components/icons/logIn.js","components/views/Navigation.jsx","components/icons/pileLogo.js","components/views/Title.jsx","Data/DB-hook/connection-hook.js","Data/Data_Update/removeCurStack.js","components/icons/trash.js","components/StackManagement/RemoveCurStack.jsx","Data/Data_Update/addNewSet.js","Data/Validation/validate.js","components/icons/consolidate.js","components/icons/plus.js","components/icons/right.js","components/StackManagement/AddNewStack.jsx","components/icons/export.js","components/StackManagement/exportStack.jsx","components/views/UserIsLoggedOut.js","components/StackManagement.jsx","Data/Data_Update/updateCards.js","components/icons/cardEdit.js","components/CardManagement/ManageCards.jsx","components/CardManagement.jsx","Data/Data_Update/logUserIn.js","components/LogInSignUp/LogInPage.jsx","Data/Data_Update/signUserUp.js","components/LogInSignUp/SignUpPage.jsx","components/LogInSignUp.jsx","components/CurrentStack/ReadCards.jsx","components/CurrentStack/SelectNewStack.jsx","components/icons/collection.js","components/icons/checkEye.js","components/CurrentStack.jsx","components/views/Loader.js","components/views/ConsolidateChanges.jsx","components/icons/rewind.js","components/icons/stats.js","components/CardSet/Stats.jsx","components/CardSet/Score.jsx","components/icons/check.js","components/icons/wrong.js","components/CardSet.jsx","Data/Data_Update/updateCurrentStack.js","App.jsx","serviceWorker.js","index.js"],"names":["Pile","className","aria-hidden","focusable","xmlns","viewBox","fill","d","Play","stroke","strokeLinecap","strokeLinejoin","strokeWidth","EditCard","fillRule","clipRule","EditStacks","LogOut","LogIn","Navigation","props","state","currentUser","userIsLoggedIn","logOut_User","loggedInNavBar","bind","loggedOutNavBar","logUserOut","this","Fragment","id","type","onClick","window","location","reload","style","listStyleType","padding","activeclassname","to","navigationLayout","Component","PileLogo","Title","url","a","method","body","headers","console","log","table","fetch","response","text","rawData","JSON","parse","responseData","ok","Error","message","useDB_Connection","connectToDB","stackNo","token","process","Authorization","RemoveCurrentStack","trash","RemoveCurStack","currentStack","stackName","redirectUser","messageToUser","setCurrentStack","warning","deleteButton","deleteHandler","deleteStackView","sampleStack","userStacks","length","setState","_id","then","stack_id","undefined","catch","err","removeProcess","redirectToConsolidate","stack","requestBody","stringify","header","Accept","addNewSet","status","validateEmail","eMail","CheckInput","CheckForInvalidCharacters","test","validatePasswordInput","pswInput","inputToCheck","trim","dataToCheck","map","c","includes","Consolidate","Plus","Right","AddNewStack","StackNameSubmitHandler","event","preventDefault","newName","stackNewName","value","newStackName","handleSubmitAddCardHandler","validateInput","newFront","newBack","newCardsToStack","push","front","back","frontValue","backValue","numberOfCardsAdded","handleFrontCardChange","e","target","addFront","handleBackCardChange","addBack","messageToUserBack","readyToSend","redirect","AddCardForm","consolidateNewStack","handleSubmitReady","consolidateButtonStack","infoCard","checkButton","AddCardButton","renderRedirect","cardNumbering","newStack","createdBy","cards","newData","name","onChange","ref","input","newStackNameForm","Export","ExportStack","prepareData","exportHandler","exportButton","infoOnExport","dataToExport","firstName","lastName","data","stackData","document","createElement","href","URL","createObjectURL","Blob","setAttribute","appendChild","click","removeChild","UserIsLoggedOut","StackManagement","add","export","delete","AddSwitch","exportSwitch","deleteSwitch","addStackButton","exportStackButton","deleteStackButton","stackNav","StackMessage","chosenFunctionality","StackManagementLayout","StackManagementView","urlUpdateCards","String","getStackData","updateCards","cardEdit","ManageCards","user","cardForEditing","cardForEditingId","editingMode","tempNewFront","tempNewBack","updatedItemMessage","editCard","cardsInCurrentStack","frontEditHandler","backEditHandler","editButtonHandler","makeNewCardSet","chooseCard","stackWasUpdated","plusButton","editButton","consolidateButton","consolidateButtonView","inputForm","showCurrentStack","manageCardsView","manageCardsLayout","f","newValueFront","newValueBack","frontReceived","backReceived","updatedStack","selectedCard","i","key","CardManagement","addOrManage","cardManagementLayout","cardManagementView","email","psw","userEmail","password","userLogInCheck","LogUserIn","LogInPage","errorMessage","logIn_User","handleSubmitLogInForm","logInView","logInForm","validateCredentials","logInProcess","em","logInData","p","userPsw","label","userSignUpCheck","SignUserUp","SignUpPage","logInOrSignUpSwitch","validateAccessCredentials","handleSubmitSignUpForm","signUpForm","signUpView","userFirstName","userLastName","signUpProcess","userPassword","credentials","userEmailSignUp","userPswSignUp","userFirstNameSignUp","userLastNameSignUp","proceedToSignUp","LogInSignUp","logInOrSignUpState","logInOrSignUpDisplay","logInSignUpView","updateUser","ReadCards","m","j","SelectNewStack","chosenStackId","chosenStackName","confirmation","stackSelector","chooseNewStack","getNewStackName","confirmNewStack","chooseNewStackView","preSelectView","afterSelectView","newStackID","listOfStacks","l","stack_name","s","confirmationButton","InformationCard_Select","selectNewStackView","Collection","Check2","CurrentStack","readOrSelect","update","selectNewStack","changeStackButton","currentStackLayout","readSelectSwitch","SelectDifferentStackButton","currentStackView","ReadStackButton","Loader","ConsolidateChanges","viewSwitch","initialView","finalView","ConsolidateChangesLayout","ConsolidateChangesView","setTimeout","Rewind","Stats","right","wrong","lengthOfStack","guesses","percentage","toFixed","reSetGame","reStart","stackLevel","reStartButton","gameStatsButton","gameStatsContents","statsLayout","current","level","infoLevel","gameStats","reStartTheGame","Score","rightAnswers","wrongAnswers","Check","Wrong","CardSet","face","stackIsOver","cardSide","cardCount","buttonArea","controlButtons","flipButton","handleClick","removeFromPile","setAnswerRight","setAnswerWrong","nextCardAvailable","updateCurrentCard","controlSide","cardFlip","cardSetLayout","cardSetView","newCardSet","slice","splice","next","div","whileHover","scale","animate","rotateY","transition","ease","duration","rightAnswerButton","wrongAnswerButton","E","controlCardArea","React","updateCurrentStack","App","loggedOutView","loggedInView","InformationCard_App","appView","letsUpdateStack","userData","stackId","logInToken","currenUser","exact","path","render","lenght","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.26ff1319.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Pile = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      aria-hidden=\"true\"\n      focusable=\"false\"\n      //data-prefix=\"fas\"\n      //data-icon=\"layer-group\"\n      //class=\"svg-inline--fa fa-layer-group fa-w-16\"\n      //role=\"img\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 512 512\"\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M12.41 148.02l232.94 105.67c6.8 3.09 14.49 3.09 21.29 0l232.94-105.67c16.55-7.51 16.55-32.52 0-40.03L266.65 2.31a25.607 25.607 0 0 0-21.29 0L12.41 107.98c-16.55 7.51-16.55 32.53 0 40.04zm487.18 88.28l-58.09-26.33-161.64 73.27c-7.56 3.43-15.59 5.17-23.86 5.17s-16.29-1.74-23.86-5.17L70.51 209.97l-58.1 26.33c-16.55 7.5-16.55 32.5 0 40l232.94 105.59c6.8 3.08 14.49 3.08 21.29 0L499.59 276.3c16.55-7.5 16.55-32.5 0-40zm0 127.8l-57.87-26.23-161.86 73.37c-7.56 3.43-15.59 5.17-23.86 5.17s-16.29-1.74-23.86-5.17L70.29 337.87 12.41 364.1c-16.55 7.5-16.55 32.5 0 40l232.94 105.59c6.8 3.08 14.49 3.08 21.29 0L499.59 404.1c16.55-7.5 16.55-32.5 0-40z\"\n      ></path>\n    </svg>\n  );\n};\n\nexport default Pile;\n","import React from \"react\";\n\nconst Play = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z\"\n      />\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n      />\n    </svg>\n  );\n};\n\nexport default Play;\n","import React from \"react\";\n\nconst EditCard = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n    >\n      <path d=\"M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z\" />\n      <path\n        fillRule=\"evenodd\"\n        d=\"M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n\nexport default EditCard;\n","import React from \"react\";\n\nconst EditStacks = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"\n      />\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"\n      />\n    </svg>\n  );\n};\n\nexport default EditStacks;\n","import React from \"react\";\n\nconst LogOut = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"-10 -10 40 40\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\"\n      />\n    </svg>\n  );\n};\n\nexport default LogOut;\n","import React from \"react\";\n\nconst LogIn = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1\"\n      />\n    </svg>\n  );\n};\n\nexport default LogIn;\n","import React, { Component } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\n// icons\nimport Pile from \"../icons/pile\";\nimport Play from \"../icons/play\";\nimport EditCard from \"../icons/editCard\";\nimport EditStacks from \"../icons/editStacks\";\nimport LogOut from \"../icons/logOut\";\nimport LogIn from \"../icons/logIn\";\n\nexport default class Navigation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      userIsLoggedIn: props.userIsLoggedIn,\n    };\n    // methods from App\n    this.logOut_User = this.props.logOut_User;\n    this.loggedInNavBar = this.loggedInNavBar.bind(this);\n    this.loggedOutNavBar = this.loggedOutNavBar.bind(this);\n    this.logUserOut = this.logUserOut.bind(this);\n  }\n\n  logUserOut() {\n    this.logOut_User();\n  }\n\n  logInButton() {\n    return (\n      <React.Fragment>\n        <button\n          id=\"logOutButton\"\n          type=\"button\"\n          onClick={() => {\n            window.location.reload();\n          }}\n        ></button>\n      </React.Fragment>\n    );\n  }\n\n  loggedInNavBar() {\n    return (\n      <div id=\"LogInNavBar\">\n        <ul\n          style={{ listStyleType: \"none\", padding: 0 }}\n          activeclassname=\"active\"\n          id=\"menuBar\"\n        >\n          <li className=\"navigationLink \">\n            <NavLink to=\"/curStack\">\n              <div className=\"flipMenu\">\n                <div className=\"flipMenuInner\">\n                  <div className=\"flipMenuFront\">\n                    <Pile />\n                  </div>\n                  <div className=\"flipMenuBack\">Current Stack</div>\n                </div>\n              </div>\n            </NavLink>\n          </li>\n          <li className=\"navigationLink\">\n            <NavLink to=\"/cardSet\">\n              <div className=\"flipMenu\">\n                <div className=\"flipMenuInner\">\n                  <div className=\"flipMenuFront\">\n                    <Play />\n                  </div>\n                  <div className=\"flipMenuBack\">Play stack</div>\n                </div>\n              </div>\n            </NavLink>\n          </li>\n          <li className=\"navigationLink\">\n            <NavLink to=\"/cardManagement\">\n              <div className=\"flipMenu\">\n                <div className=\"flipMenuInner\">\n                  <div className=\"flipMenuFront\">\n                    <EditCard />\n                  </div>\n                  <div className=\"flipMenuBack\">Manage cards</div>\n                </div>\n              </div>\n            </NavLink>\n          </li>\n          <li className=\"navigationLink\">\n            <NavLink to=\"/stackManagement\">\n              <div className=\"flipMenu\">\n                <div className=\"flipMenuInner\">\n                  <div className=\"flipMenuFront\">\n                    <EditStacks />\n                  </div>{\" \"}\n                  <div className=\"flipMenuBack\">Manage stacks</div>\n                </div>\n              </div>\n            </NavLink>\n          </li>\n          <li className=\"navigationLink\">\n            <NavLink to=\"/\">\n              <div className=\"flipMenu\">\n                <div className=\"flipMenuInner\">\n                  <div className=\"flipMenuFront\">\n                    <LogOut />\n                  </div>\n                  <div className=\"flipMenuBack\" onClick={this.logUserOut}>\n                    Log Out\n                  </div>\n                </div>\n              </div>\n            </NavLink>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n\n  loggedOutNavBar() {\n    return (\n      <div id=\"LogOutNavBar\">\n        <ul\n          style={{ listStyleType: \"none\", padding: 0 }}\n          activeclassname=\"active\"\n        >\n          <li className=\"navigationLink\">\n            <Link to=\"/logIn\" className=\"flipMenuInner\">\n              <div className=\"flipMenuFront\">\n                <LogIn className=\"logInIcon\" />\n              </div>{\" \"}\n              <div className=\"flipMenuBack\">Log in</div>\n            </Link>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n\n  navigationLayout() {\n    return (\n      <div>\n        {this.state.userIsLoggedIn ? (\n          <div id=\"navigation\">{this.loggedInNavBar()}</div>\n        ) : (\n          <div id=\"navigation\">{this.loggedOutNavBar()}</div>\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.navigationLayout()}</React.Fragment>;\n  }\n}\n","import React from \"react\";\n\nconst PileLogo = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      aria-hidden=\"true\"\n      focusable=\"false\"\n      //data-prefix=\"fas\"\n      //data-icon=\"layer-group\"\n      //class=\"svg-inline--fa fa-layer-group fa-w-16\"\n      //role=\"img\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 512 512\"\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M12.41 148.02l232.94 105.67c6.8 3.09 14.49 3.09 21.29 0l232.94-105.67c16.55-7.51 16.55-32.52 0-40.03L266.65 2.31a25.607 25.607 0 0 0-21.29 0L12.41 107.98c-16.55 7.51-16.55 32.53 0 40.04zm487.18 88.28l-58.09-26.33-161.64 73.27c-7.56 3.43-15.59 5.17-23.86 5.17s-16.29-1.74-23.86-5.17L70.51 209.97l-58.1 26.33c-16.55 7.5-16.55 32.5 0 40l232.94 105.59c6.8 3.08 14.49 3.08 21.29 0L499.59 276.3c16.55-7.5 16.55-32.5 0-40zm0 127.8l-57.87-26.23-161.86 73.37c-7.56 3.43-15.59 5.17-23.86 5.17s-16.29-1.74-23.86-5.17L70.29 337.87 12.41 364.1c-16.55 7.5-16.55 32.5 0 40l232.94 105.59c6.8 3.08 14.49 3.08 21.29 0L499.59 404.1c16.55-7.5 16.55-32.5 0-40z\"\n      ></path>\n    </svg>\n  );\n};\n\nexport default PileLogo;\n","import React, { Component } from \"react\";\nimport PileLogo from \"../icons/pileLogo\";\n\nexport default class Title extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"titlePage\">\n          <h1 id=\"title\">\n            Flashcards <PileLogo className=\"pileLogo\" />\n          </h1>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","async function useDB_Connection(url, method = \"GET\", body = null, headers) {\n  // Data. Body must be string (.stringfy(data)), headers is an object.\n  console.log(\"Connect to DB for: \");\n  console.table(url, method, body, headers);\n  let response;\n  try {\n    response = await fetch(url, {\n      method,\n      body,\n      headers,\n    });\n  } catch (err) {\n    console.log(\"Connection error on connection hook: \", err);\n    return false;\n  }\n\n  // receives data\n  const rawData = await response.text();\n  // processes to json\n  const responseData = await JSON.parse(rawData);\n\n  if (!response.ok) {\n    console.log(\"Error on response from API (error 23).\");\n    throw new Error(responseData.message);\n  }\n  // returns data processed\n  return responseData;\n}\n\nexport default useDB_Connection;\n","// import React from \"react\";\nimport useDB_Connection from \"../DB-hook/connection-hook\";\n\nconst connectToDB = useDB_Connection;\n\nasync function RemoveCurrentStack(stackNo, token) {\n  console.log(\"Delete handler: \", stackNo);\n  let stackToKill = stackNo;\n  let header = { Authorization: \"Bearer \" + token };\n  const url = process.env.REACT_APP_BACKEND_URL + \"/cardApi/\" + stackToKill;\n  connectToDB(url, \"DELETE\", null, header);\n}\n\nexport default RemoveCurrentStack;\n","import React from \"react\";\n\nconst trash = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n\nexport default trash;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n// Data update\nimport RemoveCurrentStack from \"../../Data/Data_Update/removeCurStack\";\n// Icon\nimport Trash from \"../icons/trash\";\n// In case there are no stacks\nimport sampleStack from \"../../Data/DummyData/sampleCards.json\";\n\nexport default class RemoveCurStack extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      currentStack: props.currentStack,\n      stackName: props.stackName,\n      token: props.token,\n      redirectUser: false,\n      messageToUser:\n        \"Clicking the button will delete the stack. If you want to delete another stack, you must go to current stack and select the stack you want to delete.\",\n    };\n    // DB actions\n    // this.removeThisStack = RemoveCurrentStack;\n    // methods from app.js\n    this.setCurrentStack = props.setCurrentStack;\n    // local\n    this.warning = this.warning.bind(this);\n    this.deleteButton = this.deleteButton.bind(this);\n    this.deleteHandler = this.deleteHandler.bind(this);\n    this.deleteStackView = this.deleteStackView.bind(this);\n    // fallback stack\n    this.sampleStack = sampleStack;\n  }\n  ////////////////\n  // Implementation methods\n  ////////////////\n\n  async deleteHandler() {\n    if (this.state.currentUser.userStacks.length === 1) {\n      this.setState({\n        messageToUser:\n          \"You cannot delete your only/last stack. You need to have at least one stack.\",\n      });\n    } else {\n      let removeProcess;\n      removeProcess = await RemoveCurrentStack(\n        this.state.currentStack._id,\n        this.state.token\n      )\n        .then(() => {\n          if (\n            this.state.currentUser.userStacks[0].stack_id &&\n            this.state.currentUser.userStacks[0].stack_id !== undefined\n          ) {\n            this.setCurrentStack(this.state.currentUser.userStacks[0].stack_id);\n          } else {\n            this.setCurrentStack(sampleStack);\n          }\n        })\n        .then(() => {\n          this.setState({ redirectUser: true });\n        })\n        .catch((err) => {\n          console.log(\"Error on deletion process (error 36). \", err);\n          return false;\n        });\n      if (!removeProcess) {\n        removeProcess = false;\n        return removeProcess;\n      }\n    }\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  deleteButton() {\n    return (\n      <button\n        // className=\"buttonStyle\"\n        className=\"buttonStyle\"\n        type=\"button\"\n        onClick={this.deleteHandler}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Trash />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Confirm DELETE</span>\n            </div>{\" \"}\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  warning() {\n    return (\n      <div>\n        <h3>\n          Your current stack is:\n          <strong className=\"currentSelectedStack\">\n            {\" \"}\n            {this.state.stackName}\n          </strong>\n        </h3>\n        <div className=\"infoCard\">{this.state.messageToUser}</div>\n        <p></p>\n        <p>\n          But, before you continue,are you sure about this? This action can't be\n          undone.\n        </p>\n      </div>\n    );\n  }\n\n  redirectToConsolidate() {\n    return (\n      <div>\n        <Redirect to=\"/consolidateChanges\" />\n      </div>\n    );\n  }\n\n  deleteStackView() {\n    return (\n      <div id=\"deleteCurStackLayout\">\n        <div id=\"deleteWarning\">{this.warning()}</div>\n        <div id=\"deleteButtonConfirmation\">{this.deleteButton()}</div>\n        {this.state.redirectUser ? this.redirectToConsolidate() : <div></div>}\n      </div>\n    );\n  }\n\n  render() {\n    return <div id=\"deleteStackView\"> {this.deleteStackView()}</div>;\n  }\n}\n","// import React from \"react\";\nimport useDB_Connection from \"../DB-hook/connection-hook\";\n\nconst connectToDB = useDB_Connection;\n\nasync function addNewSet(stack, token) {\n  // sequence: url, (method = \"GET\"), (body = null), (headers = {});\n  console.log(\"Add new SET OF CARDS, received: \", stack, typeof stack);\n  let requestBody = JSON.stringify(stack);\n  console.log(\"BODY is: \", requestBody, \"which is: \", typeof requestBody);\n  let header = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    Authorization: \"Bearer \" + token,\n  };\n  ///\n  console.log(\"--- send to Hook\");\n  const addNewSet = await connectToDB(\n    process.env.REACT_APP_BACKEND_URL + \"/cardAPI/addNewStack\",\n    \"POST\",\n    requestBody,\n    header\n  );\n  ///\n  console.log(\"Return: \", addNewSet);\n  // let newStackData = JSON.parse(getStackData);\n  // console.log(\"Return from API: \", newStackData);\n  if (\n    addNewSet.status === false ||\n    addNewSet.message === \"Error on adding new stack\"\n  ) {\n    console.log(\"Error on gathering data\");\n    return false;\n  } else {\n    console.log(\"New stack data return \", addNewSet);\n    return true;\n  }\n}\n\nexport default addNewSet;\n","//import React from \"react\";\n\nexport const validateEmail = (eMail) => {\n  // no input\n  if (!CheckInput(eMail) === true) {\n    return false;\n  } else {\n    // invalid characters\n    if (CheckForInvalidCharacters(eMail) === false) {\n      return false;\n    } else {\n      // email formatting\n      // backspace has to be doubled, since it is inside a string\n      //let pattern = new RegExp(\"^\\\\w+@\\\\w+.\\\\w+$\");\n      const pattern = /^\\w+@\\w+\\.\\w+$/;\n      if (pattern.test(eMail) === false) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  }\n};\n\nexport const validatePasswordInput = (pswInput) => {\n  if (CheckInput(pswInput) === true) {\n    if (CheckForInvalidCharacters(pswInput) === true) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst CheckInput = (inputToCheck) => {\n  let validInput = inputToCheck.trim().length >= 4;\n  if (validInput) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport const CheckForInvalidCharacters = (dataToCheck) => {\n  let invalidCharacters = [\n    \">\",\n    \"<\",\n    \"{\",\n    \"}\",\n    \"?\",\n    \"!\",\n    \"$\",\n    \"#\",\n    \"/\",\n    \"|\",\n    \"&\",\n    \"\\b\",\n    \"\\t\",\n    \";\",\n  ];\n  let invalidInput = invalidCharacters.map((c) => dataToCheck.includes(c));\n  if (invalidInput.includes(true)) {\n    console.log(\"wrong input\");\n    return false;\n  } else {\n    return true;\n  }\n};\n","import React from \"react\";\n\nconst Consolidate = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4\"\n      />\n    </svg>\n  );\n};\n\nexport default Consolidate;\n","import React from \"react\";\n\nconst Plus = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n      />\n    </svg>\n  );\n};\n\nexport default Plus;\n","import React from \"react\";\n\nconst Right = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M5 13l4 4L19 7\"\n      />\n    </svg>\n  );\n};\n\nexport default Right;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n// hooks\nimport addNewSet from \"../../Data/Data_Update/addNewSet\";\nimport { CheckForInvalidCharacters } from \"../../Data/Validation/validate\";\n// Icons\nimport Consolidate from \"../icons/consolidate\";\nimport Plus from \"../icons/plus\";\nimport Right from \"../icons/right\";\n\nexport default class AddNewStack extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      currentStack: props.currentStack,\n      token: props.token,\n      messageToUser:\n        \"In order to make the new card, click on plus (+). After you finish adding at least 3 new cards, click on consolidate button.\",\n      messageToUserBack: \"Your stack must have at least 3 cards.\",\n      frontValue: \"\",\n      backValue: \"\",\n      newFront: \"\",\n      newBack: \"\",\n      newStackName: \"\",\n      newCardsToStack: [],\n      readyToSend: true,\n      numberOfCardsAdded: 0,\n      redirect: false,\n    };\n    // utils\n    this.CheckForInvalidCharacters = CheckForInvalidCharacters;\n    // methods\n    this.handleSubmitAddCardHandler = this.handleSubmitAddCardHandler.bind(\n      this\n    );\n    this.handleFrontCardChange = this.handleFrontCardChange.bind(this);\n    this.StackNameSubmitHandler = this.StackNameSubmitHandler.bind(this);\n    this.AddCardForm = this.AddCardForm.bind(this);\n    this.consolidateNewStack = this.consolidateNewStack.bind(this);\n    this.handleSubmitReady = this.handleSubmitReady.bind(this);\n    this.consolidateButtonStack = this.consolidateButtonStack.bind(this);\n    this.infoCard = this.infoCard.bind(this);\n    this.checkButton = this.checkButton.bind(this);\n    this.AddCardButton = this.AddCardButton.bind(this);\n    this.renderRedirect = this.renderRedirect.bind(this);\n    this.cardNumbering = this.cardNumbering.bind(this);\n  }\n\n  ////////////////\n  // Implementation methods\n  ////////////////\n\n  async consolidateNewStack(newStack) {\n    console.log(\"Consolidate Add stack\");\n    const addSet = await addNewSet(JSON.stringify(newStack), this.state.token);\n    if (addSet) {\n      this.setState({ redirect: true });\n    } else {\n      this.setState({ messageToUser: \"Error on adding new Stack (error 52).\" });\n    }\n  }\n\n  StackNameSubmitHandler = (event) => {\n    event.preventDefault();\n    let newName = this.stackNewName.value;\n    this.setState((state) => {\n      return {\n        newStackName: newName,\n      };\n    });\n  };\n\n  handleSubmitReady() {\n    this.setState({\n      messageToUser:\n        \"Consolidating changes and sending the new data to your database.\",\n    });\n    const newStack = {\n      stackName: this.state.newStackName,\n      createdBy: this.state.currentUser.id,\n      cards: this.state.newCardsToStack,\n    };\n    this.consolidateNewStack(newStack);\n  }\n\n  handleSubmitAddCardHandler = (event) => {\n    event.preventDefault();\n    this.setState({\n      messageToUser:\n        \"Now add more cards and, when done, click on consolidate changes.\",\n    });\n    if (\n      this.validateInput(this.state.newFront) &&\n      this.validateInput(this.state.newBack)\n    ) {\n      this.state.newCardsToStack.push({\n        front: this.state.newFront,\n        back: this.state.newBack,\n      });\n      this.setState({\n        frontValue: \"\",\n        backValue: \"\",\n        numberOfCardsAdded: this.state.numberOfCardsAdded + 1,\n      });\n      console.log(\"new cards to stack: \", this.state.newCardsToStack);\n    } else {\n      this.setState({\n        messageToUser: \"Your input is invalid. Please correct it.\",\n      });\n    }\n  };\n\n  validateInput(newData) {\n    if (!this.CheckForInvalidCharacters(newData)) {\n      this.setState({\n        messageToUser: \"You entered an invalid character\",\n        messageToUserBack:\n          \"You can't add and non-alpha characters or punctuations except for fod(.)\",\n      });\n      return false;\n    } else {\n      this.setState({\n        messageToUser: \"Valid input\",\n      });\n      return true;\n    }\n  }\n\n  handleFrontCardChange = (e) => {\n    this.setState({ frontValue: e.target.value });\n    let addFront = e.target.value;\n    console.log(\"handle: \", addFront);\n    if (addFront) {\n      this.setState({\n        newFront: addFront,\n        messageToUser: \"don't forget to add the back of the card.\",\n      });\n    }\n  };\n\n  handleBackCardChange = (e) => {\n    this.setState({ backValue: e.target.value });\n    let addBack = e.target.value;\n    console.log(\"handle back: \", addBack);\n    if (addBack) {\n      this.setState({\n        newBack: addBack,\n        messageToUser: \"Did you already add the back of the card?\",\n      });\n    }\n  };\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  renderRedirect() {\n    if (this.state.redirect) {\n      return (\n        <Redirect\n          to=\"/consolidateChanges\"\n          userIsLoggedIn={this.state.userIsLoggedIn}\n        />\n      );\n    }\n  }\n\n  infoCard() {\n    return (\n      <div id=\"infoCardWrap\">\n        <div className=\"flipInfoCard\">\n          <div className=\"flipInfoCardInner\">\n            <p className=\"flipInfoCardFront\">{this.state.messageToUser}</p>\n            <p className=\"flipInfoCardBack\">{this.state.messageToUserBack}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  cardNumbering() {\n    return (\n      <div>\n        <h4>You added, so far {this.state.newCardsToStack.length} cards</h4>\n        <p>\n          You need to add, at least, 3 cards in order to be able to consolidate\n          and make a new stack.\n        </p>\n        {this.state.newCardsToStack.length > 2 ? (\n          <p>You can consolidate now, or keep adding cards.</p>\n        ) : (\n          <p>\n            You will see the consolidate button, after you add, at least 3\n            cards.\n          </p>\n        )}\n      </div>\n    );\n  }\n\n  checkButton() {\n    return (\n      <button\n        className=\"buttonStyle\"\n        type=\"button\"\n        onClick={this.StackNameSubmitHandler}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Right />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Add name</span>\n            </div>{\" \"}\n          </div>{\" \"}\n        </div>\n      </button>\n    );\n  }\n\n  consolidateButtonStack() {\n    if (this.state.numberOfCardsAdded > 2) {\n      return (\n        <button\n          className=\"buttonStyle\"\n          type=\"button\"\n          onClick={this.handleSubmitReady}\n        >\n          <div className=\"flipContainer\">\n            <div className=\"flipInner\">\n              <div className=\"flipFront\">\n                <Consolidate />\n              </div>\n              <div className=\"flipBack\">\n                <span className=\"buttonMessage\">CONSOLIDATE Changes</span>\n              </div>\n            </div>\n          </div>\n        </button>\n      );\n    } else {\n      return <div></div>;\n    }\n  }\n\n  AddCardButton() {\n    return (\n      <button\n        className=\"buttonStyle\"\n        type=\"button\"\n        onClick={this.handleSubmitAddCardHandler}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Plus />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Add new card</span>\n            </div>\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  AddCardForm() {\n    return (\n      <React.Fragment>\n        <div>\n          <form>\n            <div className=\"formElement\">\n              <label>Front of the card</label>\n              <input\n                className=\"cardInput\"\n                type=\"text\"\n                name=\"front\"\n                value={this.state.frontValue}\n                onChange={this.handleFrontCardChange}\n              />\n            </div>\n            <div className=\"formElement\">\n              <label>Back of the card</label>\n              <input\n                className=\"cardInput\"\n                type=\"text\"\n                name=\"front\"\n                value={this.state.backValue}\n                onChange={this.handleBackCardChange}\n              />\n            </div>\n            <br />\n            <div id=\"AddCardButtons\">\n              <div>{this.AddCardButton()}</div>\n              {this.cardNumbering()}\n              <div> {this.consolidateButtonStack()}</div>\n            </div>\n          </form>\n          {this.infoCard()}\n          {this.renderRedirect()}\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  newStackNameForm() {\n    return (\n      <React.Fragment>\n        {this.state.newStackName >= 0 ? (\n          <div id=\"letsAddSection\">\n            <h4>\n              Let's <strong className=\"statInfo\"> add </strong> a new stack,\n              shall we? First, what is the name of your new stack:\n            </h4>\n            <form>\n              <input\n                id=\"formAddNewStack\"\n                type=\"text\"\n                ref={(input) => (this.stackNewName = input)}\n              ></input>\n              <div>{this.checkButton()}</div>\n            </form>\n          </div>\n        ) : (\n          <div id=\"addCardsToStack\">\n            <p>\n              Great, so, the name is: <strong>{this.state.newStackName}</strong>\n            </p>\n            <p>\n              Now, let's add <strong>one</strong> card to it. After that, go to{\" \"}\n              <strong>Manage Your Stacks</strong> to keep adding more cards to\n              it.\n            </p>\n            {this.AddCardForm()}\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.newStackNameForm()}</React.Fragment>;\n  }\n}\n","import React from \"react\";\n\nconst Export = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\"\n      />\n    </svg>\n  );\n};\n\nexport default Export;\n","import React, { Component } from \"react\";\n// Icons\nimport Download from \"../icons/export\";\n// hooks\n// import useDB_Connection from \"../../Data/DB-hook/connection-hook\";\n// Icons\n\nexport default class ExportStack extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      currentStack: props.currentStack,\n      stackName: props.stackName,\n    };\n    // methods\n    this.prepareData = this.prepareData.bind(this);\n    this.exportHandler = this.exportHandler.bind(this);\n    this.exportButton = this.exportButton.bind(this);\n    this.infoOnExport = this.infoOnExport.bind(this);\n  }\n\n  ////////////////\n  // Implemntation methods\n  ////////////////\n\n  prepareData() {\n    // Data selection: omits the '_id' and 'created by id' of the stack for security reasons\n    let dataToExport = this.state.currentStack;\n    delete dataToExport.id;\n    dataToExport.createdBy =\n      this.state.currentUser.firstName + \" \" + this.state.currentUser.lastName;\n    // Data preparation\n    let data = JSON.stringify(dataToExport, null, 4);\n    console.log(\"export:\", data, typeof data);\n    this.exportHandler(data);\n  }\n\n  exportHandler(stackData) {\n    // Data exporting to file\n    const a = document.createElement(\"a\");\n    a.href = URL.createObjectURL(new Blob([stackData], { type: \"text/plain\" }));\n    a.setAttribute(\"download\", \"yourStackData.txt\");\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    console.log(\"Export handler\");\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  exportButton() {\n    return (\n      <button className=\"buttonStyle\" type=\"button\" onClick={this.prepareData}>\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Download />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Download</span>\n            </div>{\" \"}\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  infoOnExport() {\n    return (\n      <React.Fragment>\n        <div>\n          <h3>\n            Your current stack is:\n            <strong className=\"currentSelectedStack\">\n              {\" \"}\n              {this.state.stackName}\n            </strong>\n          </h3>\n          <p>\n            Clicking the button will export the current stack to a file. This\n            file will be downloaded by your browser. Depending on local\n            system/OS configurations, you night need to authorize this or allow\n            it.\n          </p>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"exportCurStackWrapper\">\n          <div>{this.infoOnExport()}</div>\n          <div>{this.exportButton()}</div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nconst UserIsLoggedOut = () => {\n  return (\n    <React.Fragment>\n      <h2>This operation is only possible if the user is logged in </h2>\n      <p>Please go to Log in / Sign up page</p>\n\n      <Route>\n        <Redirect to=\"/logIn\" />\n      </Route>\n    </React.Fragment>\n  );\n};\n\nexport default UserIsLoggedOut;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n// Data Methods\nimport RemoveCurStack from \"./StackManagement/RemoveCurStack\";\nimport AddNewStack from \"./StackManagement/AddNewStack\";\nimport ExportStack from \"./StackManagement/exportStack\";\n// DB\n// import { useDB_Connection } from \"../DB/DB-hook/connection-hook\";\n// Standard Log out page\nimport UserIsLoggedOut from \"./views/UserIsLoggedOut\";\n// Icon\nimport Plus from \"./icons/plus\";\nimport Trash from \"./icons/trash\";\nimport Export from \"./icons/export\";\n\nexport default class StackManagement extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userIsLoggedIn: props.userIsLoggedIn,\n      currentUser: props.currentUser,\n      currentStack: props.currentStack,\n      token: props.token,\n      add: true,\n      export: false,\n      delete: false,\n    };\n    // * Methods\n    // hooks\n    // this.useDB_Connection = useDB_Connection;\n    // methods from app.js\n    this.setCurrentStack = props.setCurrentStack;\n    // local\n    this.UserIsLoggedOut = UserIsLoggedOut;\n    this.AddSwitch = this.AddSwitch.bind(this);\n    this.exportSwitch = this.exportSwitch.bind(this);\n    this.deleteSwitch = this.deleteSwitch.bind(this);\n    this.addStackButton = this.addStackButton.bind(this);\n    this.exportStackButton = this.exportStackButton.bind(this);\n    this.deleteStackButton = this.deleteStackButton.bind(this);\n    this.stackNav = this.stackNav.bind(this);\n    this.StackMessage = this.StackMessage.bind(this);\n    this.chosenFunctionality = this.chosenFunctionality.bind(this);\n    this.StackManagementLayout = this.StackManagementLayout.bind(this);\n  }\n\n  ////////////////\n  // Implementation methods\n  ////////////////\n\n  AddSwitch() {\n    this.setState((state) => ({\n      add: true,\n      export: false,\n      delete: false,\n    }));\n  }\n\n  exportSwitch() {\n    this.setState((state) => ({\n      add: false,\n      export: true,\n      delete: false,\n    }));\n  }\n\n  deleteSwitch() {\n    this.setState((state) => ({\n      add: false,\n      export: false,\n      delete: true,\n    }));\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  addStackButton() {\n    return (\n      <button\n        // className=\"buttonStyle\"\n        className={this.state.add ? \"buttonIsActive\" : \"buttonIsOff\"}\n        type=\"button\"\n        onClick={this.AddSwitch}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Plus />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">NEW stack</span>\n            </div>\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  exportStackButton() {\n    return (\n      <button\n        // className=\"buttonStyle\"\n        className={this.state.export ? \"buttonIsActive\" : \"buttonIsOff\"}\n        type=\"button\"\n        onClick={this.exportSwitch}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Export />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Download</span>\n            </div>\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  deleteStackButton() {\n    return (\n      <button\n        // className=\"buttonStyle\"\n        className={this.state.delete ? \"buttonIsActive\" : \"buttonIsOff\"}\n        type=\"button\"\n        onClick={this.deleteSwitch}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Trash />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Delete</span>\n            </div>{\" \"}\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  stackNav() {\n    return (\n      <div id=\"StackNav\">\n        <div id=\"stackNavLeft\" className=\"optionIsActive\">\n          {this.addStackButton()}\n        </div>\n        <div id=\"stackNavCenter\">{this.exportStackButton()}</div>\n        <div id=\"stackNavRight\">{this.deleteStackButton()}</div>\n      </div>\n    );\n  }\n\n  chosenFunctionality() {\n    return (\n      <div id=\"chosenFunctionalityArea\">\n        {this.state.add ? (\n          <AddNewStack\n            userIsLoggedIn={this.state.userIsLoggedIn}\n            currentUser={this.state.currentUser}\n            currentStack={this.state.currentStack}\n            token={this.state.token}\n          />\n        ) : (\n          <div></div>\n        )}\n        {this.state.export ? (\n          <ExportStack\n            userIsLoggedIn={this.state.userIsLoggedIn}\n            currentUser={this.state.currentUser}\n            currentStack={this.state.currentStack}\n            stackName={this.state.currentStack.stackName}\n            // setCurrentStack={this.setCurrentStack}\n          />\n        ) : (\n          <div></div>\n        )}\n        {this.state.delete ? (\n          <RemoveCurStack\n            userIsLoggedIn={this.state.userIsLoggedIn}\n            currentUser={this.state.currentUser}\n            currentStack={this.state.currentStack}\n            setCurrentStack={this.setCurrentStack}\n            stackName={this.state.currentStack.stackName}\n            token={this.state.token}\n          />\n        ) : (\n          <div></div>\n        )}\n      </div>\n    );\n  }\n\n  StackMessage() {\n    return (\n      <div id=\"stackMessage\">\n        <h2>\n          Here you can manage your stack. You can: add a new stack, download or\n          delete the current stack. Choose the option bellow:\n        </h2>\n      </div>\n    );\n  }\n\n  StackManagementLayout() {\n    return (\n      <React.Fragment>\n        <div id=\"stackManLayout\">\n          {this.StackMessage()}\n          {this.stackNav()}\n          {this.chosenFunctionality()}\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  StackManagementView() {\n    // console.log(\"STACK MANAGEMENT\");\n    return (\n      <div id=\"StackManagementView\">\n        {this.state.userIsLoggedIn ? (\n          <div id=\"loggedInView\">{this.StackManagementLayout()}</div>\n        ) : (\n          <Redirect to=\"/login\" />\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"StackManagementView\">{this.StackManagementView()}</div>\n      </React.Fragment>\n    );\n  }\n}\n","// import React from \"react\";\nimport useDB_Connection from \"../DB-hook/connection-hook\";\n\nconst connectToDB = useDB_Connection;\n\nasync function updateCards(stack, token) {\n  // sequence: url, (method = \"GET\"), (body = null), (headers = {});\n  const urlUpdateCards =\n    process.env.REACT_APP_BACKEND_URL + \"/cardAPI/\" + String(stack._id);\n  let requestBody = JSON.stringify(stack);\n  let header = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    Authorization: \"Bearer \" + token,\n  };\n  ///\n  const getStackData = await connectToDB(\n    urlUpdateCards,\n    \"PATCH\",\n    requestBody,\n    header\n  );\n  ///\n  if (\n    getStackData.status === false ||\n    getStackData.message === \"Error on getting stack by id: \"\n  ) {\n    console.log(\"Error on gathering data\");\n    return false;\n  } else {\n    console.log(\"New stack data return \", getStackData);\n    return true;\n  }\n}\n\nexport default updateCards;\n","import React from \"react\";\n\nconst cardEdit = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n    >\n      <path d=\"M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z\" />\n      <path\n        fillRule=\"evenodd\"\n        d=\"M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n\nexport default cardEdit;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n// hooks\nimport updateCards from \"../../Data/Data_Update/updateCards\";\nimport { CheckForInvalidCharacters } from \"../../Data/Validation/validate\";\n// Icons\nimport Consolidate from \"../icons/consolidate\";\nimport EditCardIcon from \"../icons/cardEdit\";\n\nexport default class ManageCards extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userIsLoggedIn: props.userIsLoggedIn,\n      user: props.currentUser,\n      currentStack: props.currentStack,\n      token: props.token,\n      cardForEditing: \"\",\n      cardForEditingId: \"\",\n      editingMode: false,\n      tempNewFront: \"\",\n      tempNewBack: \"\",\n      newStack: \"\",\n      updatedItemMessage: false,\n      redirect: false,\n      messageToUser:\n        \"If you only want to edit one element (front OR back), leave the other element empty\",\n      messageToUserBack:\n        \"After you change the element locally, you need to click Consolidate changes button in order to reflect these changes in the actual stack.\",\n    };\n    // utils\n    this.CheckForInvalidCharacters = CheckForInvalidCharacters;\n    // this.manageCurrentStack = this.manageCurrentStack.bind(this);\n    this.handleSubmitReady = this.handleSubmitReady.bind(this);\n    this.editCard = this.editCard.bind(this);\n    this.cardsInCurrentStack = this.cardsInCurrentStack.bind(this);\n    this.frontEditHandler = this.frontEditHandler.bind(this);\n    this.backEditHandler = this.backEditHandler.bind(this);\n    this.editButtonHandler = this.editButtonHandler.bind(this);\n    this.validateInput = this.validateInput.bind(this);\n    this.makeNewCardSet = this.makeNewCardSet.bind(this);\n    this.chooseCard = this.chooseCard.bind(this);\n    this.stackWasUpdated = this.stackWasUpdated.bind(this);\n    this.plusButton = this.editButton.bind(this);\n    this.consolidateButton = this.consolidateButton.bind(this);\n    this.consolidateButtonView = this.consolidateButtonView.bind(this);\n    this.inputForm = this.inputForm.bind(this);\n    this.showCurrentStack = this.showCurrentStack.bind(this);\n    this.manageCardsView = this.manageCardsView.bind(this);\n    this.manageCardsLayout = this.manageCardsLayout.bind(this);\n  }\n\n  ////////////////\n  // Implementation methods\n  ////////////////\n\n  async handleSubmitReady() {\n    let newStack = this.state.newStack;\n    let updateCardsProcess;\n    if (newStack && newStack !== undefined) {\n      updateCardsProcess = await updateCards(newStack, this.state.token);\n      if (updateCardsProcess) {\n        this.setState({\n          messageToUser:\n            \"Consolidating changes and sending the new data to your database.\",\n          messageToUserBack: \"You will be redirected\",\n          redirect: true,\n        });\n      } else {\n        this.setState({\n          messageToUser: \"Error on retrieving stack data (error 87)\",\n        });\n      }\n    }\n  }\n\n  frontEditHandler(e) {\n    // e.preventDefault();\n    let front = e.target.value;\n    if (!front || front === \"\" || front === undefined || front === false) {\n      front = false;\n    }\n    this.setState({ tempNewFront: front });\n  }\n\n  backEditHandler(f) {\n    // e.preventDefault();\n    let back = f.target.value;\n    if (!back || back === \"\" || back === undefined || back === false) {\n      back = false;\n    }\n    this.setState({ tempNewBack: back });\n  }\n\n  // gets the new values for front and back\n  editButtonHandler(e) {\n    e.preventDefault();\n    let newValueFront = this.state.tempNewFront;\n    let newValueBack = this.state.tempNewBack;\n    this.makeNewCardSet(newValueFront, newValueBack);\n  }\n\n  validateInput(front, back) {\n    if (!this.CheckForInvalidCharacters(front)) {\n      this.setState({\n        messageToUser: \"You entered an invalid character in the front card\",\n      });\n      return false;\n    }\n    if (!this.CheckForInvalidCharacters(back)) {\n      this.setState({\n        messageToUser: \"You entered an invalid character in the back card\",\n      });\n      return false;\n    }\n    this.setState({\n      messageToUser: \"Valid input\",\n    });\n    return true;\n  }\n\n  makeNewCardSet(frontReceived, backReceived) {\n    if (this.validateInput(frontReceived, backReceived) === true) {\n      let newFront, newBack;\n      // makes a new version of the cardSet\n      let updatedStack = this.state.currentStack;\n      // Update back\n      if (backReceived === \"\" || backReceived === undefined) {\n        newBack = this.state.currentStack.cards[this.state.cardForEditing].back;\n      } else {\n        newBack = backReceived;\n      }\n      // Update front\n      if (frontReceived === \"\" || frontReceived === undefined) {\n        newFront = this.state.currentStack.cards[this.state.cardForEditing]\n          .front;\n      } else {\n        newFront = frontReceived;\n      }\n      updatedStack.cards[this.state.cardForEditing] = {\n        front: newFront,\n        back: newBack,\n      };\n      ///\n      console.log(\"Updated stack is now:, \", updatedStack);\n      // updates local state\n      this.setState((state) => ({\n        newStack: updatedStack,\n        editingMode: false,\n        updatedItemMessage: true,\n      }));\n    } else {\n      this.setState({ messageToUser: \"invalid input\" });\n    }\n  }\n\n  chooseCard(e) {\n    let selectedCard = e.target.value;\n    this.setState(() => ({\n      cardForEditing: selectedCard,\n      editingMode: true,\n    }));\n    this.setState({ cardForEditingId: selectedCard });\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  infoCard() {\n    return (\n      <div className=\"flipInfoCard\">\n        <div className=\"flipInfoCardInner\">\n          <p className=\"flipInfoCardFront\">{this.state.messageToUser}</p>\n          <p className=\"flipInfoCardBack\">{this.state.messageToUserBack}</p>\n        </div>\n      </div>\n    );\n  }\n\n  consolidateButton() {\n    return (\n      <button\n        className=\"buttonStyle\"\n        type=\"button\"\n        onClick={this.handleSubmitReady}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Consolidate />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Consolidate changes</span>\n            </div>\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  editButton() {\n    return (\n      <button\n        className=\"buttonStyle\"\n        type=\"button\"\n        onClick={this.editButtonHandler}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <EditCardIcon />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Change</span>\n            </div>{\" \"}\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  inputForm() {\n    return (\n      <form id=\"inputFormCardEdit\">\n        <p>\n          The current card Front is{\" \"}\n          <strong className=\"detach\">\n            {this.state.currentStack.cards[this.state.cardForEditing].front}\n          </strong>\n        </p>\n        <p>\n          Inform new card <strong className=\"emphasis\">front</strong>\n        </p>\n        <input type=\"text\" name=\"newFront\" onChange={this.frontEditHandler} />\n        <p>\n          The current card back is{\" \"}\n          <strong className=\"detach\">\n            {this.state.currentStack.cards[this.state.cardForEditing].back}\n          </strong>\n        </p>\n        <p>\n          Inform new card <strong className=\"emphasis\">back</strong>\n        </p>\n        <input type=\"text\" name=\"newBack\" onChange={this.backEditHandler} />\n        <br />\n        {this.editButton()}\n      </form>\n    );\n  }\n\n  editCard() {\n    return (\n      <React.Fragment>\n        <div id=\"editCardArea\">\n          {this.inputForm()}\n          {this.infoCard()}\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  stackWasUpdated() {\n    return (\n      <div id=\"shortMessage\" className=\"infoCard_cardSet\">\n        <p>\n          Card was updated locally. Select another card to update or consolidate\n          changes by selecting any card and clicking on the consolidate button.\n        </p>\n      </div>\n    );\n  }\n\n  cardsInCurrentStack() {\n    return (\n      <React.Fragment>\n        <h4>Now, select the card you want to manage</h4>\n        <div>\n          <select className=\"select-css\" onChange={this.chooseCard}>\n            <option value=\"0\">Select card</option>\n            {this.state.currentStack.cards.map((c, i) => {\n              return (\n                <option key={i} value={i}>\n                  {c.front} - {c.back}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  showCurrentStack() {\n    return (\n      <React.Fragment>\n        <div>\n          <h3>\n            Your current stack is:{\" \"}\n            <strong className=\"emphasis\">\n              {this.state.currentStack.stackName}\n            </strong>\n          </h3>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  consolidateButtonView() {\n    return (\n      <div id=\"consolidateButton\">\n        {this.state.updatedItemMessage ? this.consolidateButton() : <div></div>}\n      </div>\n    );\n  }\n\n  manageCardsLayout() {\n    return (\n      <div id=\"manageCardsWrapper\">\n        <h1>Let's manage your cards</h1>\n\n        <div id=\"manageCardsArea\">\n          {this.showCurrentStack()}\n          {this.cardsInCurrentStack()}\n          {this.state.updatedItemMessage ? this.stackWasUpdated() : <div></div>}\n          {this.state.editingMode ? this.editCard() : <div></div>}\n          {this.consolidateButtonView()}\n          {this.state.redirect ? (\n            <Redirect\n              to=\"/consolidateChanges\"\n              userIsLoggedIn={this.state.userIsLoggedIn}\n            />\n          ) : (\n            <div></div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  manageCardsView() {\n    // console.log(\"MANAGE CARDS\");\n    return (\n      <div id=\"manageCardsLayout\">\n        {this.state.userIsLoggedIn ? (\n          <div id=\"loggedInView\">{this.manageCardsLayout()}</div>\n        ) : (\n          <Redirect to=\"/login\" />\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.manageCardsView()}</React.Fragment>;\n  }\n}\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n// Standard Log out page\nimport UserIsLoggedOut from \"./views/UserIsLoggedOut\";\nimport ManageCards from \"./CardManagement/ManageCards\";\n\nexport default class CardManagement extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userIsLoggedIn: props.userIsLoggedIn,\n      currentUser: props.currentUser,\n      currentStack: props.currentStack,\n      token: props.token,\n      addOrManage: false,\n    };\n    // * Methods\n    this.UserIsLoggedOut = UserIsLoggedOut;\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  cardManagementLayout() {\n    return (\n      <React.Fragment>\n        <div id=\"cardManagementLayout\">\n          <ManageCards\n            userIsLoggedIn={this.state.userIsLoggedIn}\n            currentUser={this.state.currentUser}\n            currentStack={this.state.currentStack}\n            token={this.state.token}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  cardManagementView() {\n    // console.log(\"CARD MANAGEMENT\");\n    return (\n      <React.Fragment>\n        <div id=\"cardManagementView\">\n          {this.state.userIsLoggedIn ? (\n            <div id=\"loggedInView\">{this.cardManagementLayout()}</div>\n          ) : (\n            <Redirect to=\"/login\" />\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"cardManagementView\">{this.cardManagementView()}</div>\n      </React.Fragment>\n    );\n  }\n}\n","// import React from \"react\";\nimport useDB_Connection from \"../DB-hook/connection-hook\";\n\nconst connectToDB = useDB_Connection;\n\nasync function LogUserIn(email, psw) {\n  let requestBody = JSON.stringify({\n    userEmail: email,\n    password: psw,\n  });\n  console.log(\"Log User In\");\n  const userLogInCheck = await connectToDB(\n    process.env.REACT_APP_BACKEND_URL + \"/userAPI/logIn\",\n    \"POST\",\n    requestBody,\n    {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    }\n  );\n  const data = userLogInCheck;\n  console.log(\"Log in data handler. Received: \", data, typeof data);\n  if (!data || data === false) {\n    console.log(\"Error on log in. No data received.\");\n  }\n  try {\n    return data;\n  } catch (error) {\n    console.log(\"error on Log in: \", error);\n    return false;\n  }\n}\n\nexport default LogUserIn;\n","import React, { Component } from \"react\";\n//import useDB_Connection from \"../../Data/DB-hook/connection-hook\";\n// Connection\nimport LogUserIn from \"../../Data/Data_Update/logUserIn\";\n// hooks and util\nimport {\n  validateEmail,\n  validatePasswordInput,\n} from \"../../Data/Validation/validate\";\n\nexport default class LogInPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      userIsLoggedIn: props.userIsLoggedIn,\n      errorMessage: \" \",\n    };\n    // data from AI\n    this.LogUserIn = LogUserIn.bind(this);\n    // methods from parent\n    this.logIn_User = props.logIn_User.bind(this);\n    this.handleSubmitLogInForm = this.handleSubmitLogInForm.bind(this);\n    //local methods\n    this.logInView = this.logInView.bind(this);\n    this.logInForm = this.logInForm.bind(this);\n    this.validateCredentials = this.validateCredentials.bind(this);\n    // hooks\n    // this.useDB_Connection = useDB_Connection;\n    // validation\n    this.validateEmail = validateEmail;\n    this.validatePasswordInput = validatePasswordInput;\n    this.logInProcess = this.logInProcess.bind(this);\n  }\n\n  //////////////////////////\n  // Implementation methods\n  //////////////////////////\n\n  async logInProcess(em, psw) {\n    const logInData = await LogUserIn(em, psw);\n    if (logInData) {\n      this.logIn_User(logInData);\n    } else {\n      console.log(\"Error on login process. Error 47.\");\n    }\n  }\n\n  validateCredentials(e, p) {\n    if (this.validateEmail(e) === true) {\n      if (this.validatePasswordInput(p) === true) {\n        this.logInProcess(e, p);\n      }\n    } else {\n      this.setState({ errorMessage: \"improper input on log in form\" });\n    }\n  }\n\n  handleSubmitLogInForm(event) {\n    event.preventDefault();\n    this.validateCredentials(this.userEmail.value, this.userPsw.value);\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  logInForm() {\n    return (\n      <div id=\"form\">\n        <form>\n          <div className=\"formElement\">\n            <label>Enter your email</label>\n            <br />\n            <input\n              type=\"email\"\n              label=\"enter your email here\"\n              ref={(input) => (this.userEmail = input)}\n            ></input>\n          </div>\n          <div className=\"formElement\">\n            <label>Enter password</label>\n            <br />\n            <input\n              type=\"password\"\n              label=\"enter your password here\"\n              ref={(input) => (this.userPsw = input)}\n            ></input>\n          </div>\n          <button\n            className=\"simpleButtonStyle\"\n            onClick={this.handleSubmitLogInForm}\n          >\n            Log me in\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n  logInView() {\n    return (\n      <div id=\"loggedInView\">\n        <h2>Log In Page</h2>\n        {this.logInForm()}\n        <div id=\"errorMessage\">{this.state.errorMessage}</div>\n      </div>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.logInView()}</React.Fragment>;\n  }\n}\n","import useDB_Connection from \"../DB-hook/connection-hook\";\nconst connectToDB = useDB_Connection;\n\n//url, method = \"GET\", body = null, headers = {}\nasync function SignUserUp(userEmail, password, firstName, lastName) {\n  let requestBody = JSON.stringify({\n    userEmail: userEmail,\n    password: password,\n    firstName: firstName,\n    lastName: lastName,\n  });\n  const userSignUpCheck = await connectToDB(\n    process.env.REACT_APP_BACKEND_URL + \"/userAPI/signUp\",\n    \"POST\",\n    requestBody,\n    {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    }\n  );\n  const data = userSignUpCheck;\n  console.log(\"Data from Sign up: \", data);\n}\n\nexport default SignUserUp;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n// Utils\nimport {\n  validateEmail,\n  validatePasswordInput,\n} from \"../../Data/Validation/validate\";\n// Connection to DB\n// import useDB_Connection from \"../../Data/DB-hook/connection-hook\";\nimport SignUserUp from \"../../Data/Data_Update/signUserUp\";\n\nexport default class SignUpPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      userIsLoggedIn: props.userIsLoggedIn,\n      redirectUser: false,\n      errorMessage: \"\",\n    };\n    // from parent\n    this.logInOrSignUpSwitch = props.logInOrSignUpSwitch;\n    // this.updateUser = props.updateUser.bind(this);\n    this.validateCredentials = this.validateAccessCredentials.bind(this);\n    this.handleSubmitSignUpForm = this.handleSubmitSignUpForm.bind(this);\n    // this.SignUserUp = this.SignUserUp.bind(this);\n    // local\n    this.signUpForm = this.signUpForm.bind(this);\n    this.signUpView = this.signUpView.bind(this);\n    // Data from API\n    this.SignUserUp = SignUserUp.bind(this);\n    // utils\n    // validation\n    this.validateEmail = validateEmail;\n    this.validatePasswordInput = validatePasswordInput;\n  }\n\n  proceedToSignUp(userEmail, userPsw, userFirstName, userLastName) {\n    let signUpProcess;\n    try {\n      signUpProcess = this.SignUserUp(\n        userEmail,\n        userPsw,\n        userFirstName,\n        userLastName\n      );\n    } catch {\n      console.log(\"Error on Sign up Process\");\n      return false;\n    }\n    console.log(\"=> \", signUpProcess);\n    if (signUpProcess.status === false || !signUpProcess) {\n      this.setState({ errorMessage: \"Error on sign up process.\" });\n    } else {\n      this.logInOrSignUpSwitch(true);\n      this.setState({ redirectUser: true });\n    }\n  }\n\n  validateAccessCredentials(userEmail, userPassword) {\n    // console.log(\"validate: \", userEmail, userPassword);\n\n    if (this.validateEmail(userEmail) === true) {\n      if (this.validatePasswordInput(userPassword) === true) {\n        // console.log(\"validated\");\n        // console.log(\"proper input\");\n        return true;\n      }\n    } else {\n      console.log(\"invalid input\");\n      return false;\n    }\n  }\n\n  handleSubmitSignUpForm(event) {\n    event.preventDefault();\n    const credentials = {\n      userEmailSignUp: this.userEmail.value,\n      userPswSignUp: this.userPsw.value,\n      userFirstNameSignUp: this.firstName.value,\n      userLastNameSignUp: this.lastName.value,\n    };\n    console.log(\n      \"Received: \",\n      credentials.userEmailSignUp,\n      credentials.userPswSignUp,\n      credentials.userFirstNameSignUp,\n      credentials.userLastNameSignUp\n    );\n    if (\n      this.validateAccessCredentials(\n        credentials.userEmailSignUp,\n        credentials.userPswSignUp\n      ) === true\n    ) {\n      console.log(\"proper input on sign up form\");\n      this.proceedToSignUp(\n        credentials.userEmailSignUp,\n        credentials.userPswSignUp,\n        credentials.userFirstNameSignUp,\n        credentials.userLastNameSignUp\n      );\n    } else {\n      console.log(\n        \"Could not sign up.\",\n        credentials.userEmailSignUp,\n        credentials.userPswSignUp,\n        credentials.userFirstNameSignUp,\n        credentials.userLastNameSignUp\n      );\n    }\n  }\n\n  redirectUser() {\n    return <Redirect to=\"/logIn\" />;\n  }\n\n  signUpForm() {\n    return (\n      <form>\n        <div className=\"formElement\">\n          <label>Enter email</label>\n          <br />\n          <input\n            type=\"email\"\n            label=\"enter your email here\"\n            ref={(input) => (this.userEmail = input)}\n          ></input>\n        </div>\n        <div className=\"formElement\">\n          <label>Enter password</label>\n          <br />\n          <input\n            type=\"password\"\n            label=\"enter your password here\"\n            ref={(input) => (this.userPsw = input)}\n          ></input>\n        </div>\n        <div className=\"formElement\">\n          <label>Enter your first name</label>\n          <br />\n          <input\n            type=\"email\"\n            label=\"enter your name here\"\n            ref={(input) => (this.firstName = input)}\n          ></input>\n        </div>\n        <div className=\"formElement\">\n          <label>Enter your last name</label>\n          <br />\n          <input\n            type=\"email\"\n            label=\"enter your name here\"\n            ref={(input) => (this.lastName = input)}\n          ></input>\n        </div>\n        <button\n          className=\"simpleButtonStyle\"\n          onClick={this.handleSubmitSignUpForm}\n        >\n          Register\n        </button>\n        <p>{this.state.errorMessage}</p>\n      </form>\n    );\n  }\n\n  signUpView() {\n    return (\n      <div id=\"signUpView\">\n        <h2>Sign Up Page</h2>\n        {this.signUpForm()}\n        {this.state.redirectUser ? this.redirectUser() : <div></div>}\n      </div>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.signUpView()}</React.Fragment>;\n  }\n}\n","import React, { Component } from \"react\";\nimport LogInPage from \"./LogInSignUp/LogInPage\";\nimport SignUpPage from \"./LogInSignUp/SignUpPage\";\n// import { useDB_Connection } from \"../DB/DB-hook/connection-hook\";\n//\nimport PileLogo from \"./icons/pileLogo\";\n// Style\nimport \"../../src/index.css\";\n\nexport default class LogInSignUp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      userIsLoggedIn: props.userIsLoggedIn,\n      logInOrSignUpState: true,\n    };\n    // ** Binding\n    //this.updateUser = props.updateUser.bind(this);\n    //this.updateStack = props.updateStack.bind(this);\n    this.logIn_User = props.logIn_User.bind(this);\n    this.LogInPage = LogInPage.bind(this);\n    // this.SignUpPage = SignUpPage.bind(this);\n    this.logInOrSignUpSwitch = this.logInOrSignUpSwitch.bind(this);\n    this.logInOrSignUpDisplay = this.logInOrSignUpDisplay.bind(this);\n    this.logInSignUpView = this.logInSignUpView.bind(this);\n  }\n\n  //////////////////////////\n  // Implementation methods\n  //////////////////////////\n\n  logInOrSignUpSwitch() {\n    this.setState((state) => ({\n      logInOrSignUpState: !state.logInOrSignUpState,\n    }));\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  logInOrSignUpDisplay() {\n    return (\n      <div id=\"logInOrSignUpLayout\">\n        <div id=\"inOutButtonArea\">\n          <h1 id=\"logInTextMessage\">\n            Log in or Sign up{\" \"}\n            <span>\n              <PileLogo className=\"pileLogo\" />\n            </span>\n          </h1>\n        </div>\n        <div id=\"logInOrSignUpViewSwitch\">\n          <button\n            type=\"button\"\n            className=\"simpleButtonStyle\"\n            onClick={this.logInOrSignUpSwitch}\n          >\n            {this.state.logInOrSignUpState ? (\n              <p>Sign up instead</p>\n            ) : (\n              <p> Log in instead</p>\n            )}\n          </button>\n          {this.state.logInOrSignUpState ? (\n            <LogInPage\n              user={this.state.currentUser}\n              currentStack={this.state.currentStack}\n              logIn_User={this.logIn_User}\n            />\n          ) : (\n            <SignUpPage\n              user={this.state.currentUser}\n              currentStack={this.state.currentStack}\n              updateUser={this.updateUser}\n              logInOrSignUpSwitch={this.logInOrSignUpSwitch}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  logInSignUpView() {\n    // console.log(\"LOG IN SIGN UP\");\n    return (\n      <div id=\"loggedInOrSignUpView\">\n        {this.state.userIsLoggedIn\n          ? this.state.userIsLoggedIn\n          : this.logInOrSignUpDisplay()}\n      </div>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.logInSignUpView()}</React.Fragment>;\n  }\n}\n","import React, { Component } from \"react\";\n// hooks\n//import { useDB_Connection } from \"../../DB/DB-hook/connection-hook\";\n\nexport default class ReadCards extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      currentStack: props.currentStack,\n    };\n  }\n\n  showCurrentStack() {\n    if (this.state.currentStack.stackName) {\n      return (\n        <div id=\"cardListContainer\">\n          {this.state.currentStack.cards.map((m, j) => {\n            return (\n              <div className=\"flipCard\" key={j}>\n                <li className=\"flipCardInner\" value={m.front}>\n                  <div className=\"flipCardFront\">\n                    <div className=\"cardTextPositioning\">{m.front}</div>\n                  </div>\n                  <div className=\"flipCardBack\">\n                    <div className=\"cardTextPositioning\">{m.back}</div>\n                  </div>\n                </li>\n              </div>\n            );\n          })}\n          <div></div>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <h3>\n            There was an error retrieving your cards. Please, Reload the\n            application and if the problem persists, inform the developer.\n          </h3>\n        </div>\n      );\n    }\n  }\n\n  render() {\n    return <React.Fragment>{this.showCurrentStack()}</React.Fragment>;\n  }\n}\n","import React, { Component } from \"react\";\n// import history from \"../../utils/history\";\nimport { Redirect } from \"react-router-dom\";\n// hooks\n//import { useDB_Connection } from \"../../DB/DB-hook/connection-hook\";\n\nexport default class SelectNewStack extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userIsLoggedIn: props.userIsLoggedIn,\n      currentStack: props.currentStack,\n      currentUser: props.currentUser,\n      chosenStackId: \"\",\n      chosenStackName: \"\",\n      confirmation: false,\n      redirect: false,\n      messageToUser: \"Choose a new stack and confirm.\",\n    };\n    // methods from parent comp\n    this.setCurrentStack = props.setCurrentStack;\n    //this.selectStackUpdatedStack = props.selectStackUpdatedStack;\n    // local methods\n    this.stackSelector = this.stackSelector.bind(this);\n    this.chooseNewStack = this.chooseNewStack.bind(this);\n\n    this.getNewStackName = this.getNewStackName.bind(this);\n    this.confirmNewStack = this.confirmNewStack.bind(this);\n    this.renderRedirect = this.renderRedirect.bind(this);\n    //this.reloadApp = this.reloadApp.bind(this);\n    // views\n    this.chooseNewStackView = this.chooseNewStackView.bind(this);\n    this.preSelectView = this.preSelectView.bind(this);\n    this.afterSelectView = this.afterSelectView.bind(this);\n  }\n\n  getNewStackName(newStackID) {\n    let listOfStacks = this.state.currentUser.userStacks;\n    for (let l in listOfStacks) {\n      // console.log(\"Checking: \", l, listOfStacks[l].stack_id);\n      if (newStackID === listOfStacks[l].stack_id) {\n        return listOfStacks[l].stack_name;\n      }\n    }\n  }\n\n  // Chooses new option\n  chooseNewStack(e) {\n    let newStack = e.target.value;\n    let newStackName = this.getNewStackName(newStack);\n    // console.log(\"choose stack: \", newStack, \"name: \", newStackName);\n    this.setState({\n      chosenStackId: newStack,\n      chosenStackName: newStackName,\n      confirmation: true,\n      messageToUser:\n        \"You will be directed to a consolidation page, as data will be sent to the DataBase.\",\n    });\n  }\n\n  stackSelector() {\n    return (\n      <select className=\"select-css\" onChange={this.chooseNewStack}>\n        <option value=\"0\">Select new stack</option>\n        {this.state.currentUser.userStacks.map((s) => {\n          return (\n            <option key={s.stack_name} value={s.stack_id}>\n              {s.stack_name}\n            </option>\n          );\n        })}\n      </select>\n    );\n  }\n\n  renderRedirect() {\n    if (this.state.redirect) {\n      return (\n        <Redirect\n          to=\"/consolidateChanges\"\n          userIsLoggedIn={this.state.userIsLoggedIn}\n        />\n      );\n    }\n  }\n\n  confirmNewStack() {\n    this.setState({ redirect: true });\n    this.setCurrentStack(this.state.chosenStackId);\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  InformationCard_Select() {\n    return (\n      <div className=\"infoCard\">\n        <p>{this.state.messageToUser}</p>\n      </div>\n    );\n  }\n\n  confirmationButton() {\n    return (\n      <div>\n        <h3> You chose: {this.state.chosenStackName}</h3>\n        {this.renderRedirect()}\n        <button\n          className=\"simpleButtonStyle\"\n          type=\"button\"\n          onClick={this.confirmNewStack}\n        >\n          Confirm change\n        </button>\n      </div>\n    );\n  }\n\n  preSelectView() {\n    return (\n      <div id=\"StackSelection\">\n        <h2>\n          Hi there. Your current stack of cards is:{\" \"}\n          <strong className=\"currentSelectedStack\">\n            {this.state.currentStack.stackName}\n            {\". \"}\n          </strong>\n        </h2>\n        <h3>Which stack do you want to select?</h3>\n        {this.stackSelector()}\n      </div>\n    );\n  }\n\n  afterSelectView() {\n    return (\n      <div id=\"confirmation\">\n        {this.state.confirmation ? this.confirmationButton() : <br />}\n      </div>\n    );\n  }\n\n  chooseNewStackView() {\n    return (\n      <div>\n        {this.state.confirmation\n          ? this.afterSelectView()\n          : this.preSelectView()}\n        {this.InformationCard_Select()}\n      </div>\n    );\n  }\n\n  selectNewStackView() {\n    return (\n      <div id=\"cardSetView\">\n        {this.state.userIsLoggedIn ? (\n          <div id=\"loggedInView\">{this.chooseNewStackView()}</div>\n        ) : (\n          <Redirect to=\"/\" />\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.selectNewStackView()}</React.Fragment>;\n  }\n}\n","import React from \"react\";\n\nconst Collection = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\"\n      />\n    </svg>\n  );\n};\n\nexport default Collection;\n","import React from \"react\";\n\nconst Check2 = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"-4 -2 30 30\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"\n      />\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\"\n      />\n    </svg>\n  );\n};\n\nexport default Check2;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n// internal componentes\nimport ReadCards from \"./CurrentStack/ReadCards\";\nimport SelectNewStack from \"./CurrentStack/SelectNewStack\";\n// Standard Log out page\nimport UserIsLoggedOut from \"./views/UserIsLoggedOut\";\n// Style\nimport \"../../src/index.css\";\n// Icons\nimport Collection from \"./icons/collection\";\nimport CheckEye from \"./icons/checkEye\";\n\nexport default class CurrentStack extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      userIsLoggedIn: props.userIsLoggedIn,\n      userStacks: props.userStacks,\n      currentStack: props.currentStack,\n      readOrSelect: true,\n      update: false,\n    };\n    // components\n    this.UserIsLoggedOut = UserIsLoggedOut;\n    this.ReadCards = ReadCards;\n    this.selectNewStack = SelectNewStack;\n    // methods from app.js\n    this.setCurrentStack = props.setCurrentStack;\n    // Methods\n    this.changeStackButton = this.changeStackButton.bind(this);\n    this.currentStackLayout = this.currentStackLayout.bind(this);\n    this.readSelectSwitch = this.readSelectSwitch.bind(this);\n    this.SelectDifferentStackButton = this.SelectDifferentStackButton.bind(\n      this\n    );\n    this.currentStackView = this.currentStackView.bind(this);\n  }\n\n  ////////////////\n  // Implementation methods\n  ////////////////\n\n  readSelectSwitch() {\n    this.setState((state) => ({\n      readOrSelect: !state.readOrSelect,\n    }));\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  SelectDifferentStackButton() {\n    return (\n      <button\n        className=\"buttonStyle\"\n        type=\"button\"\n        onClick={this.readSelectSwitch}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Collection />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Select stack</span>\n            </div>\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  ReadStackButton() {\n    return (\n      <button\n        className=\"buttonStyle\"\n        type=\"button\"\n        onClick={this.readSelectSwitch}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <CheckEye />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Read stack</span>\n            </div>\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  changeStackButton() {\n    return (\n      <div id=\"buttonArea\">\n        {this.state.readOrSelect ? (\n          <div>{this.SelectDifferentStackButton()}</div>\n        ) : (\n          <div>{this.ReadStackButton()}</div>\n        )}\n      </div>\n    );\n  }\n\n  currentStackLayout() {\n    return (\n      <React.Fragment>\n        <div id=\"currentStackLayout\">\n          <div id=\"tinyNavBar\">\n            <div id=\"saluteTheUser\">\n              <h3>Hi {this.state.currentUser.firstName}, welcome back </h3>\n              <br />\n              <p>\n                The current stack is:{\" \"}\n                <span className=\"highlight\">\n                  {this.state.currentStack.stackName}\n                </span>\n              </p>\n              <p>\n                Hover over the card to see the back, or click on it if you are\n                on\n              </p>\n              a mobile.\n            </div>\n            {this.changeStackButton()}\n          </div>\n          <div className=\"cardViewWrap\">\n            {this.state.readOrSelect ? (\n              <ReadCards\n                userIsLoggedIn={this.state.userIsLoggedIn}\n                currentUser={this.state.currentUser}\n                currentStack={this.state.currentStack}\n              />\n            ) : (\n              <SelectNewStack\n                userIsLoggedIn={this.state.userIsLoggedIn}\n                currentStack={this.state.currentStack}\n                currentUser={this.state.currentUser}\n                setCurrentStack={this.setCurrentStack}\n              />\n            )}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  currentStackView() {\n    // console.log(\"CURRENT STACK\");\n    return (\n      <div id=\"currentStackView\">\n        {this.state.userIsLoggedIn ? (\n          <div id=\"loggedInView\">{this.currentStackLayout()}</div>\n        ) : (\n          <div>\n            <Redirect to=\"/\" />\n          </div>\n        )}\n        {/* {this.checkForConsistency()} */}\n      </div>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.currentStackView()}</React.Fragment>;\n  }\n}\n","import React from \"react\";\n\nconst Loader = () => {\n  return <div className=\"loader\"></div>;\n};\n\nexport default Loader;\n","import React, { Component } from \"react\";\nimport { NavLink, Redirect } from \"react-router-dom\";\n// Visual elements\nimport Loader from \"./Loader\";\n\nclass ConsolidateChanges extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userIsLoggedIn: props.userIsLoggedIn,\n      viewSwitch: true,\n      errorMessage: \"\",\n    };\n    this.initialView = this.initialView.bind(this);\n    this.finalView = this.finalView.bind(this);\n    this.ConsolidateChangesLayout = this.ConsolidateChangesLayout.bind(this);\n    this.ConsolidateChangesView = this.ConsolidateChangesView.bind(this);\n  }\n\n  initialView() {\n    return (\n      <div id=\"initialView\">\n        <h1>Processing changes</h1>\n        <div id=\"loading\">\n          <Loader />\n        </div>\n      </div>\n    );\n  }\n\n  finalView() {\n    return (\n      <div id=\"finalView\">\n        <div id=\"backToBeginning\">\n          <div id=\"confirm\">\n            <h4>The changes you made re consolidated in the Database</h4>\n\n            <p> Now you can :</p>\n          </div>\n          <div id=\"backToApp\">\n            <p>\n              Now you can\n              <NavLink to=\"/curStack\">\n                <strong className=\"highlight\"> READ </strong>\n              </NavLink>\n              the new current stack or{\" \"}\n              <NavLink to=\"/cardSet\">\n                <strong className=\"highlight\"> PLAY </strong>\n              </NavLink>{\" \"}\n              it.\n            </p>\n          </div>\n          <div id=\"warn\">\n            <h4>\n              Note that some changes (adding a new stack, for example) will only\n              be visible when you reload the application.\n            </h4>\n            <p>Now let's flip some cards. :-D </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ viewSwitch: false });\n    }, 800);\n  }\n\n  ConsolidateChangesLayout() {\n    return (\n      <div id=\"Consolidate\">\n        {this.state.viewSwitch ? this.initialView() : this.finalView()}\n      </div>\n    );\n  }\n\n  ConsolidateChangesView() {\n    // console.log(\"CONSOLIDATE CHANGES\");\n    return (\n      <div id=\"cardSetView\">\n        {this.state.userIsLoggedIn ? (\n          <div id=\"loggedInView\">{this.ConsolidateChangesLayout()}</div>\n        ) : (\n          <Redirect to=\"/\" />\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.ConsolidateChangesView()}</React.Fragment>;\n  }\n}\n\nexport default ConsolidateChanges;\n","import React from \"react\";\n\nconst Rewind = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M12.066 11.2a1 1 0 000 1.6l5.334 4A1 1 0 0019 16V8a1 1 0 00-1.6-.8l-5.333 4zM4.066 11.2a1 1 0 000 1.6l5.334 4A1 1 0 0011 16V8a1 1 0 00-1.6-.8l-5.334 4z\"\n      />\n    </svg>\n  );\n};\n\nexport default Rewind;\n","import React from \"react\";\n\nconst Stats = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"\n      />\n    </svg>\n  );\n};\n\nexport default Stats;\n","import React, { Component } from \"react\";\n// hooks\n// import { useDB_Connection } from \"../../DB/DB-hook/connection-hook\";\nimport RewindIcon from \"../icons/rewind\";\nimport StatsIcon from \"../icons/stats\";\n\nexport default class Stats extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      right: props.right,\n      wrong: props.wrong,\n      lengthOfStack: props.lengthOfStack,\n      guesses: props.right + props.wrong,\n      percentage: ((props.right / (props.right + props.wrong)) * 100).toFixed(\n        2\n      ),\n    };\n    this.reSetGame = props.reSetGame;\n    this.reStart = this.reStart.bind(this);\n    this.stackLevel = this.stackLevel.bind(this);\n    // this.pieChart = this.pieChart.bind(this);\n    this.reStartButton = this.reStartButton.bind(this);\n    this.gameStatsButton = this.gameStatsButton.bind(this);\n    this.gameStatsContents = this.gameStatsContents.bind(this);\n    this.statsLayout = this.statsLayout.bind(this);\n  }\n\n  ////////////////\n  // Implementation methods\n  ////////////////\n\n  reStart(event) {\n    event.preventDefault();\n    // TODO: nodeJs routing to save the data into json (log)??\n    // window.location.reload(false);\n    this.reSetGame();\n    console.log(\"current card: \", this.state.current);\n  }\n\n  // pieChart() {\n  //   let correct = parseInt(this.state.percentage, 10) + 0.53;\n  //   console.log(\"correct: \", correct, typeof correct);\n  //   let cover = correct.toString() + \" 100\";\n  //   console.log(\"cover: \", cover, typeof cover);\n  //   return (\n  //     <svg id=\"pieGraph\" viewBox=\"0 0 32 32\" width=\"100\" height=\"100\">\n  //       <circle r=\"25\" cx=\"50\" cy=\"50\" strokeDasharray={cover} />\n  //     </svg>\n  //   );\n  // }\n\n  stackLevel() {\n    let level = \"\";\n    let infoLevel = \"\";\n    if (this.state.lengthOfStack <= 10) {\n      level = \" easy\";\n      infoLevel = \" (any stack with less than 10 cards is considered easy).\";\n    } else if (this.state.lengthOfStack <= 20) {\n      level = \" in an intermediate level\";\n      infoLevel =\n        \" (any stack with more than 10 cards, but less than 20, is considered easy).\";\n    } else {\n      level = \" hard\";\n      infoLevel = \" (any stack with more than 20 cards is considered hard).\";\n    }\n    return (\n      <div>\n        <p>\n          {\" \"}\n          This is considered to be\n          <strong className=\"highlight\">{level}</strong>\n          {infoLevel}\n        </p>\n      </div>\n    );\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  gameStatsButton() {\n    return (\n      <button className=\"buttonStyle\" type=\"button\" onClick={this.reStart}>\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <StatsIcon className=\"buttonStyle\" />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Game statistics</span>\n            </div>{\" \"}\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  gameStatsContents() {\n    return (\n      <div id=\"gameStatsContents\">\n        <h2>Game Stats</h2>\n        <div>\n          You finished your stack. This stack was made up of\n          <strong className=\"highlight\"> {this.state.lengthOfStack} </strong>\n          cards. {this.stackLevel()}\n        </div>\n        <p>\n          You guessed{\" \"}\n          <strong className=\"highlight\"> {this.state.guesses}</strong> times, of\n          which\n          <strong className=\"highlight\"> {this.state.wrong} </strong> were\n          wrong.\n        </p>\n        <div id=\"percentage\">\n          That means you got{\" \"}\n          <strong className=\"highlight\"> {this.state.percentage}% </strong>of\n          your guesses right.\n          <br />\n          {/* <div id=\"graphView\">\n            Graphical view (<strong className=\"statEmphasis\">yellow </strong>{\" \"}\n            represents the right answers):\n          </div> */}\n          {/* {this.pieChart()} */}\n        </div>\n      </div>\n    );\n  }\n\n  gameStats() {\n    return (\n      <React.Fragment>\n        <div>\n          {this.gameStatsButton()}\n          {this.gameStatsContents()}\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  reStartButton() {\n    return (\n      <button className=\"buttonStyle\" type=\"button\" onClick={this.reStart}>\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <RewindIcon className=\"buttonStyle\" />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\"> Start over</span>\n            </div>\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  reStartTheGame() {\n    return (\n      <div id=\"reStartButton\">\n        {this.reStartButton()}\n        <h4 id=\"reStartQuestion\">Do you want to re-start the stack?</h4>\n      </div>\n    );\n  }\n\n  //TODO make a an array with the cards that were wrong in CardSet and present them in the stats\n\n  statsLayout() {\n    return (\n      <div id=\"gameOverWrap\">\n        <div id=\"gameStats\">{this.gameStats()}</div>\n        <div id=\"reStartMe\">{this.reStartTheGame()}</div>\n      </div>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.statsLayout()}</React.Fragment>;\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Score extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"scoreArea\">\n          <div id=\"ongoingScore\">\n            Right answers:{\" \"}\n            <div className=\"scoreNumbers\">{this.props.rightAnswers}</div>\n            Wrong answers:{\" \"}\n            <div className=\"scoreNumbers\">{this.props.wrongAnswers}</div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\n\nconst Check = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n      />\n    </svg>\n  );\n};\n\nexport default Check;\n","import React from \"react\";\n\nconst Wrong = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M6 18L18 6M6 6l12 12\"\n      />\n    </svg>\n  );\n};\n\nexport default Wrong;\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\n// import { TransitionGroup, Transition } from \"react-transition-group\";\nimport { AnimatePresence, motion } from \"framer-motion\";\n// Standard Log out page\nimport UserIsLoggedOut from \"./views/UserIsLoggedOut\";\n// module\nimport Stats from \"./CardSet/Stats\";\nimport Score from \"./CardSet/Score\";\n// icons\nimport Check from \"./icons/check\";\nimport Right from \"./icons/right\";\nimport Wrong from \"./icons/wrong\";\n\nexport default class CardSet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userIsLoggedIn: props.userIsLoggedIn,\n      currentStack: props.currentStack,\n      cards: props.cards,\n      current: 0,\n      face: true,\n      right: 0,\n      wrong: 0,\n      lengthOfStack: props.length,\n      stackIsOver: false,\n    };\n    // external modules\n    this.UserIsLoggedOut = UserIsLoggedOut;\n    this.Stats = Stats;\n    this.Score = Score;\n    // icons\n    // this.turning = turning;\n    // methods associated with rendering\n    this.cardSide = this.cardSide.bind(this);\n    this.cardCount = this.cardCount.bind(this);\n    this.buttonArea = this.buttonArea.bind(this);\n    this.controlButtons = this.controlButtons.bind(this);\n    this.flipButton = this.flipButton.bind(this);\n    /*     this.score = this.score.bind(this); */\n    // methods for child comp\n    this.reSetGame = this.reSetGame.bind(this);\n    // methods associated with cards\n    this.handleClick = this.handleClick.bind(this);\n    this.removeFromPile = this.removeFromPile.bind(this);\n    this.setAnswerRight = this.setAnswerRight.bind(this);\n    this.setAnswerWrong = this.setAnswerWrong.bind(this);\n    this.nextCardAvailable = this.nextCardAvailable.bind(this);\n    this.updateCurrentCard = this.updateCurrentCard.bind(this);\n    this.controlSide = this.controlSide.bind(this);\n    this.cardFlip = this.cardFlip.bind(this);\n    this.cardSetLayout = this.cardSetLayout.bind(this);\n    this.cardSetView = this.cardSetView.bind(this);\n    this.infoCard = this.infoCard.bind(this);\n  }\n\n  // Reload method, will be called from Stats\n  reSetGame() {\n    this.setState({\n      userIsLoggedIn: this.props.userIsLoggedIn,\n      currentStack: this.props.currentStack,\n      cards: this.props.currentStack.cards,\n      current: 0,\n      face: true,\n      right: 0,\n      wrong: 0,\n      lengthOfStack: this.props.currentStack.cards.length,\n      stackIsOver: false,\n    });\n  }\n\n  ////////////////\n  // Implementation methods\n  ////////////////\n\n  // Removes the item from the pile (called upon Right answer)\n  removeFromPile() {\n    // Most checks are done in the nextCard() method, however, some need to\n    // be performed here or there will be errors on render().\n    const newCardSet = this.state.cards.slice();\n    newCardSet.splice(this.state.current, 1);\n    this.setState(() => ({\n      cards: newCardSet,\n    }));\n    this.updateCurrentCard();\n  }\n\n  // These functions set answerIsRight/wrong in the card array of objects to true/false,\n  // Then, it calls the next functions depending on the conditions/\n  setAnswerRight() {\n    this.setState(() => ({\n      face: true,\n      right: this.state.right + 1,\n    }));\n    // No need to increment, on removing, the array will set back in\n    // we need, though, to check if on removing, the pile won't collapse\n    if (this.nextCardAvailable(this.state)) {\n      this.removeFromPile(this.state);\n    } else {\n      // if, on removing, the pile is empty, the stack is over\n      this.setState({\n        stackIsOver: true,\n      });\n    }\n    return;\n  }\n\n  setAnswerWrong() {\n    this.setState(() => ({\n      face: true,\n      wrong: this.state.wrong + 1,\n    }));\n    if (this.nextCardAvailable(this.state)) {\n      this.updateCurrentCard();\n    }\n    return;\n  }\n\n  // Sequence of logical checks to determine if we should call a next card or not\n  nextCardAvailable() {\n    // Is the pile empty?\n    if (this.state.cards.length === 0) {\n      this.setState(() => ({ stackIsOver: true }));\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  // Updates the number of the current cards\n  updateCurrentCard() {\n    // key aspect is increment or decrement current, to keep the\n    // app from looking for a card number that doesn't exist\n    let next = this.state.current + 1;\n    if (next >= this.state.cards.length - 1) {\n      next = 0;\n    }\n    this.setState(() => ({\n      current: next,\n    }));\n    return;\n  }\n\n  // * Page rendering functions\n\n  // This function shows the back of the current card (works like a switch button)\n  handleClick() {\n    this.setState((state) => ({\n      face: !state.face,\n    }));\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  infoCard() {\n    return (\n      <div id=\"shortMessage\" className=\"infoCard\">\n        <p>\n          Flip the card with the flip button. Then, indicate ✓ for right answer\n          or ✘ for wrong answer.\n        </p>\n      </div>\n    );\n  }\n\n  cardFlip() {\n    return (\n      <motion.div\n        /*     transition={{ ease: \"easeIn\", duration: 0.7 }} */\n        className=\"cardText\"\n      >\n        {this.state.face ? (\n          <AnimatePresence>\n            <motion.div whileHover={{ scale: 1.02 }} id=\"cardFront\">\n              {this.state.cards[this.state.current].front}\n            </motion.div>\n          </AnimatePresence>\n        ) : (\n          <motion.div\n            whileHover={{ scale: 1.02 }}\n            animate={{ rotateY: 360 }}\n            transition={{ ease: \"easeInOut\", duration: 0.7 }}\n            id=\"cardBack\"\n          >\n            {this.state.cards[this.state.current].back}\n          </motion.div>\n        )}\n      </motion.div>\n    );\n  }\n\n  flipButton() {\n    return (\n      <button className=\"buttonStyle\" type=\"button\" onClick={this.handleClick}>\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Check />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Flip</span>\n            </div>{\" \"}\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  rightAnswerButton() {\n    return (\n      <div id=\"correctButton_Positioning\">\n        <button\n          className=\"buttonStyle\"\n          type=\"button\"\n          onClick={() => this.setAnswerRight(this.state)}\n        >\n          <div className=\"flipContainer\">\n            <div className=\"flipInner\" onClick={this.handleClick}>\n              <div className=\"flipFront\">\n                <Right />\n              </div>\n              <div className=\"flipBack\">\n                <span className=\"buttonMessage\">Right</span>\n              </div>\n            </div>\n          </div>\n        </button>\n      </div>\n    );\n  }\n\n  wrongAnswerButton() {\n    return (\n      <button\n        className=\"buttonStyle\"\n        type=\"button\"\n        onClick={() => this.setAnswerWrong(this.state)}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\" onClick={this.handleClick}>\n            <div className=\"flipFront\">\n              <Wrong />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Wrong</span>\n            </div>\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  // rendering of right or wrong buttons and call for the setCard\n  controlButtons() {\n    // only shows when the card is in the back view (face===false)\n    if (!this.state.face)\n      return (\n        <React.Fragment>\n          <div id=\"buttonsWrapper\">\n            {this.rightAnswerButton()}\n            {this.wrongAnswerButton()}\n          </div>\n        </React.Fragment>\n      );\n  }\n\n  buttonArea() {\n    return (\n      <div id=\"buttonsArea\">\n        <div id=\"flipButton\">{this.flipButton()}</div>\n        <div id=\"controlButtons\">{this.controlButtons()}</div>\n      </div>\n    );\n  }\n\n  cardCount() {\n    if (\n      this.state.cards.length !== 0 ||\n      (this.state.current !== 0 && this.state.cards.length !== 0)\n    ) {\n      return (\n        <React.Fragment>\n          <div className=\"scoreArea\">\n            <div id=\"currentCard\">\n              Card number:\n              <div className=\"scoreNumbers\">\n                <p>\n                  {this.state.current + 1}/{this.state.cards.length}\n                </p>\n              </div>\n            </div>\n            <br />\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n\n  controlCardArea() {\n    return (\n      <div id=\"controlCardArea\">\n        {this.buttonArea()}\n        <div id=\"info\">{this.infoCard()}</div>\n        <div id=\"scoreCardArea\">\n          <Score\n            rightAnswers={this.state.right}\n            wrongAnswers={this.state.wrong}\n          />\n          <div id=\"cardCount\"> {this.cardCount()} </div>\n          <br />\n          <div id=\"currentPlayStack\">\n            <p>Current stack is: </p>\n            <strong className=\"currentSelectedStack\">\n              {this.state.currentStack.stackName}\n            </strong>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  cardSide() {\n    try {\n      if (this.state.cards.length === 0 || this.state.stackIsOver) {\n        // this.setState({ stackIsOver: true });\n        return (\n          <Stats\n            right={this.state.right}\n            wrong={this.state.wrong}\n            lengthOfStack={this.state.lengthOfStack}\n            reSetGame={this.reSetGame}\n          />\n        );\n      } else {\n        return this.cardFlip();\n      }\n    } catch (E) {\n      console.log(\"error on rendering\", E);\n    }\n  }\n\n  controlSide() {\n    try {\n      if (this.state.cards.length === 0 || this.state.stackIsOver) {\n        // this.setState({ stackIsOver: true });\n        return <div></div>;\n      } else {\n        return this.controlCardArea();\n      }\n    } catch (E) {\n      console.log(\"error on rendering\", E);\n    }\n  }\n\n  cardSetLayout() {\n    return (\n      <div id=\"cardSetLayout\">\n        {this.cardSide()}\n        {this.controlSide()}\n      </div>\n    );\n  }\n\n  cardSetView() {\n    // console.log(\"CARD SET PLAY\");\n    return (\n      <div id=\"cardSetView\">\n        {this.state.userIsLoggedIn ? (\n          <div id=\"loggedInView\">{this.cardSetLayout()}</div>\n        ) : (\n          <Redirect to=\"/\" />\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.cardSetView()}</React.Fragment>;\n  }\n}\n","// import React from \"react\";\nimport useDB_Connection from \"../DB-hook/connection-hook\";\n\nconst connectToDB = useDB_Connection;\n\nasync function updateCurrentStack(stackNo, token) {\n  console.log(\"Up stack will request: \", stackNo);\n  let url = process.env.REACT_APP_BACKEND_URL + \"/cardApi/\" + String(stackNo);\n  let header = { Authorization: \"Bearer \" + token };\n  const getStackData = await connectToDB(url, \"GET\", null, header);\n  if (!getStackData || getStackData === undefined) {\n    return false;\n  } else {\n    return getStackData;\n  }\n}\n\nexport default updateCurrentStack;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n// Style\nimport \"./index.scss\";\n//* Navigation elements\n// Base layout\nimport Navigation from \"./components/views/Navigation\";\nimport Title from \"./components/views/Title\";\n// Routed layout\nimport StackManagement from \"./components/StackManagement\";\nimport CardManagement from \"./components/CardManagement\";\nimport LogInSignUp from \"./components/LogInSignUp\";\nimport CurrentStack from \"./components/CurrentStack\";\n// import Page404 from \"./components/views/Page404\";\nimport ConsolidateChanges from \"./components/views/ConsolidateChanges\";\nimport CardSet from \"./components/CardSet\";\n// hooks\n// import useDB_Connection from \"./Data/DB-hook/connection-hook\";\n// data update functions\nimport updateCurrentStack from \"./Data/Data_Update/updateCurrentStack\";\n// import updateUserData from \"./Data/Data_Update/updateUserData\";\n// dummy data: used for tests and dev\n// import dummyUser from \"./Data/DummyData/user.json\";\n// import dummyStack from \"./Data/DummyData/technology.json\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      userIsLoggedIn: false,\n      currentUser: \"\",\n      currentStack: \"\",\n      token: \"\",\n      messageToUser: \"Welcome to Flashcards. Log in or Sign up.\",\n    };\n    // Hooks\n    // this.useDB_Connection = useDB_Connection;\n    // data (API) methods\n    this.updateCurrentStack = updateCurrentStack;\n    // this.updateUserData = updateUserData;\n    // state handling\n    this.setCurrentStack = this.setCurrentStack.bind(this);\n    this.logIn_User = this.logIn_User.bind(this);\n    this.logOut_User = this.logOut_User.bind(this);\n    // views\n    this.loggedOutView = this.loggedOutView.bind(this);\n    this.loggedInView = this.loggedInView.bind(this);\n    this.InformationCard_App = this.InformationCard_App.bind(this);\n    // this.baseView = this.baseView.bind(this);\n    this.appView = this.appView.bind(this);\n  }\n\n  ///\n  //* State handling\n  ///\n\n  // TODO: update app to reflect changes on the API feedback.\n  async setCurrentStack(stackNo) {\n    // retrieve new stack data from API\n    console.log(\"STACK IN\\n. Request for: \", stackNo);\n    let letsUpdateStack;\n    letsUpdateStack = await updateCurrentStack(stackNo, this.state.token)\n      .then((letsUpdateStack) => {\n        this.setState({ currentStack: letsUpdateStack });\n      })\n      .then(() => {\n        this.setState({\n          userIsLoggedIn: !!this.state.currentUser.token,\n        });\n      })\n      .catch((err) => {\n        console.log(\"Error on Stack Update. Error 76.\\n\", err);\n        this.setState({\n          messageToUser: \"There was an error on the Log In(error 76).\",\n        });\n      });\n    if (!letsUpdateStack) {\n      letsUpdateStack = false;\n      return letsUpdateStack;\n    }\n  }\n\n  logIn_User(userData) {\n    let stackId = userData.userStacks[0].stack_id;\n    const logInToken = userData.token;\n    this.setState({\n      currentUser: userData,\n      messageToUser: \"Log in being processed.\",\n      token: logInToken,\n    });\n    // update stack\n    this.setCurrentStack(stackId);\n  }\n\n  logOut_User() {\n    this.setState({\n      userIsLoggedIn: false,\n      currenUser: \" \",\n      currentStack: \" \",\n    });\n    window.location.reload();\n  }\n\n  ///\n  //* Views\n  ///\n\n  InformationCard_App() {\n    return (\n      <div className=\"infoCard\">\n        <p>{this.state.messageToUser}</p>\n      </div>\n    );\n  }\n\n  loggedInView() {\n    return (\n      // <div className=\"flex-container\">\n      <Router>\n        <Title />\n        <div id=\"Main_contents\">\n          <div id=\"navBar\">\n            <Navigation\n              currentUser={this.state.currentUser}\n              userIsLoggedIn={this.state.userIsLoggedIn}\n              logOut_User={this.logOut_User}\n            />\n          </div>\n          <div id=\"currentView\">\n            <Switch>\n              {/* <Route exact path=\"/\" component={BaseRoute} /> */}\n              <Route\n                exact\n                path=\"/curStack\"\n                render={(props) => (\n                  <CurrentStack\n                    {...props}\n                    userIsLoggedIn={this.state.userIsLoggedIn}\n                    currentUser={this.state.currentUser}\n                    currentStack={this.state.currentStack}\n                    setCurrentStack={this.setCurrentStack}\n                  />\n                )}\n              />\n              <Route\n                exact\n                path=\"/cardManagement\"\n                render={(props) => (\n                  <CardManagement\n                    {...props}\n                    userIsLoggedIn={this.state.userIsLoggedIn}\n                    currentUser={this.state.currentUser}\n                    userStacks={this.state.currentUser.userStacks}\n                    currentStack={this.state.currentStack}\n                    token={this.state.token}\n                  />\n                )}\n              />\n              <Route\n                exact\n                path=\"/stackManagement\"\n                render={(props) => (\n                  <StackManagement\n                    {...props}\n                    userIsLoggedIn={this.state.userIsLoggedIn}\n                    currentUser={this.state.currentUser}\n                    userStacks={this.state.currentUser.userStacks}\n                    currentStack={this.state.currentStack}\n                    setCurrentStack={this.setCurrentStack}\n                    token={this.state.token}\n                  />\n                )}\n              />\n              <Route\n                exact\n                path=\"/cardSet\"\n                render={(props) => (\n                  <CardSet\n                    {...props}\n                    userIsLoggedIn={this.state.userIsLoggedIn}\n                    currentStack={this.state.currentStack}\n                    cards={this.state.currentStack.cards}\n                    lenght={this.state.currentStack.length}\n                  />\n                )}\n              />\n              <Route\n                exact\n                path=\"/consolidateChanges\"\n                render={(props) => (\n                  <ConsolidateChanges\n                    {...props}\n                    userIsLoggedIn={this.state.userIsLoggedIn}\n                    currentStack={this.state.currentStack}\n                  />\n                )}\n              />\n              <Route exact path=\"/logIn\">\n                {this.state.userIsLoggedIn ? (\n                  <Redirect to=\"/curStack\" />\n                ) : (\n                  <Redirect to=\"/logIn\" />\n                )}\n              </Route>\n              {/* <Route exact path=\"/\">\n              <Redirect to=\"/curStack\" />\n            </Route> */}\n              <Route exact path=\"*\">\n                {this.state.userIsLoggedIn ? (\n                  <Redirect to=\"/curStack\" />\n                ) : (\n                  <Redirect to=\"/logIn\" />\n                )}\n              </Route>\n            </Switch>\n          </div>\n        </div>{\" \"}\n      </Router>\n\n      // </div>\n    );\n  }\n\n  loggedOutView() {\n    return (\n      <div id=\"loggedOutView\">\n        <Router>\n          <Route\n            exact\n            path=\"/logIn\"\n            render={(props) => (\n              <LogInSignUp\n                {...props}\n                userIsLoggedIn={this.state.userIsLoggedIn}\n                currentUser={this.state.currentUser}\n                logIn_User={this.logIn_User}\n              />\n            )}\n          />\n          <Route exact path=\"*\">\n            {this.state.userIsLoggedIn ? (\n              <Redirect to=\"/curStack\" />\n            ) : (\n              <Redirect to=\"/logIn\" />\n            )}\n          </Route>\n        </Router>\n        {this.InformationCard_App()}\n      </div>\n    );\n  }\n\n  appView() {\n    // console.log(\"APP View reload\");\n    if (this.state.userIsLoggedIn === true) {\n      return <div id=\"user_is_logged_in\">{this.loggedInView()}</div>;\n    } else {\n      return <div id=\"user_is_logged_out\">{this.loggedOutView()}</div>;\n    }\n  }\n\n  render() {\n    return <div id=\"App_View\">{this.appView()}</div>;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}