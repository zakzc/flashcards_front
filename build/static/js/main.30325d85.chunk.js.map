{"version":3,"sources":["assets/icons/logIn.js","assets/icons/pile.js","assets/icons/play.js","assets/icons/editCard.js","assets/icons/editStacks.js","components/Navigation/Menu.jsx","components/Navigation/NavBar_burgerMen.js","components/Navigation/NavBar_0.jsx","assets/icons/logOut.js","components/Title/LogOutButton.jsx","assets/icons/pileLogo.js","components/Title/Title.jsx","utils/Connection/connection-hook.js","utils/Data_Update/removeCurStack.js","assets/icons/trash.js","components/StackManagement/StackMan_RemoveCurStack.jsx","utils/Data_Update/addNewSet.js","utils/Connection/validate.js","assets/icons/consolidate.js","assets/icons/plus.js","assets/icons/right.js","components/StackManagement/StackMan_AddNewStack.jsx","assets/icons/export.js","components/StackManagement/StackMan_ExpoStack.jsx","components/views/UserIsLoggedOut.js","components/StackManagement/StackMan_0.jsx","utils/Data_Update/updateCards.js","assets/icons/cardEdit.js","components/CardManagement/CardMan_ManageCards.jsx","components/CardManagement/CardMan_0.jsx","utils/Data_Update/logUserIn.js","components/LogInSignUp/LogSign_LogInPage.jsx","utils/Data_Update/signUserUp.js","components/LogInSignUp/LogSign_SignUpPage.jsx","components/LogInSignUp/LogSign_0.jsx","components/CurrentStack/CurStack_ReadCards.jsx","components/CurrentStack/CurStack_SelectNewStack.jsx","assets/icons/collection.js","assets/icons/checkEye.js","components/CurrentStack/CurStack_0.jsx","components/views/Loader.js","components/views/ConsolidateChanges.jsx","assets/icons/rewind.js","assets/icons/stats.js","components/CardSet/CardSet_Stats.jsx","components/CardSet/CardSet_Score.jsx","assets/icons/check.js","assets/icons/wrong.js","components/CardSet/CardSet_0.jsx","utils/Data_Update/updateCurrentStack.js","App.jsx","serviceWorker.js","index.js"],"names":["LogIn","className","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","Pile","aria-hidden","focusable","Play","EditCard","fillRule","clipRule","EditStacks","Menu","props","state","currentUser","userIsLoggedIn","logUserOut","bind","this","logOut_User","id","style","listStyleType","padding","activeclassname","to","Component","Burger","useState","burgerToggle","setBurgerToggle","onClick","Navigation","loggedInNavBar","loggedOutNavBar","Fragment","type","window","location","reload","navigationLayout","LogOut","LogOutButton","PileLogo","Title","url","a","method","body","headers","fetch","response","console","log","text","rawData","JSON","parse","responseData","status","Error","message","useDB_Connection","connectToDB","stackNo","token","process","Authorization","RemoveCurrentStack","trash","RemoveCurStack","currentStack","stackName","redirectUser","messageToUser","setCurrentStack","warning","deleteButton","deleteHandler","deleteStackView","sampleStack","userStacks","length","setState","_id","then","stack_id","undefined","catch","err","removeProcess","redirectToConsolidate","stack","requestBody","stringify","header","Accept","addNewSet","validateEmail","eMail","CheckInput","CheckForInvalidCharacters","test","validatePasswordInput","pswInput","inputToCheck","trim","dataToCheck","map","c","includes","Consolidate","Plus","Right","AddNewStack","StackNameSubmitHandler","event","preventDefault","newName","stackNewName","value","newStackName","handleSubmitAddCardHandler","validateInput","newFront","newBack","newCardsToStack","push","front","back","frontValue","backValue","numberOfCardsAdded","handleFrontCardChange","e","target","addFront","handleBackCardChange","addBack","messageToUserBack","readyToSend","redirect","AddCardForm","consolidateNewStack","handleSubmitReady","consolidateButtonStack","infoCard","checkButton","AddCardButton","renderRedirect","cardNumbering","newStack","createdBy","cards","newData","name","onChange","ref","input","newStackNameForm","Export","ExportStack","prepareData","exportHandler","exportButton","infoOnExport","dataToExport","firstName","lastName","data","stackData","document","createElement","href","URL","createObjectURL","Blob","setAttribute","appendChild","click","removeChild","UserIsLoggedOut","StackManagement","add","export","delete","AddSwitch","exportSwitch","deleteSwitch","addStackButton","exportStackButton","deleteStackButton","stackNav","StackMessage","chosenFunctionality","StackManagementLayout","StackManagementView","urlUpdateCards","String","getStackData","updateCards","cardEdit","ManageCards","user","cardForEditing","cardForEditingId","editingMode","tempNewFront","tempNewBack","updatedItemMessage","editCard","cardsInCurrentStack","frontEditHandler","backEditHandler","editButtonHandler","makeNewCardSet","chooseCard","stackWasUpdated","plusButton","editButton","consolidateButton","consolidateButtonView","inputForm","showCurrentStack","f","newValueFront","newValueBack","frontReceived","backReceived","updatedStack","selectedCard","i","key","CardManagement","addOrManage","cardManagementLayout","cardManagementView","email","psw","userEmail","password","userLogInCheck","LogUserIn","LogInPage","errorMessage","logIn_User","handleSubmitLogInForm","logInView","logInForm","validateCredentials","logInProcess","em","logInData","p","userPsw","label","userSignUpCheck","SignUserUp","SignUpPage","logInOrSignUpSwitch","validateAccessCredentials","handleSubmitSignUpForm","signUpForm","signUpView","userFirstName","userLastName","signUpProcess","userPassword","credentials","userEmailSignUp","userPswSignUp","userFirstNameSignUp","userLastNameSignUp","proceedToSignUp","LogInSignUp","logInOrSignUpState","logInOrSignUpDisplay","logInSignUpView","updateUser","ReadCards","m","j","SelectNewStack","chosenStackId","chosenStackName","confirmation","stackSelector","chooseNewStack","getNewStackName","confirmNewStack","chooseNewStackView","preSelectView","afterSelectView","newStackID","listOfStacks","l","stack_name","s","confirmationButton","InformationCard_Select","selectNewStackView","Collection","Check2","CurrentStack","readOrSelect","update","selectNewStack","changeStackButton","currentStackLayout","readSelectSwitch","SelectDifferentStackButton","currentStackView","ReadStackButton","Loader","ConsolidateChanges","viewSwitch","initialView","finalView","ConsolidateChangesLayout","ConsolidateChangesView","setTimeout","Rewind","Stats","right","wrong","lengthOfStack","guesses","percentage","toFixed","reSetGame","reStart","stackLevel","reStartButton","gameStatsButton","gameStatsContents","statsLayout","gameStats","reStartTheGame","Score","rightAnswers","wrongAnswers","Check","Wrong","CardSet","current","face","stackIsOver","cardSide","cardCount","buttonArea","controlButtons","flipButton","handleClick","removeFromPile","setAnswerRight","setAnswerWrong","nextCardAvailable","updateCurrentCard","controlSide","cardFlip","cardSetLayout","cardSetView","newCardSet","slice","splice","next","div","whileHover","scale","animate","rotateY","transition","ease","duration","rightAnswerButton","wrongAnswerButton","E","controlCardArea","React","updateCurrentStack","App","loggedOutView","loggedInView","InformationCard_App","appView","letsUpdateStack","userData","stackId","logInToken","currenUser","exact","path","render","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"8jDAqBeA,G,MAnBD,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACf,OACE,yBACEA,UAAWA,EACXC,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRC,OAAO,gBAEP,0BACEC,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,oG,QCQKC,EArBF,SAAC,GAAmB,IAAjBT,EAAgB,EAAhBA,UACd,OACE,yBACEA,UAAWA,EACXU,cAAY,OACZC,UAAU,QAKVV,MAAM,6BACNE,QAAQ,eAER,0BACED,KAAK,eACLM,EAAE,soBCUKI,EAzBF,SAAC,GAAmB,IAAjBZ,EAAgB,EAAhBA,UACd,OACE,yBACEA,UAAWA,EACXC,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRC,OAAO,gBAEP,0BACEC,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,qGAEJ,0BACEH,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,yCCDKK,EAlBE,SAAC,GAAmB,IAAjBb,EAAgB,EAAhBA,UAClB,OACE,yBACEA,UAAWA,EACXC,MAAM,6BACNE,QAAQ,YACRD,KAAK,gBAEL,0BAAMM,EAAE,kFACR,0BACEM,SAAS,UACTN,EAAE,yFACFO,SAAS,cCaFC,EAzBI,SAAC,GAAmB,IAAjBhB,EAAgB,EAAhBA,UACpB,OACE,yBACEA,UAAWA,EACXC,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRC,OAAO,gBAEP,0BACEC,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,weAEJ,0BACEH,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,uCCbWS,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAaF,EAAME,YACnBC,eAAgBH,EAAMG,gBAGxB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAPD,E,8CAUnB,WACEC,KAAKC,gB,oBAGP,WACE,OACE,yBAAKC,GAAG,eACN,wBACEC,MAAO,CAAEC,cAAe,OAAQC,QAAS,GACzCC,gBAAgB,SAChBJ,GAAG,WAEH,wBAAI1B,UAAU,mBACZ,kBAAC,IAAD,CAAS+B,GAAG,aACV,yBAAK/B,UAAU,YACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,gBAAf,qBAKR,wBAAIA,UAAU,kBACZ,kBAAC,IAAD,CAAS+B,GAAG,YACV,yBAAK/B,UAAU,YACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,gBAAf,kBAKR,wBAAIA,UAAU,kBACZ,kBAAC,IAAD,CAAS+B,GAAG,mBACV,yBAAK/B,UAAU,YACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,gBAAf,oBAKR,wBAAIA,UAAU,kBACZ,kBAAC,IAAD,CAAS+B,GAAG,oBACV,yBAAK/B,UAAU,YACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,OACK,IACP,yBAAKA,UAAU,gBAAf,2B,GAlEgBgC,aCLnB,SAASC,IAAU,IAAD,EACSC,oBAAS,GADlB,mBACxBC,EADwB,KACVC,EADU,KAI/B,OACE,yBAAKV,GAAG,UACN,4BACE1B,UAAWmC,EAAe,SAAW,SACrCE,QAAS,kBAAMD,GAAiBD,KAEhC,yBAAKnC,UAAU,SACf,yBAAKA,UAAU,SACf,yBAAKA,UAAU,UAEhBmC,GAAgB,kBAAC,EAAD,O,ICVFG,E,kDACnB,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAaF,EAAME,YACnBC,eAAgBH,EAAMG,gBAGxB,EAAKI,YAAc,EAAKP,MAAMO,YAC9B,EAAKc,eAAiB,EAAKA,eAAehB,KAApB,gBACtB,EAAKiB,gBAAkB,EAAKA,gBAAgBjB,KAArB,gBACvB,EAAKD,WAAa,EAAKA,WAAWC,KAAhB,gBAVD,E,8CAanB,WACEC,KAAKC,gB,yBAGP,WACE,OACE,kBAAC,IAAMgB,SAAP,KACE,4BACEf,GAAG,eACHgB,KAAK,SACLL,QAAS,WACPM,OAAOC,SAASC,e,4BAO1B,WACE,OACE,yBAAKnB,GAAG,eACN,kBAACO,EAAD,S,6BAKN,WACE,OACE,yBAAKP,GAAG,gBACN,wBACEC,MAAO,CAAEC,cAAe,OAAQC,QAAS,GACzCC,gBAAgB,UAEhB,wBAAI9B,UAAU,kBACZ,kBAAC,IAAD,CAAM+B,GAAG,SAAS/B,UAAU,iBAC1B,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAAOA,UAAU,eACZ,IACP,yBAAKA,UAAU,gBAAf,gB,8BAQZ,WACE,OACE,6BACGwB,KAAKL,MAAME,eACV,yBAAKK,GAAG,kBAAkBF,KAAKe,kBAE/B,yBAAKb,GAAG,mBAAmBF,KAAKgB,sB,oBAMxC,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKf,GAAG,cAAcF,KAAKsB,yB,GA3EKd,aCczBe,EAnBA,SAAC,GAAmB,IAAjB/C,EAAgB,EAAhBA,UAChB,OACE,yBACEA,UAAWA,EACXC,MAAM,6BACNC,KAAK,OACLC,QAAQ,gBACRC,OAAO,gBAEP,0BACEC,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,gGCVWwC,E,kDACnB,WAAY9B,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAaF,EAAME,YACnBC,eAAgBH,EAAMG,gBAGxB,EAAKI,YAAcP,EAAMO,YAAYF,KAAlB,gBAPF,E,0CAUnB,WACE,OACE,yBAAKG,GAAG,gBACN,4BACE1B,UAAU,cACV0C,KAAK,SACLL,QAASb,KAAKC,aAEd,kBAAC,IAAD,CAASM,GAAG,KACV,yBAAK/B,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,YACb,0BAAMA,UAAU,iBAAhB,sB,GA1BwBgC,aCkB3BiB,EArBE,SAAC,GAAmB,IAAjBjD,EAAgB,EAAhBA,UAClB,OACE,yBACEA,UAAWA,EACXU,cAAY,OACZC,UAAU,QAKVV,MAAM,6BACNE,QAAQ,eAER,0BACED,KAAK,eACLM,EAAE,soBCbW0C,E,kDACnB,WAAYhC,GAAQ,IAAD,8BACjB,cAAMA,IAEDO,YAAcP,EAAMO,YAHR,E,0CAKnB,WACE,OACE,kBAAC,IAAMgB,SAAP,KACE,yBAAKf,GAAG,aACN,yBAAKA,GAAG,aACN,wBAAI1B,UAAU,SAAd,cACa,kBAAC,EAAD,CAAUA,UAAU,eAGnC,yBAAK0B,GAAG,cACN,kBAAC,EAAD,CAAeD,YAAaD,KAAKC,qB,GAhBVO,a,4CCJnC,WAAgCmB,GAAhC,qCAAAC,EAAA,6DAAqCC,EAArC,+BAA8C,MAAOC,EAArD,+BAA4D,KAAMC,EAAlE,yCAGqBC,MAAML,EAAK,CAC1BE,SACAC,OACAC,YANN,OAGIE,EAHJ,8DASIC,QAAQC,IAAI,6CAAZ,MATJ,mBAUW,GAVX,yBAcwBF,EAASG,OAdjC,eAcQC,EAdR,2BAkByBC,KAAKC,MAAMF,GAlBpC,QAkBIG,EAlBJ,iEAoBIN,QAAQC,IAAI,gCAAZ,MApBJ,mBAqBW,GArBX,WAwB2B,OAApBF,EAASQ,OAxBhB,uBAyBIP,QAAQC,IAAI,oCACN,IAAIO,MAAMF,EAAaG,SA1BjC,YA6BMH,EA7BN,0CA8BWA,GA9BX,QAgCIN,QAAQC,IAAI,4BAhChB,kCAkCS,GAlCT,kE,sBAqCeS,M,4CClCTC,EAAcD,E,4CAEpB,WAAkCE,EAASC,GAA3C,SAAAnB,EAAA,sDACEM,QAAQC,IAAI,mBAAoBW,GAIhCD,EADYG,oDAFMF,EAGD,SAAU,KAFd,CAAEG,cAAe,UAAYF,IAH5C,4C,sBAQeG,M,8CCMAC,EAjBD,SAAC,GAAmB,IAAjB3E,EAAgB,EAAhBA,UACf,OACE,yBACEA,UAAWA,EACXC,MAAM,6BACNE,QAAQ,YACRD,KAAK,gBAEL,0BACEY,SAAS,UACTN,EAAE,8MACFO,SAAS,c,QCJI6D,E,kDACnB,WAAY1D,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAaF,EAAME,YACnByD,aAAc3D,EAAM2D,aACpBC,UAAW5D,EAAM4D,UACjBP,MAAOrD,EAAMqD,MACbQ,cAAc,EACdC,cACE,yJAKJ,EAAKC,gBAAkB/D,EAAM+D,gBAE7B,EAAKC,QAAU,EAAKA,QAAQ3D,KAAb,gBACf,EAAK4D,aAAe,EAAKA,aAAa5D,KAAlB,gBACpB,EAAK6D,cAAgB,EAAKA,cAAc7D,KAAnB,gBACrB,EAAK8D,gBAAkB,EAAKA,gBAAgB9D,KAArB,gBAEvB,EAAK+D,YAAcA,EArBF,E,wFA2BnB,mCAAAlC,EAAA,yDACmD,IAA7C5B,KAAKL,MAAMC,YAAYmE,WAAWC,OADxC,gBAEIhE,KAAKiE,SAAS,CACZT,cACE,iFAJR,uCAQ0BN,EACpBlD,KAAKL,MAAM0D,aAAaa,IACxBlE,KAAKL,MAAMoD,OAEVoB,MAAK,WAEF,EAAKxE,MAAMC,YAAYmE,WAAW,GAAGK,eACaC,IAAlD,EAAK1E,MAAMC,YAAYmE,WAAW,GAAGK,SAErC,EAAKX,gBAAgB,EAAK9D,MAAMC,YAAYmE,WAAW,GAAGK,UAE1D,EAAKX,gBAAgBK,MAGxBK,MAAK,WACJ,EAAKF,SAAS,CAAEV,cAAc,OAE/Be,OAAM,SAACC,GAEN,OADArC,QAAQC,IAAI,yCAA0CoC,IAC/C,KA3Bf,UAQIC,EARJ,+BA8BMA,GAAgB,EA9BtB,kBA+BaA,GA/Bb,iD,gFAwCA,WACE,OACE,4BAEEhG,UAAU,cACV0C,KAAK,SACLL,QAASb,KAAK4D,eAEd,yBAAKpF,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,YACb,0BAAMA,UAAU,iBAAhB,mBACK,S,qBAOjB,WACE,OACE,6BACE,qDAEE,4BAAQA,UAAU,wBACf,IACAwB,KAAKL,MAAM2D,YAGhB,yBAAK9E,UAAU,YAAYwB,KAAKL,MAAM6D,eACtC,4BACA,gH,mCAQN,WACE,OACE,6BACE,kBAAC,IAAD,CAAUjD,GAAG,2B,6BAKnB,WACE,OACE,yBAAKL,GAAG,wBACN,yBAAKA,GAAG,iBAAiBF,KAAK0D,WAC9B,yBAAKxD,GAAG,4BAA4BF,KAAK2D,gBACxC3D,KAAKL,MAAM4D,aAAevD,KAAKyE,wBAA0B,iC,oBAKhE,WACE,OAAO,yBAAKvE,GAAG,mBAAR,IAA4BF,KAAK6D,uB,GAjIArD,aCNtCqC,EAAcD,E,4CAEpB,WAAyB8B,EAAO3B,GAAhC,mBAAAnB,EAAA,6DAEEM,QAAQC,IAAI,mCAAoCuC,SAAcA,GAC1DC,EAAcrC,KAAKsC,UAAUF,GACjCxC,QAAQC,IAAI,YAAawC,EAAa,oBAAqBA,GACvDE,EAAS,CACX,eAAgB,mBAChBC,OAAQ,mBACR7B,cAAe,UAAYF,GAG7Bb,QAAQC,IAAI,oBAXd,SAY0BU,EACtBG,+DACA,OACA2B,EACAE,GAhBJ,UAYQE,EAZR,OAmBE7C,QAAQC,IAAI,WAAY4C,IAID,IAArBA,EAAUtC,QACY,8BAAtBsC,EAAUpC,QAxBd,wBA0BIT,QAAQC,IAAI,2BA1BhB,mBA2BW,GA3BX,eA6BID,QAAQC,IAAI,yBAA0B4C,GA7B1C,mBA8BW,GA9BX,6C,sBAkCeA,M,8CCrCFC,EAAgB,SAACC,GAE5B,IAA2B,KAAtBC,EAAWD,GACd,OAAO,EAGP,IAAyC,IAArCE,EAA0BF,GAC5B,OAAO,EAMP,OAA4B,IADZ,iBACJG,KAAKH,IASVI,EAAwB,SAACC,GACpC,OAA6B,IAAzBJ,EAAWI,KAC+B,IAAxCH,EAA0BG,IAO5BJ,EAAa,SAACK,GAElB,SADiBA,EAAaC,OAAOxB,QAAU,IAQpCmB,EAA4B,SAACM,GAkBxC,OAjBwB,CACtB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KAEmCC,KAAI,SAACC,GAAD,OAAOF,EAAYG,SAASD,MACpDC,UAAS,KACxB1D,QAAQC,IAAI,gBACL,ICzCI0D,EAnBK,SAAC,GAAmB,IAAjBrH,EAAgB,EAAhBA,UACrB,OACE,yBACEA,UAAWA,EACXC,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRC,OAAO,gBAEP,0BACEC,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,kGCMK8G,EAnBF,SAAC,GAAmB,IAAjBtH,EAAgB,EAAhBA,UACd,OACE,yBACEA,UAAWA,EACXC,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRC,OAAO,gBAEP,0BACEC,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,iCCMK+G,EAnBD,SAAC,GAAmB,IAAjBvH,EAAgB,EAAhBA,UACf,OACE,yBACEA,UAAWA,EACXC,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRC,OAAO,gBAEP,0BACEC,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,qBCLWgH,E,kDACnB,WAAYtG,GAAQ,IAAD,8BACjB,cAAMA,IAmDRuG,uBAAyB,SAACC,GACxBA,EAAMC,iBACN,IAAIC,EAAU,EAAKC,aAAaC,MAChC,EAAKrC,UAAS,SAACtE,GACb,MAAO,CACL4G,aAAcH,OAzDD,EA2EnBI,2BAA6B,SAACN,GAC5BA,EAAMC,iBACN,EAAKlC,SAAS,CACZT,cACE,qEAGF,EAAKiD,cAAc,EAAK9G,MAAM+G,WAC9B,EAAKD,cAAc,EAAK9G,MAAMgH,UAE9B,EAAKhH,MAAMiH,gBAAgBC,KAAK,CAC9BC,MAAO,EAAKnH,MAAM+G,SAClBK,KAAM,EAAKpH,MAAMgH,UAEnB,EAAK1C,SAAS,CACZ+C,WAAY,GACZC,UAAW,GACXC,mBAAoB,EAAKvH,MAAMuH,mBAAqB,IAEtDhF,QAAQC,IAAI,uBAAwB,EAAKxC,MAAMiH,kBAE/C,EAAK3C,SAAS,CACZT,cAAe,+CAjGF,EAsHnB2D,sBAAwB,SAACC,GACvB,EAAKnD,SAAS,CAAE+C,WAAYI,EAAEC,OAAOf,QACrC,IAAIgB,EAAWF,EAAEC,OAAOf,MACxBpE,QAAQC,IAAI,WAAYmF,GACpBA,GACF,EAAKrD,SAAS,CACZyC,SAAUY,EACV9D,cAAe,+CA7HF,EAkInB+D,qBAAuB,SAACH,GACtB,EAAKnD,SAAS,CAAEgD,UAAWG,EAAEC,OAAOf,QACpC,IAAIkB,EAAUJ,EAAEC,OAAOf,MACvBpE,QAAQC,IAAI,gBAAiBqF,GACzBA,GACF,EAAKvD,SAAS,CACZ0C,QAASa,EACThE,cAAe,+CAvInB,EAAK7D,MAAQ,CACXC,YAAaF,EAAME,YACnByD,aAAc3D,EAAM2D,aACpBN,MAAOrD,EAAMqD,MACbS,cACE,+HACFiE,kBAAmB,yCACnBT,WAAY,GACZC,UAAW,GACXP,SAAU,GACVC,QAAS,GACTJ,aAAc,GACdK,gBAAiB,GACjBc,aAAa,EACbR,mBAAoB,EACpBS,UAAU,GAGZ,EAAKxC,0BAA4BA,EAEjC,EAAKqB,2BAA6B,EAAKA,2BAA2BzG,KAAhC,gBAGlC,EAAKoH,sBAAwB,EAAKA,sBAAsBpH,KAA3B,gBAC7B,EAAKkG,uBAAyB,EAAKA,uBAAuBlG,KAA5B,gBAC9B,EAAK6H,YAAc,EAAKA,YAAY7H,KAAjB,gBACnB,EAAK8H,oBAAsB,EAAKA,oBAAoB9H,KAAzB,gBAC3B,EAAK+H,kBAAoB,EAAKA,kBAAkB/H,KAAvB,gBACzB,EAAKgI,uBAAyB,EAAKA,uBAAuBhI,KAA5B,gBAC9B,EAAKiI,SAAW,EAAKA,SAASjI,KAAd,gBAChB,EAAKkI,YAAc,EAAKA,YAAYlI,KAAjB,gBACnB,EAAKmI,cAAgB,EAAKA,cAAcnI,KAAnB,gBACrB,EAAKoI,eAAiB,EAAKA,eAAepI,KAApB,gBACtB,EAAKqI,cAAgB,EAAKA,cAAcrI,KAAnB,gBAnCJ,E,8FA0CnB,WAA0BsI,GAA1B,SAAAzG,EAAA,6DACEM,QAAQC,IAAI,yBADd,SAEuB4C,EAAUzC,KAAKsC,UAAUyD,GAAWrI,KAAKL,MAAMoD,OAFtE,cAII/C,KAAKiE,SAAS,CAAE0D,UAAU,IAE1B3H,KAAKiE,SAAS,CAAET,cAAe,0CANnC,gD,sFAoBA,WACExD,KAAKiE,SAAS,CACZT,cACE,qEAEJ,IAAM6E,EAAW,CACf/E,UAAWtD,KAAKL,MAAM4G,aACtB+B,UAAWtI,KAAKL,MAAMC,YAAYM,GAClCqI,MAAOvI,KAAKL,MAAMiH,iBAEpB5G,KAAK6H,oBAAoBQ,K,2BA8B3B,SAAcG,GACZ,OAAKxI,KAAKmF,0BAA0BqD,IAQlCxI,KAAKiE,SAAS,CACZT,cAAe,iBAEV,IAVPxD,KAAKiE,SAAS,CACZT,cAAe,mCACfiE,kBACE,8EAEG,K,4BAqCX,WACE,GAAIzH,KAAKL,MAAMgI,SACb,OACE,kBAAC,IAAD,CACEpH,GAAG,sBACHV,eAAgBG,KAAKL,MAAME,mB,sBAMnC,WACE,OACE,yBAAKK,GAAG,gBACN,yBAAK1B,UAAU,gBACb,yBAAKA,UAAU,qBACb,uBAAGA,UAAU,qBAAqBwB,KAAKL,MAAM6D,eAC7C,uBAAGhF,UAAU,oBAAoBwB,KAAKL,MAAM8H,wB,2BAOtD,WACE,OACE,6BACE,iDAAuBzH,KAAKL,MAAMiH,gBAAgB5C,OAAlD,UACA,0HAIChE,KAAKL,MAAMiH,gBAAgB5C,OAAS,EACnC,6EAEA,uG,yBASR,WACE,OACE,4BACExF,UAAU,cACV0C,KAAK,SACLL,QAASb,KAAKiG,wBAEd,yBAAKzH,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,YACb,0BAAMA,UAAU,iBAAhB,aACK,KACF,Q,oCAMf,WACE,OAAIwB,KAAKL,MAAMuH,mBAAqB,EAEhC,4BACE1I,UAAU,cACV0C,KAAK,SACLL,QAASb,KAAK8H,mBAEd,yBAAKtJ,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,YACb,0BAAMA,UAAU,iBAAhB,2BAOH,gC,2BAIX,WACE,OACE,4BACEA,UAAU,cACV0C,KAAK,SACLL,QAASb,KAAKwG,4BAEd,yBAAKhI,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,YACb,0BAAMA,UAAU,iBAAhB,sB,yBAQZ,WACE,OACE,kBAAC,IAAMyC,SAAP,KACE,6BACE,8BACE,yBAAKzC,UAAU,eACb,oDACA,2BACEA,UAAU,YACV0C,KAAK,OACLuH,KAAK,QACLnC,MAAOtG,KAAKL,MAAMqH,WAClB0B,SAAU1I,KAAKmH,yBAGnB,yBAAK3I,UAAU,eACb,mDACA,2BACEA,UAAU,YACV0C,KAAK,OACLuH,KAAK,QACLnC,MAAOtG,KAAKL,MAAMsH,UAClByB,SAAU1I,KAAKuH,wBAGnB,6BACA,yBAAKrH,GAAG,kBACN,6BAAMF,KAAKkI,iBACVlI,KAAKoI,gBACN,iCAAOpI,KAAK+H,4BAGf/H,KAAKgI,WACLhI,KAAKmI,qB,8BAMd,WAAoB,IAAD,OACjB,OACE,kBAAC,IAAMlH,SAAP,KACGjB,KAAKL,MAAM4G,cAAgB,EAC1B,yBAAKrG,GAAG,kBACN,qCACQ,4BAAQ1B,UAAU,YAAlB,SADR,sEAIA,8BACE,2BACE0B,GAAG,kBACHgB,KAAK,OACLyH,IAAK,SAACC,GAAD,OAAY,EAAKvC,aAAeuC,KAEvC,6BAAM5I,KAAKiI,iBAIf,yBAAK/H,GAAG,mBACN,sDAC0B,gCAASF,KAAKL,MAAM4G,eAE9C,6CACiB,uCADjB,iCACoE,IAClE,sDAFF,qCAKCvG,KAAK4H,kB,oBAOhB,WACE,OAAO,kBAAC,IAAM3G,SAAP,KAAiBjB,KAAK6I,wB,GA7UQrI,aCW1BsI,EAnBA,SAAC,GAAmB,IAAjBtK,EAAgB,EAAhBA,UAChB,OACE,yBACEA,UAAWA,EACXC,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRC,OAAO,gBAEP,0BACEC,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,qECRW+J,E,kDACnB,WAAYrJ,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAaF,EAAME,YACnByD,aAAc3D,EAAM2D,aACpBC,UAAW5D,EAAM4D,WAGnB,EAAK0F,YAAc,EAAKA,YAAYjJ,KAAjB,gBACnB,EAAKkJ,cAAgB,EAAKA,cAAclJ,KAAnB,gBACrB,EAAKmJ,aAAe,EAAKA,aAAanJ,KAAlB,gBACpB,EAAKoJ,aAAe,EAAKA,aAAapJ,KAAlB,gBAXH,E,+CAkBnB,WAEE,IAAIqJ,EAAepJ,KAAKL,MAAM0D,oBACvB+F,EAAalJ,GACpBkJ,EAAad,UACXtI,KAAKL,MAAMC,YAAYyJ,UAAY,IAAMrJ,KAAKL,MAAMC,YAAY0J,SAElE,IAAIC,EAAOjH,KAAKsC,UAAUwE,EAAc,KAAM,GAC9ClH,QAAQC,IAAI,UAAWoH,SAAaA,GACpCvJ,KAAKiJ,cAAcM,K,2BAGrB,SAAcC,GAEZ,IAAM5H,EAAI6H,SAASC,cAAc,KACjC9H,EAAE+H,KAAOC,IAAIC,gBAAgB,IAAIC,KAAK,CAACN,GAAY,CAAEtI,KAAM,gBAC3DU,EAAEmI,aAAa,WAAY,qBAC3BN,SAAS3H,KAAKkI,YAAYpI,GAC1BA,EAAEqI,QACFR,SAAS3H,KAAKoI,YAAYtI,GAC1BM,QAAQC,IAAI,oB,0BAOd,WACE,OACE,4BAAQ3D,UAAU,cAAc0C,KAAK,SAASL,QAASb,KAAKgJ,aAC1D,yBAAKxK,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,YACb,0BAAMA,UAAU,iBAAhB,aACK,S,0BAOjB,WACE,OACE,kBAAC,IAAMyC,SAAP,KACE,6BACE,qDAEE,4BAAQzC,UAAU,wBACf,IACAwB,KAAKL,MAAM2D,YAGhB,wO,oBAWR,WACE,OACE,kBAAC,IAAMrC,SAAP,KACE,yBAAKf,GAAG,yBACN,6BAAMF,KAAKmJ,gBACX,6BAAMnJ,KAAKkJ,sB,GA1FoB1I,aCS1B2J,EAbS,WACtB,OACE,kBAAC,IAAMlJ,SAAP,KACE,yFACA,iEAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUV,GAAG,cCKA6J,E,kDACnB,WAAY1K,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXE,eAAgBH,EAAMG,eACtBD,YAAaF,EAAME,YACnByD,aAAc3D,EAAM2D,aACpBN,MAAOrD,EAAMqD,MACbsH,KAAK,EACLC,QAAQ,EACRC,QAAQ,GAMV,EAAK9G,gBAAkB/D,EAAM+D,gBAE7B,EAAK0G,gBAAkBA,EACvB,EAAKK,UAAY,EAAKA,UAAUzK,KAAf,gBACjB,EAAK0K,aAAe,EAAKA,aAAa1K,KAAlB,gBACpB,EAAK2K,aAAe,EAAKA,aAAa3K,KAAlB,gBACpB,EAAK4K,eAAiB,EAAKA,eAAe5K,KAApB,gBACtB,EAAK6K,kBAAoB,EAAKA,kBAAkB7K,KAAvB,gBACzB,EAAK8K,kBAAoB,EAAKA,kBAAkB9K,KAAvB,gBACzB,EAAK+K,SAAW,EAAKA,SAAS/K,KAAd,gBAChB,EAAKgL,aAAe,EAAKA,aAAahL,KAAlB,gBACpB,EAAKiL,oBAAsB,EAAKA,oBAAoBjL,KAAzB,gBAC3B,EAAKkL,sBAAwB,EAAKA,sBAAsBlL,KAA3B,gBA3BZ,E,6CAkCnB,WACEC,KAAKiE,UAAS,SAACtE,GAAD,MAAY,CACxB0K,KAAK,EACLC,QAAQ,EACRC,QAAQ,Q,0BAIZ,WACEvK,KAAKiE,UAAS,SAACtE,GAAD,MAAY,CACxB0K,KAAK,EACLC,QAAQ,EACRC,QAAQ,Q,0BAIZ,WACEvK,KAAKiE,UAAS,SAACtE,GAAD,MAAY,CACxB0K,KAAK,EACLC,QAAQ,EACRC,QAAQ,Q,4BAQZ,WACE,OACE,4BAEE/L,UAAWwB,KAAKL,MAAM0K,IAAM,iBAAmB,cAC/CnJ,KAAK,SACLL,QAASb,KAAKwK,WAEd,yBAAKhM,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,YACb,0BAAMA,UAAU,iBAAhB,mB,+BAQZ,WACE,OACE,4BAEEA,UAAWwB,KAAKL,MAAM2K,OAAS,iBAAmB,cAClDpJ,KAAK,SACLL,QAASb,KAAKyK,cAEd,yBAAKjM,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,YACb,0BAAMA,UAAU,iBAAhB,kB,+BAQZ,WACE,OACE,4BAEEA,UAAWwB,KAAKL,MAAM4K,OAAS,iBAAmB,cAClDrJ,KAAK,SACLL,QAASb,KAAK0K,cAEd,yBAAKlM,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,YACb,0BAAMA,UAAU,iBAAhB,WACK,S,sBAOjB,WACE,OACE,yBAAK0B,GAAG,YACN,yBAAKA,GAAG,eAAe1B,UAAU,kBAC9BwB,KAAK2K,kBAER,yBAAKzK,GAAG,kBAAkBF,KAAK4K,qBAC/B,yBAAK1K,GAAG,iBAAiBF,KAAK6K,wB,iCAKpC,WACE,OACE,yBAAK3K,GAAG,2BACLF,KAAKL,MAAM0K,IACV,kBAAC,EAAD,CACExK,eAAgBG,KAAKL,MAAME,eAC3BD,YAAaI,KAAKL,MAAMC,YACxByD,aAAcrD,KAAKL,MAAM0D,aACzBN,MAAO/C,KAAKL,MAAMoD,QAGpB,8BAED/C,KAAKL,MAAM2K,OACV,kBAAC,EAAD,CACEzK,eAAgBG,KAAKL,MAAME,eAC3BD,YAAaI,KAAKL,MAAMC,YACxByD,aAAcrD,KAAKL,MAAM0D,aACzBC,UAAWtD,KAAKL,MAAM0D,aAAaC,YAIrC,8BAEDtD,KAAKL,MAAM4K,OACV,kBAAC,EAAD,CACE1K,eAAgBG,KAAKL,MAAME,eAC3BD,YAAaI,KAAKL,MAAMC,YACxByD,aAAcrD,KAAKL,MAAM0D,aACzBI,gBAAiBzD,KAAKyD,gBACtBH,UAAWtD,KAAKL,MAAM0D,aAAaC,UACnCP,MAAO/C,KAAKL,MAAMoD,QAGpB,iC,0BAMR,WACE,OACE,yBAAK7C,GAAG,gBACN,4J,mCAQN,WACE,OACE,kBAAC,IAAMe,SAAP,KACE,yBAAKf,GAAG,kBACLF,KAAK+K,eACL/K,KAAK8K,WACL9K,KAAKgL,0B,iCAMd,WAEE,OACE,yBAAK9K,GAAG,uBACLF,KAAKL,MAAME,eACV,yBAAKK,GAAG,gBAAgBF,KAAKiL,yBAE7B,kBAAC,IAAD,CAAU1K,GAAG,c,oBAMrB,WACE,OACE,kBAAC,IAAMU,SAAP,KACE,yBAAKf,GAAG,uBAAuBF,KAAKkL,4B,GA5NC1K,aCZvCqC,EAAcD,E,8CAEpB,WAA2B8B,EAAO3B,GAAlC,qBAAAnB,EAAA,6DAEQuJ,EACJnI,oDAAkDoI,OAAO1G,EAAMR,KAC7DS,EAAcrC,KAAKsC,UAAUF,GAC7BG,EAAS,CACX,eAAgB,mBAChBC,OAAQ,mBACR7B,cAAe,UAAYF,GAR/B,SAW6BF,EACzBsI,EACA,QACAxG,EACAE,GAfJ,WAmB4B,KARpBwG,EAXR,QAmBiB5I,QACY,mCAAzB4I,EAAa1I,QApBjB,wBAsBIT,QAAQC,IAAI,2BAtBhB,mBAuBW,GAvBX,eAyBID,QAAQC,IAAI,yBAA0BkJ,GAzB1C,mBA0BW,GA1BX,6C,sBA8BeC,O,+CCfAC,GAlBE,SAAC,GAAmB,IAAjB/M,EAAgB,EAAhBA,UAClB,OACE,yBACEA,UAAWA,EACXC,MAAM,6BACNE,QAAQ,YACRD,KAAK,gBAEL,0BAAMM,EAAE,kFACR,0BACEM,SAAS,UACTN,EAAE,yFACFO,SAAS,cCLIiM,G,kDACnB,WAAY9L,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXE,eAAgBH,EAAMG,eACtB4L,KAAM/L,EAAME,YACZyD,aAAc3D,EAAM2D,aACpBN,MAAOrD,EAAMqD,MACb2I,eAAgB,GAChBC,iBAAkB,GAClBC,aAAa,EACbC,aAAc,GACdC,YAAa,GACbzD,SAAU,GACV0D,oBAAoB,EACpBpE,UAAU,EACVnE,cACE,sFACFiE,kBACE,6IAGJ,EAAKtC,0BAA4BA,EAEjC,EAAK2C,kBAAoB,EAAKA,kBAAkB/H,KAAvB,gBACzB,EAAKiM,SAAW,EAAKA,SAASjM,KAAd,gBAChB,EAAKkM,oBAAsB,EAAKA,oBAAoBlM,KAAzB,gBAC3B,EAAKmM,iBAAmB,EAAKA,iBAAiBnM,KAAtB,gBACxB,EAAKoM,gBAAkB,EAAKA,gBAAgBpM,KAArB,gBACvB,EAAKqM,kBAAoB,EAAKA,kBAAkBrM,KAAvB,gBACzB,EAAK0G,cAAgB,EAAKA,cAAc1G,KAAnB,gBACrB,EAAKsM,eAAiB,EAAKA,eAAetM,KAApB,gBACtB,EAAKuM,WAAa,EAAKA,WAAWvM,KAAhB,gBAClB,EAAKwM,gBAAkB,EAAKA,gBAAgBxM,KAArB,gBACvB,EAAKyM,WAAa,EAAKC,WAAW1M,KAAhB,gBAClB,EAAK2M,kBAAoB,EAAKA,kBAAkB3M,KAAvB,gBACzB,EAAK4M,sBAAwB,EAAKA,sBAAsB5M,KAA3B,gBAC7B,EAAK6M,UAAY,EAAKA,UAAU7M,KAAf,gBACjB,EAAK8M,iBAAmB,EAAKA,iBAAiB9M,KAAtB,gBArCP,E,4FA4CnB,4BAAA6B,EAAA,2DACMyG,EAAWrI,KAAKL,MAAM0I,gBAEGhE,IAAbgE,EAHlB,gCAI+BiD,GAAYjD,EAAUrI,KAAKL,MAAMoD,OAJhE,cAMM/C,KAAKiE,SAAS,CACZT,cACE,mEACFiE,kBAAmB,yBACnBE,UAAU,IAGZ3H,KAAKiE,SAAS,CACZT,cAAe,8CAdvB,gD,oFAoBA,SAAiB4D,GAEf,IAAIN,EAAQM,EAAEC,OAAOf,MAChBQ,GAAmB,KAAVA,QAA0BzC,IAAVyC,IAAiC,IAAVA,IACnDA,GAAQ,GAEV9G,KAAKiE,SAAS,CAAE4H,aAAc/E,M,6BAGhC,SAAgBgG,GAEd,IAAI/F,EAAO+F,EAAEzF,OAAOf,MACfS,GAAiB,KAATA,QAAwB1C,IAAT0C,IAA+B,IAATA,IAChDA,GAAO,GAET/G,KAAKiE,SAAS,CAAE6H,YAAa/E,M,+BAI/B,SAAkBK,GAChBA,EAAEjB,iBACF,IAAI4G,EAAgB/M,KAAKL,MAAMkM,aAC3BmB,EAAehN,KAAKL,MAAMmM,YAC9B9L,KAAKqM,eAAeU,EAAeC,K,2BAGrC,SAAclG,EAAOC,GACnB,OAAK/G,KAAKmF,0BAA0B2B,GAM/B9G,KAAKmF,0BAA0B4B,IAMpC/G,KAAKiE,SAAS,CACZT,cAAe,iBAEV,IARLxD,KAAKiE,SAAS,CACZT,cAAe,uDAEV,IATPxD,KAAKiE,SAAS,CACZT,cAAe,wDAEV,K,4BAcX,SAAeyJ,EAAeC,GAC5B,IAAwD,IAApDlN,KAAKyG,cAAcwG,EAAeC,GAAwB,CAC5D,IAAIxG,EAAUC,EAEVwG,EAAenN,KAAKL,MAAM0D,aAG5BsD,EADmB,KAAjBuG,QAAwC7I,IAAjB6I,EACflN,KAAKL,MAAM0D,aAAakF,MAAMvI,KAAKL,MAAM+L,gBAAgB3E,KAEzDmG,EAIVxG,EADoB,KAAlBuG,QAA0C5I,IAAlB4I,EACfjN,KAAKL,MAAM0D,aAAakF,MAAMvI,KAAKL,MAAM+L,gBACjD5E,MAEQmG,EAEbE,EAAa5E,MAAMvI,KAAKL,MAAM+L,gBAAkB,CAC9C5E,MAAOJ,EACPK,KAAMJ,GAGRzE,QAAQC,IAAI,0BAA2BgL,GAEvCnN,KAAKiE,UAAS,SAACtE,GAAD,MAAY,CACxB0I,SAAU8E,EACVvB,aAAa,EACbG,oBAAoB,WAGtB/L,KAAKiE,SAAS,CAAET,cAAe,oB,wBAInC,SAAW4D,GACT,IAAIgG,EAAehG,EAAEC,OAAOf,MAC5BtG,KAAKiE,UAAS,iBAAO,CACnByH,eAAgB0B,EAChBxB,aAAa,MAEf5L,KAAKiE,SAAS,CAAE0H,iBAAkByB,M,sBAOpC,WACE,OACE,yBAAK5O,UAAU,gBACb,yBAAKA,UAAU,qBACb,uBAAGA,UAAU,qBAAqBwB,KAAKL,MAAM6D,eAC7C,uBAAGhF,UAAU,oBAAoBwB,KAAKL,MAAM8H,uB,+BAMpD,WACE,OACE,4BACEjJ,UAAU,cACV0C,KAAK,SACLL,QAASb,KAAK8H,mBAEd,yBAAKtJ,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,YACb,0BAAMA,UAAU,iBAAhB,6B,wBAQZ,WACE,OACE,4BACEA,UAAU,cACV0C,KAAK,SACLL,QAASb,KAAKoM,mBAEd,yBAAK5N,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,GAAD,OAEF,yBAAKA,UAAU,YACb,0BAAMA,UAAU,iBAAhB,WACK,S,uBAOjB,WACE,OACE,0BAAM0B,GAAG,qBACP,uDAC4B,IAC1B,4BAAQ1B,UAAU,UACfwB,KAAKL,MAAM0D,aAAakF,MAAMvI,KAAKL,MAAM+L,gBAAgB5E,QAG9D,8CACkB,4BAAQtI,UAAU,YAAlB,UAElB,2BAAO0C,KAAK,OAAOuH,KAAK,WAAWC,SAAU1I,KAAKkM,mBAClD,sDAC2B,IACzB,4BAAQ1N,UAAU,UACfwB,KAAKL,MAAM0D,aAAakF,MAAMvI,KAAKL,MAAM+L,gBAAgB3E,OAG9D,8CACkB,4BAAQvI,UAAU,YAAlB,SAElB,2BAAO0C,KAAK,OAAOuH,KAAK,UAAUC,SAAU1I,KAAKmM,kBACjD,6BACCnM,KAAKyM,gB,sBAKZ,WACE,OACE,kBAAC,IAAMxL,SAAP,KACE,yBAAKf,GAAG,gBACLF,KAAK4M,YACL5M,KAAKgI,e,6BAMd,WACE,OACE,yBAAK9H,GAAG,eAAe1B,UAAU,oBAC/B,8K,iCAQN,WACE,OACE,kBAAC,IAAMyC,SAAP,KACE,uEACA,6BACE,4BAAQzC,UAAU,aAAakK,SAAU1I,KAAKsM,YAC5C,4BAAQhG,MAAM,KAAd,eACCtG,KAAKL,MAAM0D,aAAakF,MAAM7C,KAAI,SAACC,EAAG0H,GACrC,OACE,4BAAQC,IAAKD,EAAG/G,MAAO+G,GACpB1H,EAAEmB,MADL,MACenB,EAAEoB,c,8BAU/B,WACE,OACE,kBAAC,IAAM9F,SAAP,KACE,6BACE,qDACyB,IACvB,4BAAQzC,UAAU,YACfwB,KAAKL,MAAM0D,aAAaC,gB,mCAQrC,WACE,OACE,yBAAKpD,GAAG,qBACLF,KAAKL,MAAMoM,mBAAqB/L,KAAK0M,oBAAsB,iC,oBAKlE,WACE,OACE,yBAAKxM,GAAG,sBACN,uDACCF,KAAK6M,mBACL7M,KAAKiM,sBACLjM,KAAKL,MAAMoM,mBAAqB/L,KAAKuM,kBAAoB,8BACzDvM,KAAKL,MAAMiM,YAAc5L,KAAKgM,WAAa,8BAC3ChM,KAAK2M,wBACL3M,KAAKL,MAAMgI,SACV,kBAAC,IAAD,CACEpH,GAAG,sBACHV,eAAgBG,KAAKL,MAAME,iBAG7B,mC,GAhU+BW,aCHpB+M,G,kDACnB,WAAY7N,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXE,eAAgBH,EAAMG,eACtBD,YAAaF,EAAME,YACnByD,aAAc3D,EAAM2D,aACpBN,MAAOrD,EAAMqD,MACbyK,aAAa,GAGf,EAAKrD,gBAAkBA,EAVN,E,wDAiBnB,WACE,OACE,kBAAC,IAAMlJ,SAAP,KACE,yBAAKf,GAAG,wBACN,kBAAC,GAAD,CACEL,eAAgBG,KAAKL,MAAME,eAC3BD,YAAaI,KAAKL,MAAMC,YACxByD,aAAcrD,KAAKL,MAAM0D,aACzBN,MAAO/C,KAAKL,MAAMoD,Y,gCAO5B,WAEE,OACE,kBAAC,IAAM9B,SAAP,KACE,yBAAKf,GAAG,sBACLF,KAAKL,MAAME,eACV,yBAAKK,GAAG,gBAAgBF,KAAKyN,wBAE7B,kBAAC,IAAD,CAAUlN,GAAG,e,oBAOvB,WACE,OACE,kBAAC,IAAMU,SAAP,KACE,yBAAKf,GAAG,sBAAsBF,KAAK0N,2B,GAnDClN,aCHtCqC,GAAcD,E,8CAEpB,WAAyB+K,EAAOC,GAAhC,mBAAAhM,EAAA,6DACM+C,EAAcrC,KAAKsC,UAAU,CAC/BiJ,UAAWF,EACXG,SAAUF,IAHd,SAM+B/K,GAC3BG,yDACA,OACA2B,EACA,CACE,eAAgB,mBAChBG,OAAQ,qBAZd,cAMQiJ,EANR,QAeQxE,EAAOwE,KAES,IAATxE,GACXrH,QAAQC,IAAI,sCAlBhB,2BAqBWoH,GArBX,yCAuBIrH,QAAQC,IAAI,oBAAZ,MAvBJ,mBAwBW,GAxBX,2D,sBA4Be6L,O,+CCvBMC,G,kDACnB,WAAYvO,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAaF,EAAME,YACnBC,eAAgBH,EAAMG,eACtBqO,aAAc,KAGhB,EAAKF,UAAYA,GAAUjO,KAAV,gBAEjB,EAAKoO,WAAazO,EAAMyO,WAAWpO,KAAjB,gBAClB,EAAKqO,sBAAwB,EAAKA,sBAAsBrO,KAA3B,gBAE7B,EAAKsO,UAAY,EAAKA,UAAUtO,KAAf,gBACjB,EAAKuO,UAAY,EAAKA,UAAUvO,KAAf,gBACjB,EAAKwO,oBAAsB,EAAKA,oBAAoBxO,KAAzB,gBAI3B,EAAKiF,cAAgBA,EACrB,EAAKK,sBAAwBA,EAC7B,EAAKmJ,aAAe,EAAKA,aAAazO,KAAlB,gBArBH,E,uFA4BnB,WAAmB0O,EAAIb,GAAvB,eAAAhM,EAAA,sEAC0BoM,GAAUS,EAAIb,GADxC,QACQc,EADR,QAII1O,KAAKmO,WAAWO,GAEhBxM,QAAQC,IAAI,qCANhB,gD,0FAUA,SAAoBiF,EAAGuH,IACS,IAA1B3O,KAAKgF,cAAcoC,IACiB,IAAlCpH,KAAKqF,sBAAsBsJ,IAC7B3O,KAAKwO,aAAapH,EAAGuH,GAGvB3O,KAAKiE,SAAS,CAAEiK,aAAc,oC,mCAIlC,SAAsBhI,GACpBA,EAAMC,iBACNnG,KAAKuO,oBAAoBvO,KAAK6N,UAAUvH,MAAOtG,KAAK4O,QAAQtI,S,uBAO9D,WAAa,IAAD,OACV,OACE,yBAAKpG,GAAG,QACN,8BACE,yBAAK1B,UAAU,eACb,mDACA,6BACA,2BACE0C,KAAK,QACL2N,MAAM,wBACNlG,IAAK,SAACC,GAAD,OAAY,EAAKiF,UAAYjF,MAGtC,yBAAKpK,UAAU,eACb,iDACA,6BACA,2BACE0C,KAAK,WACL2N,MAAM,2BACNlG,IAAK,SAACC,GAAD,OAAY,EAAKgG,QAAUhG,MAGpC,4BACEpK,UAAU,oBACVqC,QAASb,KAAKoO,uBAFhB,iB,uBAWR,WACE,OACE,yBAAKlO,GAAG,gBACN,2CACCF,KAAKsO,YACN,yBAAKpO,GAAG,gBAAgBF,KAAKL,MAAMuO,iB,oBAKzC,WACE,OAAO,kBAAC,IAAMjN,SAAP,KAAiBjB,KAAKqO,iB,GAtGM7N,aCTjCqC,GAAcD,E,8CAGpB,WAA0BiL,EAAWC,EAAUzE,EAAWC,GAA1D,mBAAA1H,EAAA,6DACM+C,EAAcrC,KAAKsC,UAAU,CAC/BiJ,UAAWA,EACXC,SAAUA,EACVzE,UAAWA,EACXC,SAAUA,IALd,SAOgCzG,GAC5BG,0DACA,OACA2B,EACA,CACE,eAAgB,mBAChBG,OAAQ,qBAbd,OAOQgK,EAPR,OAgBQvF,EAAOuF,EACb5M,QAAQC,IAAI,sBAAuBoH,GAjBrC,4C,sBAoBewF,O,mDCbMC,G,kDACnB,WAAYtP,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAaF,EAAME,YACnBC,eAAgBH,EAAMG,eACtB0D,cAAc,EACd2K,aAAc,IAGhB,EAAKe,oBAAsBvP,EAAMuP,oBAEjC,EAAKV,oBAAsB,EAAKW,0BAA0BnP,KAA/B,gBAC3B,EAAKoP,uBAAyB,EAAKA,uBAAuBpP,KAA5B,gBAG9B,EAAKqP,WAAa,EAAKA,WAAWrP,KAAhB,gBAClB,EAAKsP,WAAa,EAAKA,WAAWtP,KAAhB,gBAElB,EAAKgP,WAAaA,GAAWhP,KAAX,gBAGlB,EAAKiF,cAAgBA,EACrB,EAAKK,sBAAwBA,EAtBZ,E,mDAyBnB,SAAgBwI,EAAWe,EAASU,EAAeC,GACjD,IAAIC,EACJ,IACEA,EAAgBxP,KAAK+O,WACnBlB,EACAe,EACAU,EACAC,GAEF,SAEA,OADArN,QAAQC,IAAI,6BACL,EAETD,QAAQC,IAAI,MAAOqN,IACU,IAAzBA,EAAc/M,QAAqB+M,GAGrCxP,KAAKiP,qBAAoB,GACzBjP,KAAKiE,SAAS,CAAEV,cAAc,KAH9BvD,KAAKiE,SAAS,CAAEiK,aAAc,gC,uCAOlC,SAA0BL,EAAW4B,GAGnC,OAAsC,IAAlCzP,KAAKgF,cAAc6I,IAOrB3L,QAAQC,IAAI,kBACL,IAP0C,IAA7CnC,KAAKqF,sBAAsBoK,SAA/B,I,oCAWJ,SAAuBvJ,GACrBA,EAAMC,iBACN,IAAMuJ,EAAc,CAClBC,gBAAiB3P,KAAK6N,UAAUvH,MAChCsJ,cAAe5P,KAAK4O,QAAQtI,MAC5BuJ,oBAAqB7P,KAAKqJ,UAAU/C,MACpCwJ,mBAAoB9P,KAAKsJ,SAAShD,OAEpCpE,QAAQC,IACN,aACAuN,EAAYC,gBACZD,EAAYE,cACZF,EAAYG,oBACZH,EAAYI,qBAMN,IAHN9P,KAAKkP,0BACHQ,EAAYC,gBACZD,EAAYE,gBAGd1N,QAAQC,IAAI,gCACZnC,KAAK+P,gBACHL,EAAYC,gBACZD,EAAYE,cACZF,EAAYG,oBACZH,EAAYI,qBAGd5N,QAAQC,IACN,qBACAuN,EAAYC,gBACZD,EAAYE,cACZF,EAAYG,oBACZH,EAAYI,sB,0BAKlB,WACE,OAAO,kBAAC,IAAD,CAAUvP,GAAG,a,wBAOtB,WAAc,IAAD,OACX,OACE,8BACE,yBAAK/B,UAAU,eACb,8CACA,6BACA,2BACE0C,KAAK,QACL2N,MAAM,wBACNlG,IAAK,SAACC,GAAD,OAAY,EAAKiF,UAAYjF,MAGtC,yBAAKpK,UAAU,eACb,iDACA,6BACA,2BACE0C,KAAK,WACL2N,MAAM,2BACNlG,IAAK,SAACC,GAAD,OAAY,EAAKgG,QAAUhG,MAGpC,yBAAKpK,UAAU,eACb,wDACA,6BACA,2BACE0C,KAAK,QACL2N,MAAM,uBACNlG,IAAK,SAACC,GAAD,OAAY,EAAKS,UAAYT,MAGtC,yBAAKpK,UAAU,eACb,uDACA,6BACA,2BACE0C,KAAK,QACL2N,MAAM,uBACNlG,IAAK,SAACC,GAAD,OAAY,EAAKU,SAAWV,MAGrC,4BACEpK,UAAU,oBACVqC,QAASb,KAAKmP,wBAFhB,YAMA,2BAAInP,KAAKL,MAAMuO,iB,wBAKrB,WACE,OACE,yBAAKhO,GAAG,cACN,4CACCF,KAAKoP,aACLpP,KAAKL,MAAM4D,aAAevD,KAAKuD,eAAiB,iC,oBAKvD,WACE,OAAO,kBAAC,IAAMtC,SAAP,KAAiBjB,KAAKqP,kB,GA3KO7O,aCFnBwP,I,wDACnB,WAAYtQ,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAaF,EAAME,YACnBC,eAAgBH,EAAMG,eACtBoQ,oBAAoB,GAItB,EAAK9B,WAAazO,EAAMyO,WAAWpO,KAAjB,gBAClB,EAAKkO,UAAYA,GAAUlO,KAAV,gBAEjB,EAAKkP,oBAAsB,EAAKA,oBAAoBlP,KAAzB,gBAC3B,EAAKmQ,qBAAuB,EAAKA,qBAAqBnQ,KAA1B,gBAC5B,EAAKoQ,gBAAkB,EAAKA,gBAAgBpQ,KAArB,gBAdN,E,uDAqBnB,WACEC,KAAKiE,UAAS,SAACtE,GAAD,MAAY,CACxBsQ,oBAAqBtQ,EAAMsQ,yB,kCAQ/B,WACE,OACE,yBAAK/P,GAAG,uBACN,yBAAKA,GAAG,mBACN,wBAAI1B,UAAU,SAAd,oBAEE,8BACE,kBAAC,EAAD,CAAUA,UAAU,gBAI1B,yBAAK0B,GAAG,2BACN,4BACEgB,KAAK,SACL1C,UAAU,oBACVqC,QAASb,KAAKiP,qBAEbjP,KAAKL,MAAMsQ,mBACV,8CAEA,+CAGHjQ,KAAKL,MAAMsQ,mBACV,kBAAC,GAAD,CACExE,KAAMzL,KAAKL,MAAMC,YACjByD,aAAcrD,KAAKL,MAAM0D,aACzB8K,WAAYnO,KAAKmO,aAGnB,kBAAC,GAAD,CACE1C,KAAMzL,KAAKL,MAAMC,YACjByD,aAAcrD,KAAKL,MAAM0D,aACzB+M,WAAYpQ,KAAKoQ,WACjBnB,oBAAqBjP,KAAKiP,0B,6BAQtC,WAEE,OACE,yBAAK/O,GAAG,wBACLF,KAAKL,MAAME,eACRG,KAAKL,MAAME,eACXG,KAAKkQ,0B,oBAKf,WACE,OAAO,kBAAC,IAAMjP,SAAP,KAAiBjB,KAAKmQ,uB,GAtFQ3P,cCLpB6P,G,kDACnB,WAAY3Q,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAaF,EAAME,YACnByD,aAAc3D,EAAM2D,cAJL,E,oDAQnB,WACE,OAAIrD,KAAKL,MAAM0D,aAAaC,UAExB,yBAAKpD,GAAG,qBACLF,KAAKL,MAAM0D,aAAakF,MAAM7C,KAAI,SAAC4K,EAAGC,GACrC,OACE,yBAAK/R,UAAU,WAAW8O,IAAKiD,GAC7B,wBAAI/R,UAAU,gBAAgB8H,MAAOgK,EAAExJ,OACrC,yBAAKtI,UAAU,iBACb,yBAAKA,UAAU,uBAAuB8R,EAAExJ,QAE1C,yBAAKtI,UAAU,gBACb,yBAAKA,UAAU,uBAAuB8R,EAAEvJ,YAMlD,+BAKF,6BACE,8J,oBASR,WACE,OAAO,kBAAC,IAAM9F,SAAP,KAAiBjB,KAAK6M,wB,GA3CMrM,aCElBgQ,G,kDACnB,WAAY9Q,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXE,eAAgBH,EAAMG,eACtBwD,aAAc3D,EAAM2D,aACpBzD,YAAaF,EAAME,YACnB6Q,cAAe,GACfC,gBAAiB,GACjBC,cAAc,EACdhJ,UAAU,EACVnE,cAAe,mCAGjB,EAAKC,gBAAkB/D,EAAM+D,gBAG7B,EAAKmN,cAAgB,EAAKA,cAAc7Q,KAAnB,gBACrB,EAAK8Q,eAAiB,EAAKA,eAAe9Q,KAApB,gBAEtB,EAAK+Q,gBAAkB,EAAKA,gBAAgB/Q,KAArB,gBACvB,EAAKgR,gBAAkB,EAAKA,gBAAgBhR,KAArB,gBACvB,EAAKoI,eAAiB,EAAKA,eAAepI,KAApB,gBAGtB,EAAKiR,mBAAqB,EAAKA,mBAAmBjR,KAAxB,gBAC1B,EAAKkR,cAAgB,EAAKA,cAAclR,KAAnB,gBACrB,EAAKmR,gBAAkB,EAAKA,gBAAgBnR,KAArB,gBA1BN,E,mDA6BnB,SAAgBoR,GACd,IAAIC,EAAepR,KAAKL,MAAMC,YAAYmE,WAC1C,IAAK,IAAIsN,KAAKD,EAEZ,GAAID,IAAeC,EAAaC,GAAGjN,SACjC,OAAOgN,EAAaC,GAAGC,a,4BAK7B,SAAelK,GACb,IAAIiB,EAAWjB,EAAEC,OAAOf,MACpBC,EAAevG,KAAK8Q,gBAAgBzI,GAExCrI,KAAKiE,SAAS,CACZwM,cAAepI,EACfqI,gBAAiBnK,EACjBoK,cAAc,EACdnN,cACE,0F,2BAIN,WACE,OACE,4BAAQhF,UAAU,aAAakK,SAAU1I,KAAK6Q,gBAC5C,4BAAQvK,MAAM,KAAd,oBACCtG,KAAKL,MAAMC,YAAYmE,WAAW2B,KAAI,SAAC6L,GACtC,OACE,4BAAQjE,IAAKiE,EAAED,WAAYhL,MAAOiL,EAAEnN,UACjCmN,EAAED,kB,4BAQf,WACE,GAAItR,KAAKL,MAAMgI,SACb,OACE,kBAAC,IAAD,CACEpH,GAAG,sBACHV,eAAgBG,KAAKL,MAAME,mB,6BAMnC,WACEG,KAAKiE,SAAS,CAAE0D,UAAU,IAC1B3H,KAAKyD,gBAAgBzD,KAAKL,MAAM8Q,iB,oCAOlC,WACE,OACE,yBAAKjS,UAAU,YACb,2BAAIwB,KAAKL,MAAM6D,kB,gCAKrB,WACE,OACE,6BACE,2CAAiBxD,KAAKL,MAAM+Q,iBAC3B1Q,KAAKmI,iBACN,4BACE3J,UAAU,oBACV0C,KAAK,SACLL,QAASb,KAAK+Q,iBAHhB,qB,2BAWN,WACE,OACE,yBAAK7Q,GAAG,kBACN,wEAC4C,IAC1C,4BAAQ1B,UAAU,wBACfwB,KAAKL,MAAM0D,aAAaC,UACxB,OAGL,kEACCtD,KAAK4Q,mB,6BAKZ,WACE,OACE,yBAAK1Q,GAAG,gBACLF,KAAKL,MAAMgR,aAAe3Q,KAAKwR,qBAAuB,gC,gCAK7D,WACE,OACE,6BACGxR,KAAKL,MAAMgR,aACR3Q,KAAKkR,kBACLlR,KAAKiR,gBACRjR,KAAKyR,4B,gCAKZ,WACE,OACE,yBAAKvR,GAAG,eACLF,KAAKL,MAAME,eACV,yBAAKK,GAAG,gBAAgBF,KAAKgR,sBAE7B,kBAAC,IAAD,CAAUzQ,GAAG,S,oBAMrB,WACE,OAAO,kBAAC,IAAMU,SAAP,KAAiBjB,KAAK0R,0B,GAhKWlR,aCe7BmR,GAnBI,SAAC,GAAmB,IAAjBnT,EAAgB,EAAhBA,UACpB,OACE,yBACEA,UAAWA,EACXC,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRC,OAAO,gBAEP,0BACEC,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,6JCYK4S,GAzBA,SAAC,GAAmB,IAAjBpT,EAAgB,EAAhBA,UAChB,OACE,yBACEA,UAAWA,EACXC,MAAM,6BACNC,KAAK,OACLC,QAAQ,cACRC,OAAO,gBAEP,0BACEC,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,qCAEJ,0BACEH,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,8HCRW6S,G,kDACnB,WAAYnS,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAaF,EAAME,YACnBC,eAAgBH,EAAMG,eACtBkE,WAAYrE,EAAMqE,WAClBV,aAAc3D,EAAM2D,aACpByO,cAAc,EACdC,QAAQ,GAGV,EAAK5H,gBAAkBA,EACvB,EAAKkG,UAAYA,GACjB,EAAK2B,eAAiBxB,GAEtB,EAAK/M,gBAAkB/D,EAAM+D,gBAE7B,EAAKwO,kBAAoB,EAAKA,kBAAkBlS,KAAvB,gBACzB,EAAKmS,mBAAqB,EAAKA,mBAAmBnS,KAAxB,gBAC1B,EAAKoS,iBAAmB,EAAKA,iBAAiBpS,KAAtB,gBACxB,EAAKqS,2BAA6B,EAAKA,2BAA2BrS,KAAhC,gBAGlC,EAAKsS,iBAAmB,EAAKA,iBAAiBtS,KAAtB,gBAvBP,E,oDA8BnB,WACEC,KAAKiE,UAAS,SAACtE,GAAD,MAAY,CACxBmS,cAAenS,EAAMmS,mB,wCAQzB,WACE,OACE,4BACEtT,UAAU,cACV0C,KAAK,SACLL,QAASb,KAAKmS,kBAEd,yBAAK3T,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,GAAD,OAEF,yBAAKA,UAAU,YACb,0BAAMA,UAAU,iBAAhB,sB,6BAQZ,WACE,OACE,4BACEA,UAAU,cACV0C,KAAK,SACLL,QAASb,KAAKmS,kBAEd,yBAAK3T,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,GAAD,OAEF,yBAAKA,UAAU,YACb,0BAAMA,UAAU,iBAAhB,oB,+BAQZ,WACE,OACE,yBAAK0B,GAAG,cACLF,KAAKL,MAAMmS,aACV,6BAAM9R,KAAKoS,8BAEX,6BAAMpS,KAAKsS,sB,gCAMnB,WACE,OACE,kBAAC,IAAMrR,SAAP,KACE,yBAAKf,GAAG,sBACN,yBAAKA,GAAG,cACN,yBAAKA,GAAG,iBACN,kCAAQF,KAAKL,MAAMC,YAAYyJ,UAA/B,mBACA,6BACA,mDACwB,IACtB,0BAAM7K,UAAU,aACbwB,KAAKL,MAAM0D,aAAaC,YAG7B,gGATF,aAeCtD,KAAKiS,qBAER,yBAAKzT,UAAU,gBACZwB,KAAKL,MAAMmS,aACV,kBAAC,GAAD,CACEjS,eAAgBG,KAAKL,MAAME,eAC3BD,YAAaI,KAAKL,MAAMC,YACxByD,aAAcrD,KAAKL,MAAM0D,eAG3B,kBAAC,GAAD,CACExD,eAAgBG,KAAKL,MAAME,eAC3BwD,aAAcrD,KAAKL,MAAM0D,aACzBzD,YAAaI,KAAKL,MAAMC,YACxB6D,gBAAiBzD,KAAKyD,uB,8BASpC,WAEE,OACE,yBAAKvD,GAAG,oBACLF,KAAKL,MAAME,eACV,yBAAKK,GAAG,gBAAgBF,KAAKkS,sBAE7B,6BACE,kBAAC,IAAD,CAAU3R,GAAG,U,oBAQvB,WACE,OAAO,kBAAC,IAAMU,SAAP,KAAiBjB,KAAKqS,wB,GA3JS7R,aCP3B+R,GAJA,WACb,OAAO,yBAAK/T,UAAU,YC6FTgU,G,kDA1Fb,WAAY9S,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXE,eAAgBH,EAAMG,eACtB4S,YAAY,EACZvE,aAAc,IAEhB,EAAKwE,YAAc,EAAKA,YAAY3S,KAAjB,gBACnB,EAAK4S,UAAY,EAAKA,UAAU5S,KAAf,gBACjB,EAAK6S,yBAA2B,EAAKA,yBAAyB7S,KAA9B,gBAChC,EAAK8S,uBAAyB,EAAKA,uBAAuB9S,KAA5B,gBAVb,E,+CAanB,WACE,OACE,yBAAKG,GAAG,eACN,kDACA,yBAAKA,GAAG,WACN,kBAAC,GAAD,U,uBAMR,WACE,OACE,yBAAKA,GAAG,aACN,yBAAKA,GAAG,mBACN,yBAAKA,GAAG,WACN,oFAEA,8CAEF,yBAAKA,GAAG,aACN,yCAEE,kBAAC,IAAD,CAASK,GAAG,aACV,4BAAQ/B,UAAU,aAAlB,WAHJ,2BAK2B,IACzB,kBAAC,IAAD,CAAS+B,GAAG,YACV,4BAAQ/B,UAAU,aAAlB,WACS,IARb,QAYF,yBAAK0B,GAAG,QACN,8IAIA,mE,+BAOV,WAAqB,IAAD,OAClB4S,YAAW,WACT,EAAK7O,SAAS,CAAEwO,YAAY,MAC3B,O,sCAGL,WACE,OACE,yBAAKvS,GAAG,eACLF,KAAKL,MAAM8S,WAAazS,KAAK0S,cAAgB1S,KAAK2S,e,oCAKzD,WAEE,OACE,yBAAKzS,GAAG,eACLF,KAAKL,MAAME,eACV,yBAAKK,GAAG,gBAAgBF,KAAK4S,4BAE7B,kBAAC,IAAD,CAAUrS,GAAG,S,oBAMrB,WACE,OAAO,kBAAC,IAAMU,SAAP,KAAiBjB,KAAK6S,8B,GAvFArS,a,SCgBlBuS,GAnBA,SAAC,GAAmB,IAAjBvU,EAAgB,EAAhBA,UAChB,OACE,yBACEA,UAAWA,EACXC,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRC,OAAO,gBAEP,0BACEC,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,8JCMKgU,GAnBD,SAAC,GAAmB,IAAjBxU,EAAgB,EAAhBA,UACf,OACE,yBACEA,UAAWA,EACXC,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRC,OAAO,gBAEP,0BACEC,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,2MCTWgU,G,kDACnB,WAAYtT,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXsT,MAAOvT,EAAMuT,MACbC,MAAOxT,EAAMwT,MACbC,cAAezT,EAAMyT,cACrBC,QAAS1T,EAAMuT,MAAQvT,EAAMwT,MAC7BG,YAAc3T,EAAMuT,OAASvT,EAAMuT,MAAQvT,EAAMwT,OAAU,KAAKI,QAC9D,IAGJ,EAAKC,UAAY7T,EAAM6T,UACvB,EAAKC,QAAU,EAAKA,QAAQzT,KAAb,gBACf,EAAK0T,WAAa,EAAKA,WAAW1T,KAAhB,gBAElB,EAAK2T,cAAgB,EAAKA,cAAc3T,KAAnB,gBACrB,EAAK4T,gBAAkB,EAAKA,gBAAgB5T,KAArB,gBACvB,EAAK6T,kBAAoB,EAAKA,kBAAkB7T,KAAvB,gBACzB,EAAK8T,YAAc,EAAKA,YAAY9T,KAAjB,gBAlBF,E,2CAyBnB,SAAQmG,GACNA,EAAMC,iBAGNnG,KAAKuT,c,wBAgBP,WAaE,OAXArR,QAAQC,IAAI,WAAYnC,KAAKL,MAAMwT,eAC/BnT,KAAKL,MAAMwT,eAAiB,GAE5B,sEACOnT,KAAKL,MAAMwT,eAAiB,GAEnC,0GAGA,yE,6BASN,WACE,OACE,4BAAQ3U,UAAU,cAAc0C,KAAK,SAASL,QAASb,KAAKwT,SAC1D,yBAAKhV,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,GAAD,CAAWA,UAAU,iBAEvB,yBAAKA,UAAU,YACb,0BAAMA,UAAU,iBAAhB,oBACK,S,+BAOjB,WACE,OACE,yBAAK0B,GAAG,qBACN,0CACA,kFAEE,4BAAQ1B,UAAU,aAAlB,IAAgCwB,KAAKL,MAAMwT,cAA3C,KAFF,UAKA,yCAAenT,KAAKyT,cACpB,yCACc,IACZ,4BAAQjV,UAAU,aAAlB,IAAgCwB,KAAKL,MAAMyT,SAF7C,mBAIE,4BAAQ5U,UAAU,aAAlB,IAAgCwB,KAAKL,MAAMuT,MAA3C,KAJF,gBAOA,yBAAKhT,GAAG,cAAR,qBACqB,IACnB,4BAAQ1B,UAAU,aAAlB,IAAgCwB,KAAKL,MAAM0T,WAA3C,MAFF,yBAIE,iC,uBAWR,WACE,OACE,kBAAC,IAAMpS,SAAP,KACE,6BACGjB,KAAK2T,kBACL3T,KAAK4T,wB,2BAMd,WACE,OACE,4BAAQpV,UAAU,cAAc0C,KAAK,SAASL,QAASb,KAAKwT,SAC1D,yBAAKhV,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,GAAD,CAAYA,UAAU,iBAExB,yBAAKA,UAAU,YACb,0BAAMA,UAAU,iBAAhB,qB,4BAQZ,WACE,OACE,yBAAK0B,GAAG,iBACLF,KAAK0T,gBACN,wBAAIxT,GAAG,mBAAP,yC,yBAON,WACE,OACE,yBAAKA,GAAG,gBACN,yBAAKA,GAAG,aAAaF,KAAK8T,aAC1B,yBAAK5T,GAAG,aAAaF,KAAK+T,qB,oBAKhC,WACE,OAAO,kBAAC,IAAM9S,SAAP,KAAiBjB,KAAK6T,mB,GApKErT,aCJdwT,G,4JACnB,WACE,OACE,kBAAC,IAAM/S,SAAP,KACE,yBAAKzC,UAAU,aACb,yBAAK0B,GAAG,gBAAR,iBACiB,IACf,yBAAK1B,UAAU,gBAAgBwB,KAAKN,MAAMuU,cAF5C,iBAGiB,IACf,yBAAKzV,UAAU,gBAAgBwB,KAAKN,MAAMwU,qB,GATnB1T,aCmBpB2T,GAnBD,SAAC,GAAmB,IAAjB3V,EAAgB,EAAhBA,UACf,OACE,yBACEA,UAAWA,EACXC,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRC,OAAO,gBAEP,0BACEC,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,kHCMKoV,GAnBD,SAAC,GAAmB,IAAjB5V,EAAgB,EAAhBA,UACf,OACE,yBACEA,UAAWA,EACXC,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRC,OAAO,gBAEP,0BACEC,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,2BCDWqV,G,kDACnB,WAAY3U,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXE,eAAgBH,EAAMG,eACtBwD,aAAc3D,EAAM2D,aACpBkF,MAAO7I,EAAM6I,MACb+L,QAAS,EACTC,MAAM,EACNtB,MAAO,EACPC,MAAO,EACPC,cAAezT,EAAM6I,MAAMvE,OAC3BwQ,aAAa,GAGf,EAAKrK,gBAAkBA,EACvB,EAAK6I,MAAQA,GACb,EAAKgB,MAAQA,GAIb,EAAKS,SAAW,EAAKA,SAAS1U,KAAd,gBAChB,EAAK2U,UAAY,EAAKA,UAAU3U,KAAf,gBACjB,EAAK4U,WAAa,EAAKA,WAAW5U,KAAhB,gBAClB,EAAK6U,eAAiB,EAAKA,eAAe7U,KAApB,gBACtB,EAAK8U,WAAa,EAAKA,WAAW9U,KAAhB,gBAGlB,EAAKwT,UAAY,EAAKA,UAAUxT,KAAf,gBAEjB,EAAK+U,YAAc,EAAKA,YAAY/U,KAAjB,gBACnB,EAAKgV,eAAiB,EAAKA,eAAehV,KAApB,gBACtB,EAAKiV,eAAiB,EAAKA,eAAejV,KAApB,gBACtB,EAAKkV,eAAiB,EAAKA,eAAelV,KAApB,gBACtB,EAAKmV,kBAAoB,EAAKA,kBAAkBnV,KAAvB,gBACzB,EAAKoV,kBAAoB,EAAKA,kBAAkBpV,KAAvB,gBACzB,EAAKqV,YAAc,EAAKA,YAAYrV,KAAjB,gBACnB,EAAKsV,SAAW,EAAKA,SAAStV,KAAd,gBAChB,EAAKuV,cAAgB,EAAKA,cAAcvV,KAAnB,gBACrB,EAAKwV,YAAc,EAAKA,YAAYxV,KAAjB,gBACnB,EAAKiI,SAAW,EAAKA,SAASjI,KAAd,gBAvCC,E,6CA2CnB,WACEC,KAAKiE,SAAS,CACZpE,eAAgBG,KAAKN,MAAMG,eAC3BwD,aAAcrD,KAAKN,MAAM2D,aACzBkF,MAAOvI,KAAKN,MAAM2D,aAAakF,MAC/B+L,QAAS,EACTC,MAAM,EACNtB,MAAO,EACPC,MAAO,EACPC,cAAenT,KAAKN,MAAM2D,aAAakF,MAAMvE,OAC7CwQ,aAAa,M,4BASjB,WAGE,IAAMgB,EAAaxV,KAAKL,MAAM4I,MAAMkN,QACpCD,EAAWE,OAAO1V,KAAKL,MAAM2U,QAAS,GACtCtU,KAAKiE,UAAS,iBAAO,CACnBsE,MAAOiN,MAETxV,KAAKmV,sB,4BAKP,WAAkB,IAAD,OACfnV,KAAKiE,UAAS,iBAAO,CACnBsQ,MAAM,EACNtB,MAAO,EAAKtT,MAAMsT,MAAQ,MAIxBjT,KAAKkV,kBAAkBlV,KAAKL,OAC9BK,KAAK+U,eAAe/U,KAAKL,OAGzBK,KAAKiE,SAAS,CACZuQ,aAAa,M,4BAMnB,WAAkB,IAAD,OACfxU,KAAKiE,UAAS,iBAAO,CACnBsQ,MAAM,EACNrB,MAAO,EAAKvT,MAAMuT,MAAQ,MAExBlT,KAAKkV,kBAAkBlV,KAAKL,QAC9BK,KAAKmV,sB,+BAMT,WAEE,OAAgC,IAA5BnV,KAAKL,MAAM4I,MAAMvE,SACnBhE,KAAKiE,UAAS,iBAAO,CAAEuQ,aAAa,OAC7B,K,+BAOX,WAGE,IAAImB,EAAO3V,KAAKL,MAAM2U,QAAU,EAC5BqB,GAAQ3V,KAAKL,MAAM4I,MAAMvE,OAAS,IACpC2R,EAAO,GAET3V,KAAKiE,UAAS,iBAAO,CACnBqQ,QAASqB,Q,yBAQb,WACE3V,KAAKiE,UAAS,SAACtE,GAAD,MAAY,CACxB4U,MAAO5U,EAAM4U,W,sBAQjB,WACE,OACE,yBAAKrU,GAAG,eAAe1B,UAAU,YAC/B,wI,sBAQN,WACE,OACE,yBAAK0B,GAAG,YACN,kBAAC,KAAO0V,IAAR,CAEEpX,UAAU,YAETwB,KAAKL,MAAM4U,KACV,kBAAC,KAAD,KACE,kBAAC,KAAOqB,IAAR,CAAYC,WAAY,CAAEC,MAAO,MAAQ5V,GAAG,aACzCF,KAAKL,MAAM4I,MAAMvI,KAAKL,MAAM2U,SAASxN,QAI1C,kBAAC,KAAO8O,IAAR,CACEC,WAAY,CAAEC,MAAO,MACrBC,QAAS,CAAEC,QAAS,KACpBC,WAAY,CAAEC,KAAM,YAAaC,SAAU,IAC3CjW,GAAG,YAEFF,KAAKL,MAAM4I,MAAMvI,KAAKL,MAAM2U,SAASvN,U,wBAQlD,WACE,OACE,4BAAQvI,UAAU,cAAc0C,KAAK,SAASL,QAASb,KAAK8U,aAC1D,yBAAKtW,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,GAAD,OAEF,yBAAKA,UAAU,YACb,0BAAMA,UAAU,iBAAhB,SACK,S,+BAOjB,WAAqB,IAAD,OAClB,OACE,yBAAK0B,GAAG,6BACN,4BACE1B,UAAU,cACV0C,KAAK,SACLL,QAAS,kBAAM,EAAKmU,eAAe,EAAKrV,SAExC,yBAAKnB,UAAU,iBACb,yBAAKA,UAAU,YAAYqC,QAASb,KAAK8U,aACvC,yBAAKtW,UAAU,aACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,YACb,0BAAMA,UAAU,iBAAhB,gB,+BASd,WAAqB,IAAD,OAClB,OACE,4BACEA,UAAU,cACV0C,KAAK,SACLL,QAAS,kBAAM,EAAKoU,eAAe,EAAKtV,SAExC,yBAAKnB,UAAU,iBACb,yBAAKA,UAAU,YAAYqC,QAASb,KAAK8U,aACvC,yBAAKtW,UAAU,aACb,kBAAC,GAAD,OAEF,yBAAKA,UAAU,YACb,0BAAMA,UAAU,iBAAhB,e,4BASZ,WAEE,IAAKwB,KAAKL,MAAM4U,KACd,OACE,kBAAC,IAAMtT,SAAP,KACE,yBAAKf,GAAG,kBACLF,KAAKoW,oBACLpW,KAAKqW,wB,wBAMhB,WACE,OACE,yBAAKnW,GAAG,eACN,yBAAKA,GAAG,cAAcF,KAAK6U,cAC3B,yBAAK3U,GAAG,kBAAkBF,KAAK4U,qB,uBAKrC,WACE,GAC8B,IAA5B5U,KAAKL,MAAM4I,MAAMvE,QACO,IAAvBhE,KAAKL,MAAM2U,SAA6C,IAA5BtU,KAAKL,MAAM4I,MAAMvE,OAE9C,OACE,kBAAC,IAAM/C,SAAP,KACE,yBAAKzC,UAAU,aACb,yBAAK0B,GAAG,eAAR,eAEE,yBAAK1B,UAAU,gBACb,2BACGwB,KAAKL,MAAM2U,QAAU,EADxB,IAC4BtU,KAAKL,MAAM4I,MAAMvE,UAIjD,iC,6BAOV,WACE,OACE,yBAAK9D,GAAG,mBACLF,KAAK2U,aACN,yBAAKzU,GAAG,QAAQF,KAAKgI,YACrB,yBAAK9H,GAAG,iBACN,kBAAC,GAAD,CACE+T,aAAcjU,KAAKL,MAAMsT,MACzBiB,aAAclU,KAAKL,MAAMuT,QAE3B,yBAAKhT,GAAG,aAAR,IAAsBF,KAAK0U,YAA3B,KACA,6BACA,yBAAKxU,GAAG,oBACN,iDACA,4BAAQ1B,UAAU,wBACfwB,KAAKL,MAAM0D,aAAaC,gB,sBAQrC,WACE,IACE,OAAgC,IAA5BtD,KAAKL,MAAM4I,MAAMvE,QAAgBhE,KAAKL,MAAM6U,YAG5C,kBAAC,GAAD,CACEvB,MAAOjT,KAAKL,MAAMsT,MAClBC,MAAOlT,KAAKL,MAAMuT,MAClBC,cAAenT,KAAKL,MAAMwT,cAC1BI,UAAWvT,KAAKuT,YAIbvT,KAAKqV,WAEd,MAAOiB,GACPpU,QAAQC,IAAI,qBAAsBmU,M,yBAItC,WACE,IACE,OAAgC,IAA5BtW,KAAKL,MAAM4I,MAAMvE,QAAgBhE,KAAKL,MAAM6U,YAEvC,8BAEAxU,KAAKuW,kBAEd,MAAOD,GACPpU,QAAQC,IAAI,qBAAsBmU,M,2BAItC,WACE,OACE,yBAAKpW,GAAG,iBACLF,KAAKyU,WACLzU,KAAKoV,iB,yBAKZ,WAEE,OACE,yBAAKlV,GAAG,eACLF,KAAKL,MAAME,eACV,yBAAKK,GAAG,gBAAgBF,KAAKsV,iBAE7B,kBAAC,IAAD,CAAU/U,GAAG,S,oBAMrB,WACE,OAAO,kBAAC,IAAMU,SAAP,KAAiBjB,KAAKuV,mB,GAhXIiB,IAAMhW,WCXrCqC,GAAcD,E,8CAEpB,WAAkCE,EAASC,GAA3C,mBAAAnB,EAAA,6DAEMD,EAAMqB,oDAAkDoI,OAAOtI,GAC/D+B,EAAS,CAAE5B,cAAe,UAAYF,GAH5C,SAI6BF,GAAYlB,EAAK,MAAO,KAAMkD,GAJ3D,WAIQwG,EAJR,cAKwChH,IAAjBgH,EALvB,0CAMW,GANX,gCAQWA,GARX,6C,sBAYeoL,O,+CCaMC,G,kDACnB,aAAe,IAAD,8BACZ,gBACK/W,MAAQ,CACXE,gBAAgB,EAChBD,YAAa,GACbyD,aAAc,GACdN,MAAO,GACPS,cAAe,6CAKjB,EAAKiT,mBAAqBA,GAG1B,EAAKhT,gBAAkB,EAAKA,gBAAgB1D,KAArB,gBACvB,EAAKoO,WAAa,EAAKA,WAAWpO,KAAhB,gBAClB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBAEnB,EAAK4W,cAAgB,EAAKA,cAAc5W,KAAnB,gBACrB,EAAK6W,aAAe,EAAKA,aAAa7W,KAAlB,gBACpB,EAAK8W,oBAAsB,EAAKA,oBAAoB9W,KAAzB,gBAE3B,EAAK+W,QAAU,EAAKA,QAAQ/W,KAAb,gBAvBH,E,0FA+Bd,WAAsB+C,GAAtB,sBAAAlB,EAAA,sEAI0B6U,GAAmB3T,EAAS9C,KAAKL,MAAMoD,OAC5DoB,MAAK,SAAC4S,GACL,EAAK9S,SAAS,CAAEZ,aAAc0T,OAE/B5S,MAAK,WACJ,EAAKF,SAAS,CACZpE,iBAAkB,EAAKF,MAAMC,YAAYmD,WAG5CuB,OAAM,SAACC,GACNrC,QAAQC,IAAI,qCAAsCoC,GAClD,EAAKN,SAAS,CACZT,cAAe,mDAhBvB,UAIEuT,EAJF,8BAoBIA,GAAkB,EApBtB,kBAqBWA,GArBX,gD,+EAyBA,SAAWC,GACT,IAAIC,EAAUD,EAASjT,WAAW,GAAGK,SAC/B8S,EAAaF,EAASjU,MAC5B/C,KAAKiE,SAAS,CACZrE,YAAaoX,EACbxT,cAAe,0BACfT,MAAOmU,IAGTlX,KAAKyD,gBAAgBwT,K,yBAGvB,WACEjX,KAAKiE,SAAS,CACZpE,gBAAgB,EAChBsX,WAAY,IACZ9T,aAAc,MAEhBlC,OAAOC,SAASC,W,iCAOlB,WACE,OACE,yBAAK7C,UAAU,YACb,2BAAIwB,KAAKL,MAAM6D,kB,0BAKrB,WAAgB,IAAD,OACb,OAEE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAOvD,YAAaD,KAAKC,cACzB,yBAAKC,GAAG,iBACN,yBAAKA,GAAG,UACN,kBAAC,EAAD,CACEN,YAAaI,KAAKL,MAAMC,YACxBC,eAAgBG,KAAKL,MAAME,kBAG/B,yBAAKK,GAAG,eACN,kBAAC,IAAD,KAEE,kBAAC,IAAD,CACEkX,OAAK,EACLC,KAAK,YACLC,OAAQ,SAAC5X,GAAD,OACN,kBAAC,GAAD,iBACMA,EADN,CAEEG,eAAgB,EAAKF,MAAME,eAC3BD,YAAa,EAAKD,MAAMC,YACxByD,aAAc,EAAK1D,MAAM0D,aACzBI,gBAAiB,EAAKA,sBAI5B,kBAAC,IAAD,CACE2T,OAAK,EACLC,KAAK,kBACLC,OAAQ,SAAC5X,GAAD,OACN,kBAAC,GAAD,iBACMA,EADN,CAEEG,eAAgB,EAAKF,MAAME,eAC3BD,YAAa,EAAKD,MAAMC,YACxBmE,WAAY,EAAKpE,MAAMC,YAAYmE,WACnCV,aAAc,EAAK1D,MAAM0D,aACzBN,MAAO,EAAKpD,MAAMoD,YAIxB,kBAAC,IAAD,CACEqU,OAAK,EACLC,KAAK,mBACLC,OAAQ,SAAC5X,GAAD,OACN,kBAAC,EAAD,iBACMA,EADN,CAEEG,eAAgB,EAAKF,MAAME,eAC3BD,YAAa,EAAKD,MAAMC,YACxBmE,WAAY,EAAKpE,MAAMC,YAAYmE,WACnCV,aAAc,EAAK1D,MAAM0D,aACzBI,gBAAiB,EAAKA,gBACtBV,MAAO,EAAKpD,MAAMoD,YAIxB,kBAAC,IAAD,CACEqU,OAAK,EACLC,KAAK,WACLC,OAAQ,SAAC5X,GAAD,OACN,kBAAC,GAAD,iBACMA,EADN,CAEEG,eAAgB,EAAKF,MAAME,eAC3BwD,aAAc,EAAK1D,MAAM0D,aACzBkF,MAAO,EAAK5I,MAAM0D,aAAakF,YAIrC,kBAAC,IAAD,CACE6O,OAAK,EACLC,KAAK,sBACLC,OAAQ,SAAC5X,GAAD,OACN,kBAAC,GAAD,iBACMA,EADN,CAEEG,eAAgB,EAAKF,MAAME,eAC3BwD,aAAc,EAAK1D,MAAM0D,mBAI/B,kBAAC,IAAD,CAAO+T,OAAK,EAACC,KAAK,UACfrX,KAAKL,MAAME,eACV,kBAAC,IAAD,CAAUU,GAAG,cAEb,kBAAC,IAAD,CAAUA,GAAG,YAMjB,kBAAC,IAAD,CAAO6W,OAAK,EAACC,KAAK,KACfrX,KAAKL,MAAME,eACV,kBAAC,IAAD,CAAUU,GAAG,cAEb,kBAAC,IAAD,CAAUA,GAAG,eAKhB,O,2BAOb,WAAiB,IAAD,OACd,OACE,yBAAKL,GAAG,iBACN,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEkX,OAAK,EACLC,KAAK,SACLC,OAAQ,SAAC5X,GAAD,OACN,kBAAC,GAAD,iBACMA,EADN,CAEEG,eAAgB,EAAKF,MAAME,eAC3BD,YAAa,EAAKD,MAAMC,YACxBuO,WAAY,EAAKA,iBAIvB,kBAAC,IAAD,CAAOiJ,OAAK,EAACC,KAAK,KACfrX,KAAKL,MAAME,eACV,kBAAC,IAAD,CAAUU,GAAG,cAEb,kBAAC,IAAD,CAAUA,GAAG,aAIlBP,KAAK6W,yB,qBAKZ,WAEE,OAAkC,IAA9B7W,KAAKL,MAAME,eACN,yBAAKK,GAAG,qBAAqBF,KAAK4W,gBAElC,yBAAK1W,GAAG,sBAAsBF,KAAK2W,mB,oBAI9C,WACE,OAAO,yBAAKzW,GAAG,YAAYF,KAAK8W,e,GA3OHN,IAAMhW,WClBnB+W,QACW,cAA7BpW,OAAOC,SAASoW,UAEe,UAA7BrW,OAAOC,SAASoW,UAEhBrW,OAAOC,SAASoW,SAASC,MACvB,2DCbNC,IAASJ,OAAO,kBAAC,GAAD,MAAS7N,SAASkO,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3T,MAAK,SAAA4T,GACJA,EAAaC,gBAEd1T,OAAM,SAAA2T,GACL/V,QAAQ+V,MAAMA,EAAMtV,c","file":"static/js/main.30325d85.chunk.js","sourcesContent":["import React from \"react\";\n\nconst LogIn = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1\"\n      />\n    </svg>\n  );\n};\n\nexport default LogIn;\n","import React from \"react\";\n\nconst Pile = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      aria-hidden=\"true\"\n      focusable=\"false\"\n      //data-prefix=\"fas\"\n      //data-icon=\"layer-group\"\n      //class=\"svg-inline--fa fa-layer-group fa-w-16\"\n      //role=\"img\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 512 512\"\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M12.41 148.02l232.94 105.67c6.8 3.09 14.49 3.09 21.29 0l232.94-105.67c16.55-7.51 16.55-32.52 0-40.03L266.65 2.31a25.607 25.607 0 0 0-21.29 0L12.41 107.98c-16.55 7.51-16.55 32.53 0 40.04zm487.18 88.28l-58.09-26.33-161.64 73.27c-7.56 3.43-15.59 5.17-23.86 5.17s-16.29-1.74-23.86-5.17L70.51 209.97l-58.1 26.33c-16.55 7.5-16.55 32.5 0 40l232.94 105.59c6.8 3.08 14.49 3.08 21.29 0L499.59 276.3c16.55-7.5 16.55-32.5 0-40zm0 127.8l-57.87-26.23-161.86 73.37c-7.56 3.43-15.59 5.17-23.86 5.17s-16.29-1.74-23.86-5.17L70.29 337.87 12.41 364.1c-16.55 7.5-16.55 32.5 0 40l232.94 105.59c6.8 3.08 14.49 3.08 21.29 0L499.59 404.1c16.55-7.5 16.55-32.5 0-40z\"\n      ></path>\n    </svg>\n  );\n};\n\nexport default Pile;\n","import React from \"react\";\n\nconst Play = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z\"\n      />\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n      />\n    </svg>\n  );\n};\n\nexport default Play;\n","import React from \"react\";\n\nconst EditCard = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n    >\n      <path d=\"M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z\" />\n      <path\n        fillRule=\"evenodd\"\n        d=\"M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n\nexport default EditCard;\n","import React from \"react\";\n\nconst EditStacks = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"\n      />\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"\n      />\n    </svg>\n  );\n};\n\nexport default EditStacks;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n// icons\nimport Pile from \"../../assets/icons/pile\";\nimport Play from \"../../assets/icons/play\";\nimport EditCard from \"../../assets/icons/editCard\";\nimport EditStacks from \"../../assets/icons/editStacks\";\n\nexport default class Menu extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      userIsLoggedIn: props.userIsLoggedIn,\n    };\n    // methods from App\n    this.logUserOut = this.logUserOut.bind(this);\n  }\n\n  logUserOut() {\n    this.logOut_User();\n  }\n\n  render() {\n    return (\n      <div id=\"LogInNavBar\">\n        <ul\n          style={{ listStyleType: \"none\", padding: 0 }}\n          activeclassname=\"active\"\n          id=\"menuBar\"\n        >\n          <li className=\"navigationLink \">\n            <NavLink to=\"/curStack\">\n              <div className=\"flipMenu\">\n                <div className=\"flipMenuInner\">\n                  <div className=\"flipMenuFront\">\n                    <Pile />\n                  </div>\n                  <div className=\"flipMenuBack\">Current Stack</div>\n                </div>\n              </div>\n            </NavLink>\n          </li>\n          <li className=\"navigationLink\">\n            <NavLink to=\"/cardSet\">\n              <div className=\"flipMenu\">\n                <div className=\"flipMenuInner\">\n                  <div className=\"flipMenuFront\">\n                    <Play />\n                  </div>\n                  <div className=\"flipMenuBack\">Play stack</div>\n                </div>\n              </div>\n            </NavLink>\n          </li>\n          <li className=\"navigationLink\">\n            <NavLink to=\"/cardManagement\">\n              <div className=\"flipMenu\">\n                <div className=\"flipMenuInner\">\n                  <div className=\"flipMenuFront\">\n                    <EditCard />\n                  </div>\n                  <div className=\"flipMenuBack\">Manage cards</div>\n                </div>\n              </div>\n            </NavLink>\n          </li>\n          <li className=\"navigationLink\">\n            <NavLink to=\"/stackManagement\">\n              <div className=\"flipMenu\">\n                <div className=\"flipMenuInner\">\n                  <div className=\"flipMenuFront\">\n                    <EditStacks />\n                  </div>{\" \"}\n                  <div className=\"flipMenuBack\">Manage stacks</div>\n                </div>\n              </div>\n            </NavLink>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { useState } from \"react\";\nimport Menu from \"./Menu\";\n\nexport default function Burger() {\n  const [burgerToggle, setBurgerToggle] = useState(false);\n  // const [burgerView, setBurgerView] = useState(\"closed\");\n\n  return (\n    <div id=\"burger\">\n      <button\n        className={burgerToggle ? \"change\" : \"closed\"}\n        onClick={() => setBurgerToggle(!burgerToggle)}\n      >\n        <div className=\"bar1\"></div>\n        <div className=\"bar2\"></div>\n        <div className=\"bar3\"></div>\n      </button>\n      {burgerToggle && <Menu />}\n    </div>\n  );\n}\n// TODO: find a way of displaying the actual menubar.\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n// icons\nimport LogIn from \"../../assets/icons/logIn\";\n// my imports\nimport Burger from \"./NavBar_burgerMen\";\n\nexport default class Navigation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      userIsLoggedIn: props.userIsLoggedIn,\n    };\n    // methods from App\n    this.logOut_User = this.props.logOut_User;\n    this.loggedInNavBar = this.loggedInNavBar.bind(this);\n    this.loggedOutNavBar = this.loggedOutNavBar.bind(this);\n    this.logUserOut = this.logUserOut.bind(this);\n  }\n\n  logUserOut() {\n    this.logOut_User();\n  }\n\n  logInButton() {\n    return (\n      <React.Fragment>\n        <button\n          id=\"logOutButton\"\n          type=\"button\"\n          onClick={() => {\n            window.location.reload();\n          }}\n        ></button>\n      </React.Fragment>\n    );\n  }\n\n  loggedInNavBar() {\n    return (\n      <div id=\"LogInNavBar\">\n        <Burger />\n      </div>\n    );\n  }\n\n  loggedOutNavBar() {\n    return (\n      <div id=\"LogOutNavBar\">\n        <ul\n          style={{ listStyleType: \"none\", padding: 0 }}\n          activeclassname=\"active\"\n        >\n          <li className=\"navigationLink\">\n            <Link to=\"/logIn\" className=\"flipMenuInner\">\n              <div className=\"flipMenuFront\">\n                <LogIn className=\"logInIcon\" />\n              </div>{\" \"}\n              <div className=\"flipMenuBack\">Log in</div>\n            </Link>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n\n  navigationLayout() {\n    return (\n      <div>\n        {this.state.userIsLoggedIn ? (\n          <div id=\"userIsLoggedIn\">{this.loggedInNavBar()}</div>\n        ) : (\n          <div id=\"userIsLoggedOut\">{this.loggedOutNavBar()}</div>\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"navigation\">{this.navigationLayout()}</div>\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\n\nconst LogOut = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"-10 -10 40 40\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\"\n      />\n    </svg>\n  );\n};\n\nexport default LogOut;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n// icons\nimport LogOut from \"../../assets/icons/logOut\";\n\nexport default class LogOutButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      userIsLoggedIn: props.userIsLoggedIn,\n    };\n    // methods from App\n    this.logOut_User = props.logOut_User.bind(this);\n  }\n\n  render() {\n    return (\n      <div id=\"LogOutButton\">\n        <button\n          className=\"buttonStyle\"\n          type=\"button\"\n          onClick={this.logOut_User}\n        >\n          <NavLink to=\"/\">\n            <div className=\"flipContainer\">\n              <div className=\"flipInner\">\n                <div className=\"flipFront\">\n                  <LogOut />\n                </div>\n                <div className=\"flipBack\">\n                  <span className=\"buttonMessage\"> Log Out</span>\n                </div>\n              </div>\n            </div>\n          </NavLink>\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nconst PileLogo = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      aria-hidden=\"true\"\n      focusable=\"false\"\n      //data-prefix=\"fas\"\n      //data-icon=\"layer-group\"\n      //class=\"svg-inline--fa fa-layer-group fa-w-16\"\n      //role=\"img\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 512 512\"\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M12.41 148.02l232.94 105.67c6.8 3.09 14.49 3.09 21.29 0l232.94-105.67c16.55-7.51 16.55-32.52 0-40.03L266.65 2.31a25.607 25.607 0 0 0-21.29 0L12.41 107.98c-16.55 7.51-16.55 32.53 0 40.04zm487.18 88.28l-58.09-26.33-161.64 73.27c-7.56 3.43-15.59 5.17-23.86 5.17s-16.29-1.74-23.86-5.17L70.51 209.97l-58.1 26.33c-16.55 7.5-16.55 32.5 0 40l232.94 105.59c6.8 3.08 14.49 3.08 21.29 0L499.59 276.3c16.55-7.5 16.55-32.5 0-40zm0 127.8l-57.87-26.23-161.86 73.37c-7.56 3.43-15.59 5.17-23.86 5.17s-16.29-1.74-23.86-5.17L70.29 337.87 12.41 364.1c-16.55 7.5-16.55 32.5 0 40l232.94 105.59c6.8 3.08 14.49 3.08 21.29 0L499.59 404.1c16.55-7.5 16.55-32.5 0-40z\"\n      ></path>\n    </svg>\n  );\n};\n\nexport default PileLogo;\n","import React, { Component } from \"react\";\nimport LogoOutButton from \"./LogOutButton\";\nimport PileLogo from \"../../assets/icons/pileLogo\";\n\nexport default class Title extends Component {\n  constructor(props) {\n    super(props);\n    // methods from App\n    this.logOut_User = props.logOut_User;\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"titlePage\">\n          <div id=\"titleLogo\">\n            <h1 className=\"title\">\n              Flashcards <PileLogo className=\"pileLogo\" />\n            </h1>\n          </div>\n          <div id=\"logUserOut\">\n            <LogoOutButton logOut_User={this.logOut_User} />\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","async function useDB_Connection(url, method = \"GET\", body = null, headers) {\n  let response;\n  try {\n    response = await fetch(url, {\n      method,\n      body,\n      headers,\n    });\n  } catch (err) {\n    console.log(\"Connection error on connection hook (10): \", err);\n    return false;\n  }\n\n  // receives data\n  const rawData = await response.text();\n  // processes to json\n  let responseData;\n  try {\n    responseData = await JSON.parse(rawData);\n  } catch (e) {\n    console.log(\"Error on json parsing (21):\\n\", e);\n    return false;\n  }\n  // console.log(\"Response was: \", responseData);\n  if (!response.status === 200) {\n    console.log(\"Error on response from API (26).\");\n    throw new Error(responseData.message);\n  }\n  // returns data processed\n  if (responseData) {\n    return responseData;\n  } else {\n    console.log(\"Error gathering data(33)\");\n  }\n  return false;\n}\n\nexport default useDB_Connection;\n","// import React from \"react\";\nimport useDB_Connection from \"../Connection/connection-hook\";\n\nconst connectToDB = useDB_Connection;\n\nasync function RemoveCurrentStack(stackNo, token) {\n  console.log(\"Delete handler: \", stackNo);\n  let stackToKill = stackNo;\n  let header = { Authorization: \"Bearer \" + token };\n  const url = process.env.REACT_APP_BACKEND_URL + \"/cardApi/\" + stackToKill;\n  connectToDB(url, \"DELETE\", null, header);\n}\n\nexport default RemoveCurrentStack;\n","import React from \"react\";\n\nconst trash = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n\nexport default trash;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n// Data update\nimport RemoveCurrentStack from \"../../utils/Data_Update/removeCurStack\";\n// Icon\nimport Trash from \"../../assets/icons/trash\";\n// In case there are no stacks\nimport sampleStack from \"../../utils/DummyData/sampleCards.json\";\n\nexport default class RemoveCurStack extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      currentStack: props.currentStack,\n      stackName: props.stackName,\n      token: props.token,\n      redirectUser: false,\n      messageToUser:\n        \"Clicking the button will delete the stack. If you want to delete another stack, you must go to current stack and select the stack you want to delete.\",\n    };\n    // DB actions\n    // this.removeThisStack = RemoveCurrentStack;\n    // methods from app.js\n    this.setCurrentStack = props.setCurrentStack;\n    // local\n    this.warning = this.warning.bind(this);\n    this.deleteButton = this.deleteButton.bind(this);\n    this.deleteHandler = this.deleteHandler.bind(this);\n    this.deleteStackView = this.deleteStackView.bind(this);\n    // fallback stack\n    this.sampleStack = sampleStack;\n  }\n  ////////////////\n  // Implementation methods\n  ////////////////\n\n  async deleteHandler() {\n    if (this.state.currentUser.userStacks.length === 1) {\n      this.setState({\n        messageToUser:\n          \"You cannot delete your only/last stack. You need to have at least one stack.\",\n      });\n    } else {\n      let removeProcess;\n      removeProcess = await RemoveCurrentStack(\n        this.state.currentStack._id,\n        this.state.token\n      )\n        .then(() => {\n          if (\n            this.state.currentUser.userStacks[0].stack_id &&\n            this.state.currentUser.userStacks[0].stack_id !== undefined\n          ) {\n            this.setCurrentStack(this.state.currentUser.userStacks[0].stack_id);\n          } else {\n            this.setCurrentStack(sampleStack);\n          }\n        })\n        .then(() => {\n          this.setState({ redirectUser: true });\n        })\n        .catch((err) => {\n          console.log(\"Error on deletion process (error 36). \", err);\n          return false;\n        });\n      if (!removeProcess) {\n        removeProcess = false;\n        return removeProcess;\n      }\n    }\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  deleteButton() {\n    return (\n      <button\n        // className=\"buttonStyle\"\n        className=\"buttonStyle\"\n        type=\"button\"\n        onClick={this.deleteHandler}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Trash />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Confirm DELETE</span>\n            </div>{\" \"}\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  warning() {\n    return (\n      <div>\n        <h3>\n          Your current stack is:\n          <strong className=\"currentSelectedStack\">\n            {\" \"}\n            {this.state.stackName}\n          </strong>\n        </h3>\n        <div className=\"infoCard\">{this.state.messageToUser}</div>\n        <p></p>\n        <p>\n          But, before you continue,are you sure about this? This action can't be\n          undone.\n        </p>\n      </div>\n    );\n  }\n\n  redirectToConsolidate() {\n    return (\n      <div>\n        <Redirect to=\"/consolidateChanges\" />\n      </div>\n    );\n  }\n\n  deleteStackView() {\n    return (\n      <div id=\"deleteCurStackLayout\">\n        <div id=\"deleteWarning\">{this.warning()}</div>\n        <div id=\"deleteButtonConfirmation\">{this.deleteButton()}</div>\n        {this.state.redirectUser ? this.redirectToConsolidate() : <div></div>}\n      </div>\n    );\n  }\n\n  render() {\n    return <div id=\"deleteStackView\"> {this.deleteStackView()}</div>;\n  }\n}\n","// import React from \"react\";\nimport useDB_Connection from \"../Connection/connection-hook\";\n\nconst connectToDB = useDB_Connection;\n\nasync function addNewSet(stack, token) {\n  // sequence: url, (method = \"GET\"), (body = null), (headers = {});\n  console.log(\"Add new SET OF CARDS, received: \", stack, typeof stack);\n  let requestBody = JSON.stringify(stack);\n  console.log(\"BODY is: \", requestBody, \"which is: \", typeof requestBody);\n  let header = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    Authorization: \"Bearer \" + token,\n  };\n  ///\n  console.log(\"--- send to Hook\");\n  const addNewSet = await connectToDB(\n    process.env.REACT_APP_BACKEND_URL + \"/cardAPI/addNewStack\",\n    \"POST\",\n    requestBody,\n    header\n  );\n  ///\n  console.log(\"Return: \", addNewSet);\n  // let newStackData = JSON.parse(getStackData);\n  // console.log(\"Return from API: \", newStackData);\n  if (\n    addNewSet.status === false ||\n    addNewSet.message === \"Error on adding new stack\"\n  ) {\n    console.log(\"Error on gathering data\");\n    return false;\n  } else {\n    console.log(\"New stack data return \", addNewSet);\n    return true;\n  }\n}\n\nexport default addNewSet;\n","//import React from \"react\";\n\nexport const validateEmail = (eMail) => {\n  // no input\n  if (!CheckInput(eMail) === true) {\n    return false;\n  } else {\n    // invalid characters\n    if (CheckForInvalidCharacters(eMail) === false) {\n      return false;\n    } else {\n      // email formatting\n      // backspace has to be doubled, since it is inside a string\n      //let pattern = new RegExp(\"^\\\\w+@\\\\w+.\\\\w+$\");\n      const pattern = /^\\w+@\\w+\\.\\w+$/;\n      if (pattern.test(eMail) === false) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  }\n};\n\nexport const validatePasswordInput = (pswInput) => {\n  if (CheckInput(pswInput) === true) {\n    if (CheckForInvalidCharacters(pswInput) === true) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst CheckInput = (inputToCheck) => {\n  let validInput = inputToCheck.trim().length >= 4;\n  if (validInput) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport const CheckForInvalidCharacters = (dataToCheck) => {\n  let invalidCharacters = [\n    \">\",\n    \"<\",\n    \"{\",\n    \"}\",\n    \"?\",\n    \"!\",\n    \"$\",\n    \"#\",\n    \"/\",\n    \"|\",\n    \"&\",\n    \"\\b\",\n    \"\\t\",\n    \";\",\n  ];\n  let invalidInput = invalidCharacters.map((c) => dataToCheck.includes(c));\n  if (invalidInput.includes(true)) {\n    console.log(\"wrong input\");\n    return false;\n  } else {\n    return true;\n  }\n};\n","import React from \"react\";\n\nconst Consolidate = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4\"\n      />\n    </svg>\n  );\n};\n\nexport default Consolidate;\n","import React from \"react\";\n\nconst Plus = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n      />\n    </svg>\n  );\n};\n\nexport default Plus;\n","import React from \"react\";\n\nconst Right = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M5 13l4 4L19 7\"\n      />\n    </svg>\n  );\n};\n\nexport default Right;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n// hooks\nimport addNewSet from \"../../utils/Data_Update/addNewSet\";\nimport { CheckForInvalidCharacters } from \"../../utils/Connection/validate\";\n// Icons\nimport Consolidate from \"../../assets/icons/consolidate\";\nimport Plus from \"../../assets/icons/plus\";\nimport Right from \"../../assets/icons/right\";\n\nexport default class AddNewStack extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      currentStack: props.currentStack,\n      token: props.token,\n      messageToUser:\n        \"In order to make the new card, click on plus (+). After you finish adding at least 3 new cards, click on consolidate button.\",\n      messageToUserBack: \"Your stack must have at least 3 cards.\",\n      frontValue: \"\",\n      backValue: \"\",\n      newFront: \"\",\n      newBack: \"\",\n      newStackName: \"\",\n      newCardsToStack: [],\n      readyToSend: true,\n      numberOfCardsAdded: 0,\n      redirect: false,\n    };\n    // utils\n    this.CheckForInvalidCharacters = CheckForInvalidCharacters;\n    // methods\n    this.handleSubmitAddCardHandler = this.handleSubmitAddCardHandler.bind(\n      this\n    );\n    this.handleFrontCardChange = this.handleFrontCardChange.bind(this);\n    this.StackNameSubmitHandler = this.StackNameSubmitHandler.bind(this);\n    this.AddCardForm = this.AddCardForm.bind(this);\n    this.consolidateNewStack = this.consolidateNewStack.bind(this);\n    this.handleSubmitReady = this.handleSubmitReady.bind(this);\n    this.consolidateButtonStack = this.consolidateButtonStack.bind(this);\n    this.infoCard = this.infoCard.bind(this);\n    this.checkButton = this.checkButton.bind(this);\n    this.AddCardButton = this.AddCardButton.bind(this);\n    this.renderRedirect = this.renderRedirect.bind(this);\n    this.cardNumbering = this.cardNumbering.bind(this);\n  }\n\n  ////////////////\n  // Implementation methods\n  ////////////////\n\n  async consolidateNewStack(newStack) {\n    console.log(\"Consolidate Add stack\");\n    const addSet = await addNewSet(JSON.stringify(newStack), this.state.token);\n    if (addSet) {\n      this.setState({ redirect: true });\n    } else {\n      this.setState({ messageToUser: \"Error on adding new Stack (error 52).\" });\n    }\n  }\n\n  StackNameSubmitHandler = (event) => {\n    event.preventDefault();\n    let newName = this.stackNewName.value;\n    this.setState((state) => {\n      return {\n        newStackName: newName,\n      };\n    });\n  };\n\n  handleSubmitReady() {\n    this.setState({\n      messageToUser:\n        \"Consolidating changes and sending the new data to your database.\",\n    });\n    const newStack = {\n      stackName: this.state.newStackName,\n      createdBy: this.state.currentUser.id,\n      cards: this.state.newCardsToStack,\n    };\n    this.consolidateNewStack(newStack);\n  }\n\n  handleSubmitAddCardHandler = (event) => {\n    event.preventDefault();\n    this.setState({\n      messageToUser:\n        \"Now add more cards and, when done, click on consolidate changes.\",\n    });\n    if (\n      this.validateInput(this.state.newFront) &&\n      this.validateInput(this.state.newBack)\n    ) {\n      this.state.newCardsToStack.push({\n        front: this.state.newFront,\n        back: this.state.newBack,\n      });\n      this.setState({\n        frontValue: \"\",\n        backValue: \"\",\n        numberOfCardsAdded: this.state.numberOfCardsAdded + 1,\n      });\n      console.log(\"new cards to stack: \", this.state.newCardsToStack);\n    } else {\n      this.setState({\n        messageToUser: \"Your input is invalid. Please correct it.\",\n      });\n    }\n  };\n\n  validateInput(newData) {\n    if (!this.CheckForInvalidCharacters(newData)) {\n      this.setState({\n        messageToUser: \"You entered an invalid character\",\n        messageToUserBack:\n          \"You can't add and non-alpha characters or punctuations except for fod(.)\",\n      });\n      return false;\n    } else {\n      this.setState({\n        messageToUser: \"Valid input\",\n      });\n      return true;\n    }\n  }\n\n  handleFrontCardChange = (e) => {\n    this.setState({ frontValue: e.target.value });\n    let addFront = e.target.value;\n    console.log(\"handle: \", addFront);\n    if (addFront) {\n      this.setState({\n        newFront: addFront,\n        messageToUser: \"don't forget to add the back of the card.\",\n      });\n    }\n  };\n\n  handleBackCardChange = (e) => {\n    this.setState({ backValue: e.target.value });\n    let addBack = e.target.value;\n    console.log(\"handle back: \", addBack);\n    if (addBack) {\n      this.setState({\n        newBack: addBack,\n        messageToUser: \"Did you already add the back of the card?\",\n      });\n    }\n  };\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  renderRedirect() {\n    if (this.state.redirect) {\n      return (\n        <Redirect\n          to=\"/consolidateChanges\"\n          userIsLoggedIn={this.state.userIsLoggedIn}\n        />\n      );\n    }\n  }\n\n  infoCard() {\n    return (\n      <div id=\"infoCardWrap\">\n        <div className=\"flipInfoCard\">\n          <div className=\"flipInfoCardInner\">\n            <p className=\"flipInfoCardFront\">{this.state.messageToUser}</p>\n            <p className=\"flipInfoCardBack\">{this.state.messageToUserBack}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  cardNumbering() {\n    return (\n      <div>\n        <h4>You added, so far {this.state.newCardsToStack.length} cards</h4>\n        <p>\n          You need to add, at least, 3 cards in order to be able to consolidate\n          and make a new stack.\n        </p>\n        {this.state.newCardsToStack.length > 2 ? (\n          <p>You can consolidate now, or keep adding cards.</p>\n        ) : (\n          <p>\n            You will see the consolidate button, after you add, at least 3\n            cards.\n          </p>\n        )}\n      </div>\n    );\n  }\n\n  checkButton() {\n    return (\n      <button\n        className=\"buttonStyle\"\n        type=\"button\"\n        onClick={this.StackNameSubmitHandler}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Right />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Add name</span>\n            </div>{\" \"}\n          </div>{\" \"}\n        </div>\n      </button>\n    );\n  }\n\n  consolidateButtonStack() {\n    if (this.state.numberOfCardsAdded > 2) {\n      return (\n        <button\n          className=\"buttonStyle\"\n          type=\"button\"\n          onClick={this.handleSubmitReady}\n        >\n          <div className=\"flipContainer\">\n            <div className=\"flipInner\">\n              <div className=\"flipFront\">\n                <Consolidate />\n              </div>\n              <div className=\"flipBack\">\n                <span className=\"buttonMessage\">CONSOLIDATE Changes</span>\n              </div>\n            </div>\n          </div>\n        </button>\n      );\n    } else {\n      return <div></div>;\n    }\n  }\n\n  AddCardButton() {\n    return (\n      <button\n        className=\"buttonStyle\"\n        type=\"button\"\n        onClick={this.handleSubmitAddCardHandler}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Plus />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Add new card</span>\n            </div>\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  AddCardForm() {\n    return (\n      <React.Fragment>\n        <div>\n          <form>\n            <div className=\"formElement\">\n              <label>Front of the card</label>\n              <input\n                className=\"cardInput\"\n                type=\"text\"\n                name=\"front\"\n                value={this.state.frontValue}\n                onChange={this.handleFrontCardChange}\n              />\n            </div>\n            <div className=\"formElement\">\n              <label>Back of the card</label>\n              <input\n                className=\"cardInput\"\n                type=\"text\"\n                name=\"front\"\n                value={this.state.backValue}\n                onChange={this.handleBackCardChange}\n              />\n            </div>\n            <br />\n            <div id=\"AddCardButtons\">\n              <div>{this.AddCardButton()}</div>\n              {this.cardNumbering()}\n              <div> {this.consolidateButtonStack()}</div>\n            </div>\n          </form>\n          {this.infoCard()}\n          {this.renderRedirect()}\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  newStackNameForm() {\n    return (\n      <React.Fragment>\n        {this.state.newStackName >= 0 ? (\n          <div id=\"letsAddSection\">\n            <h4>\n              Let's <strong className=\"statInfo\"> add </strong> a new stack,\n              shall we? First, what is the name of your new stack:\n            </h4>\n            <form>\n              <input\n                id=\"formAddNewStack\"\n                type=\"text\"\n                ref={(input) => (this.stackNewName = input)}\n              ></input>\n              <div>{this.checkButton()}</div>\n            </form>\n          </div>\n        ) : (\n          <div id=\"addCardsToStack\">\n            <p>\n              Great, so, the name is: <strong>{this.state.newStackName}</strong>\n            </p>\n            <p>\n              Now, let's add <strong>one</strong> card to it. After that, go to{\" \"}\n              <strong>Manage Your Stacks</strong> to keep adding more cards to\n              it.\n            </p>\n            {this.AddCardForm()}\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.newStackNameForm()}</React.Fragment>;\n  }\n}\n","import React from \"react\";\n\nconst Export = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\"\n      />\n    </svg>\n  );\n};\n\nexport default Export;\n","import React, { Component } from \"react\";\n// Icons\nimport Download from \"../../assets/icons/export\";\n// hooks\n// import useDB_Connection from \"../../Data/DB-hook/connection-hook\";\n// Icons\n\nexport default class ExportStack extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      currentStack: props.currentStack,\n      stackName: props.stackName,\n    };\n    // methods\n    this.prepareData = this.prepareData.bind(this);\n    this.exportHandler = this.exportHandler.bind(this);\n    this.exportButton = this.exportButton.bind(this);\n    this.infoOnExport = this.infoOnExport.bind(this);\n  }\n\n  ////////////////\n  // Implementation methods\n  ////////////////\n\n  prepareData() {\n    // Data selection: omits the '_id' and 'created by id' of the stack for security reasons\n    let dataToExport = this.state.currentStack;\n    delete dataToExport.id;\n    dataToExport.createdBy =\n      this.state.currentUser.firstName + \" \" + this.state.currentUser.lastName;\n    // Data preparation\n    let data = JSON.stringify(dataToExport, null, 4);\n    console.log(\"export:\", data, typeof data);\n    this.exportHandler(data);\n  }\n\n  exportHandler(stackData) {\n    // Data exporting to file\n    const a = document.createElement(\"a\");\n    a.href = URL.createObjectURL(new Blob([stackData], { type: \"text/plain\" }));\n    a.setAttribute(\"download\", \"yourStackData.txt\");\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    console.log(\"Export handler\");\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  exportButton() {\n    return (\n      <button className=\"buttonStyle\" type=\"button\" onClick={this.prepareData}>\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Download />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Download</span>\n            </div>{\" \"}\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  infoOnExport() {\n    return (\n      <React.Fragment>\n        <div>\n          <h3>\n            Your current stack is:\n            <strong className=\"currentSelectedStack\">\n              {\" \"}\n              {this.state.stackName}\n            </strong>\n          </h3>\n          <p>\n            Clicking the button will export the current stack to a file. This\n            file will be downloaded by your browser. Depending on local\n            system/OS configurations, you night need to authorize this or allow\n            it.\n          </p>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"exportCurStackWrapper\">\n          <div>{this.infoOnExport()}</div>\n          <div>{this.exportButton()}</div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nconst UserIsLoggedOut = () => {\n  return (\n    <React.Fragment>\n      <h2>This operation is only possible if the user is logged in </h2>\n      <p>Please go to Log in / Sign up page</p>\n\n      <Route>\n        <Redirect to=\"/logIn\" />\n      </Route>\n    </React.Fragment>\n  );\n};\n\nexport default UserIsLoggedOut;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n// Data Methods\nimport RemoveCurStack from \"./StackMan_RemoveCurStack\";\nimport AddNewStack from \"./StackMan_AddNewStack\";\nimport ExportStack from \"./StackMan_ExpoStack\";\n// DB\n// import { useDB_Connection } from \"../DB/DB-hook/connection-hook\";\n// Standard Log out page\nimport UserIsLoggedOut from \"../views/UserIsLoggedOut\";\n// Icon\nimport Plus from \"../../assets/icons/plus\";\nimport Trash from \"../../assets/icons/trash\";\nimport Export from \"../../assets/icons/export\";\n\nexport default class StackManagement extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userIsLoggedIn: props.userIsLoggedIn,\n      currentUser: props.currentUser,\n      currentStack: props.currentStack,\n      token: props.token,\n      add: true,\n      export: false,\n      delete: false,\n    };\n    // * Methods\n    // hooks\n    // this.useDB_Connection = useDB_Connection;\n    // methods from app.js\n    this.setCurrentStack = props.setCurrentStack;\n    // local\n    this.UserIsLoggedOut = UserIsLoggedOut;\n    this.AddSwitch = this.AddSwitch.bind(this);\n    this.exportSwitch = this.exportSwitch.bind(this);\n    this.deleteSwitch = this.deleteSwitch.bind(this);\n    this.addStackButton = this.addStackButton.bind(this);\n    this.exportStackButton = this.exportStackButton.bind(this);\n    this.deleteStackButton = this.deleteStackButton.bind(this);\n    this.stackNav = this.stackNav.bind(this);\n    this.StackMessage = this.StackMessage.bind(this);\n    this.chosenFunctionality = this.chosenFunctionality.bind(this);\n    this.StackManagementLayout = this.StackManagementLayout.bind(this);\n  }\n\n  ////////////////\n  // Implementation methods\n  ////////////////\n\n  AddSwitch() {\n    this.setState((state) => ({\n      add: true,\n      export: false,\n      delete: false,\n    }));\n  }\n\n  exportSwitch() {\n    this.setState((state) => ({\n      add: false,\n      export: true,\n      delete: false,\n    }));\n  }\n\n  deleteSwitch() {\n    this.setState((state) => ({\n      add: false,\n      export: false,\n      delete: true,\n    }));\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  addStackButton() {\n    return (\n      <button\n        // className=\"buttonStyle\"\n        className={this.state.add ? \"buttonIsActive\" : \"buttonIsOff\"}\n        type=\"button\"\n        onClick={this.AddSwitch}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Plus />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">NEW stack</span>\n            </div>\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  exportStackButton() {\n    return (\n      <button\n        // className=\"buttonStyle\"\n        className={this.state.export ? \"buttonIsActive\" : \"buttonIsOff\"}\n        type=\"button\"\n        onClick={this.exportSwitch}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Export />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Download</span>\n            </div>\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  deleteStackButton() {\n    return (\n      <button\n        // className=\"buttonStyle\"\n        className={this.state.delete ? \"buttonIsActive\" : \"buttonIsOff\"}\n        type=\"button\"\n        onClick={this.deleteSwitch}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Trash />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Delete</span>\n            </div>{\" \"}\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  stackNav() {\n    return (\n      <div id=\"StackNav\">\n        <div id=\"stackNavLeft\" className=\"optionIsActive\">\n          {this.addStackButton()}\n        </div>\n        <div id=\"stackNavCenter\">{this.exportStackButton()}</div>\n        <div id=\"stackNavRight\">{this.deleteStackButton()}</div>\n      </div>\n    );\n  }\n\n  chosenFunctionality() {\n    return (\n      <div id=\"chosenFunctionalityArea\">\n        {this.state.add ? (\n          <AddNewStack\n            userIsLoggedIn={this.state.userIsLoggedIn}\n            currentUser={this.state.currentUser}\n            currentStack={this.state.currentStack}\n            token={this.state.token}\n          />\n        ) : (\n          <div></div>\n        )}\n        {this.state.export ? (\n          <ExportStack\n            userIsLoggedIn={this.state.userIsLoggedIn}\n            currentUser={this.state.currentUser}\n            currentStack={this.state.currentStack}\n            stackName={this.state.currentStack.stackName}\n            // setCurrentStack={this.setCurrentStack}\n          />\n        ) : (\n          <div></div>\n        )}\n        {this.state.delete ? (\n          <RemoveCurStack\n            userIsLoggedIn={this.state.userIsLoggedIn}\n            currentUser={this.state.currentUser}\n            currentStack={this.state.currentStack}\n            setCurrentStack={this.setCurrentStack}\n            stackName={this.state.currentStack.stackName}\n            token={this.state.token}\n          />\n        ) : (\n          <div></div>\n        )}\n      </div>\n    );\n  }\n\n  StackMessage() {\n    return (\n      <div id=\"stackMessage\">\n        <h2>\n          Here you can manage your stack. You can: add a new stack, download or\n          delete the current stack. Choose the option bellow:\n        </h2>\n      </div>\n    );\n  }\n\n  StackManagementLayout() {\n    return (\n      <React.Fragment>\n        <div id=\"stackManLayout\">\n          {this.StackMessage()}\n          {this.stackNav()}\n          {this.chosenFunctionality()}\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  StackManagementView() {\n    // console.log(\"STACK MANAGEMENT\");\n    return (\n      <div id=\"StackManagementView\">\n        {this.state.userIsLoggedIn ? (\n          <div id=\"loggedInView\">{this.StackManagementLayout()}</div>\n        ) : (\n          <Redirect to=\"/login\" />\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"StackManagementView\">{this.StackManagementView()}</div>\n      </React.Fragment>\n    );\n  }\n}\n","// import React from \"react\";\nimport useDB_Connection from \"../Connection/connection-hook\";\n\nconst connectToDB = useDB_Connection;\n\nasync function updateCards(stack, token) {\n  // sequence: url, (method = \"GET\"), (body = null), (headers = {});\n  const urlUpdateCards =\n    process.env.REACT_APP_BACKEND_URL + \"/cardAPI/\" + String(stack._id);\n  let requestBody = JSON.stringify(stack);\n  let header = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    Authorization: \"Bearer \" + token,\n  };\n  ///\n  const getStackData = await connectToDB(\n    urlUpdateCards,\n    \"PATCH\",\n    requestBody,\n    header\n  );\n  ///\n  if (\n    getStackData.status === false ||\n    getStackData.message === \"Error on getting stack by id: \"\n  ) {\n    console.log(\"Error on gathering data\");\n    return false;\n  } else {\n    console.log(\"New stack data return \", getStackData);\n    return true;\n  }\n}\n\nexport default updateCards;\n","import React from \"react\";\n\nconst cardEdit = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n    >\n      <path d=\"M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z\" />\n      <path\n        fillRule=\"evenodd\"\n        d=\"M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n\nexport default cardEdit;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n// hooks\nimport updateCards from \"../../utils/Data_Update/updateCards\";\nimport { CheckForInvalidCharacters } from \"../../utils/Connection/validate\";\n// Icons\nimport Consolidate from \"../../assets/icons/consolidate\";\nimport EditCardIcon from \"../../assets/icons/cardEdit\";\n\nexport default class ManageCards extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userIsLoggedIn: props.userIsLoggedIn,\n      user: props.currentUser,\n      currentStack: props.currentStack,\n      token: props.token,\n      cardForEditing: \"\",\n      cardForEditingId: \"\",\n      editingMode: false,\n      tempNewFront: \"\",\n      tempNewBack: \"\",\n      newStack: \"\",\n      updatedItemMessage: false,\n      redirect: false,\n      messageToUser:\n        \"If you only want to edit one element (front OR back), leave the other element empty\",\n      messageToUserBack:\n        \"After you change the element locally, you need to click Consolidate changes button in order to reflect these changes in the actual stack.\",\n    };\n    // utils\n    this.CheckForInvalidCharacters = CheckForInvalidCharacters;\n    // this.manageCurrentStack = this.manageCurrentStack.bind(this);\n    this.handleSubmitReady = this.handleSubmitReady.bind(this);\n    this.editCard = this.editCard.bind(this);\n    this.cardsInCurrentStack = this.cardsInCurrentStack.bind(this);\n    this.frontEditHandler = this.frontEditHandler.bind(this);\n    this.backEditHandler = this.backEditHandler.bind(this);\n    this.editButtonHandler = this.editButtonHandler.bind(this);\n    this.validateInput = this.validateInput.bind(this);\n    this.makeNewCardSet = this.makeNewCardSet.bind(this);\n    this.chooseCard = this.chooseCard.bind(this);\n    this.stackWasUpdated = this.stackWasUpdated.bind(this);\n    this.plusButton = this.editButton.bind(this);\n    this.consolidateButton = this.consolidateButton.bind(this);\n    this.consolidateButtonView = this.consolidateButtonView.bind(this);\n    this.inputForm = this.inputForm.bind(this);\n    this.showCurrentStack = this.showCurrentStack.bind(this);\n  }\n\n  ////////////////\n  // Implementation methods\n  ////////////////\n\n  async handleSubmitReady() {\n    let newStack = this.state.newStack;\n    let updateCardsProcess;\n    if (newStack && newStack !== undefined) {\n      updateCardsProcess = await updateCards(newStack, this.state.token);\n      if (updateCardsProcess) {\n        this.setState({\n          messageToUser:\n            \"Consolidating changes and sending the new data to your database.\",\n          messageToUserBack: \"You will be redirected\",\n          redirect: true,\n        });\n      } else {\n        this.setState({\n          messageToUser: \"Error on retrieving stack data (error 87)\",\n        });\n      }\n    }\n  }\n\n  frontEditHandler(e) {\n    // e.preventDefault();\n    let front = e.target.value;\n    if (!front || front === \"\" || front === undefined || front === false) {\n      front = false;\n    }\n    this.setState({ tempNewFront: front });\n  }\n\n  backEditHandler(f) {\n    // e.preventDefault();\n    let back = f.target.value;\n    if (!back || back === \"\" || back === undefined || back === false) {\n      back = false;\n    }\n    this.setState({ tempNewBack: back });\n  }\n\n  // gets the new values for front and back\n  editButtonHandler(e) {\n    e.preventDefault();\n    let newValueFront = this.state.tempNewFront;\n    let newValueBack = this.state.tempNewBack;\n    this.makeNewCardSet(newValueFront, newValueBack);\n  }\n\n  validateInput(front, back) {\n    if (!this.CheckForInvalidCharacters(front)) {\n      this.setState({\n        messageToUser: \"You entered an invalid character in the front card\",\n      });\n      return false;\n    }\n    if (!this.CheckForInvalidCharacters(back)) {\n      this.setState({\n        messageToUser: \"You entered an invalid character in the back card\",\n      });\n      return false;\n    }\n    this.setState({\n      messageToUser: \"Valid input\",\n    });\n    return true;\n  }\n\n  makeNewCardSet(frontReceived, backReceived) {\n    if (this.validateInput(frontReceived, backReceived) === true) {\n      let newFront, newBack;\n      // makes a new version of the cardSet\n      let updatedStack = this.state.currentStack;\n      // Update back\n      if (backReceived === \"\" || backReceived === undefined) {\n        newBack = this.state.currentStack.cards[this.state.cardForEditing].back;\n      } else {\n        newBack = backReceived;\n      }\n      // Update front\n      if (frontReceived === \"\" || frontReceived === undefined) {\n        newFront = this.state.currentStack.cards[this.state.cardForEditing]\n          .front;\n      } else {\n        newFront = frontReceived;\n      }\n      updatedStack.cards[this.state.cardForEditing] = {\n        front: newFront,\n        back: newBack,\n      };\n      ///\n      console.log(\"Updated stack is now:, \", updatedStack);\n      // updates local state\n      this.setState((state) => ({\n        newStack: updatedStack,\n        editingMode: false,\n        updatedItemMessage: true,\n      }));\n    } else {\n      this.setState({ messageToUser: \"invalid input\" });\n    }\n  }\n\n  chooseCard(e) {\n    let selectedCard = e.target.value;\n    this.setState(() => ({\n      cardForEditing: selectedCard,\n      editingMode: true,\n    }));\n    this.setState({ cardForEditingId: selectedCard });\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  infoCard() {\n    return (\n      <div className=\"flipInfoCard\">\n        <div className=\"flipInfoCardInner\">\n          <p className=\"flipInfoCardFront\">{this.state.messageToUser}</p>\n          <p className=\"flipInfoCardBack\">{this.state.messageToUserBack}</p>\n        </div>\n      </div>\n    );\n  }\n\n  consolidateButton() {\n    return (\n      <button\n        className=\"buttonStyle\"\n        type=\"button\"\n        onClick={this.handleSubmitReady}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Consolidate />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Consolidate changes</span>\n            </div>\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  editButton() {\n    return (\n      <button\n        className=\"buttonStyle\"\n        type=\"button\"\n        onClick={this.editButtonHandler}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <EditCardIcon />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Change</span>\n            </div>{\" \"}\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  inputForm() {\n    return (\n      <form id=\"inputFormCardEdit\">\n        <p>\n          The current card Front is{\" \"}\n          <strong className=\"detach\">\n            {this.state.currentStack.cards[this.state.cardForEditing].front}\n          </strong>\n        </p>\n        <p>\n          Inform new card <strong className=\"emphasis\">front</strong>\n        </p>\n        <input type=\"text\" name=\"newFront\" onChange={this.frontEditHandler} />\n        <p>\n          The current card back is{\" \"}\n          <strong className=\"detach\">\n            {this.state.currentStack.cards[this.state.cardForEditing].back}\n          </strong>\n        </p>\n        <p>\n          Inform new card <strong className=\"emphasis\">back</strong>\n        </p>\n        <input type=\"text\" name=\"newBack\" onChange={this.backEditHandler} />\n        <br />\n        {this.editButton()}\n      </form>\n    );\n  }\n\n  editCard() {\n    return (\n      <React.Fragment>\n        <div id=\"editCardArea\">\n          {this.inputForm()}\n          {this.infoCard()}\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  stackWasUpdated() {\n    return (\n      <div id=\"shortMessage\" className=\"infoCard_cardSet\">\n        <p>\n          Card was updated locally. Select another card to update or consolidate\n          changes by selecting any card and clicking on the consolidate button.\n        </p>\n      </div>\n    );\n  }\n\n  cardsInCurrentStack() {\n    return (\n      <React.Fragment>\n        <h4>Now, select the card you want to manage</h4>\n        <div>\n          <select className=\"select-css\" onChange={this.chooseCard}>\n            <option value=\"0\">Select card</option>\n            {this.state.currentStack.cards.map((c, i) => {\n              return (\n                <option key={i} value={i}>\n                  {c.front} - {c.back}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  showCurrentStack() {\n    return (\n      <React.Fragment>\n        <div>\n          <h3>\n            Your current stack is:{\" \"}\n            <strong className=\"emphasis\">\n              {this.state.currentStack.stackName}\n            </strong>\n          </h3>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  consolidateButtonView() {\n    return (\n      <div id=\"consolidateButton\">\n        {this.state.updatedItemMessage ? this.consolidateButton() : <div></div>}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div id=\"manageCardsWrapper\">\n        <h1>Let's manage your cards</h1>\n        {this.showCurrentStack()}\n        {this.cardsInCurrentStack()}\n        {this.state.updatedItemMessage ? this.stackWasUpdated() : <div></div>}\n        {this.state.editingMode ? this.editCard() : <div></div>}\n        {this.consolidateButtonView()}\n        {this.state.redirect ? (\n          <Redirect\n            to=\"/consolidateChanges\"\n            userIsLoggedIn={this.state.userIsLoggedIn}\n          />\n        ) : (\n          <div></div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n// Standard Log out page\nimport UserIsLoggedOut from \"../views/UserIsLoggedOut\";\nimport ManageCards from \"./CardMan_ManageCards\";\n\nexport default class CardManagement extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userIsLoggedIn: props.userIsLoggedIn,\n      currentUser: props.currentUser,\n      currentStack: props.currentStack,\n      token: props.token,\n      addOrManage: false,\n    };\n    // * Methods\n    this.UserIsLoggedOut = UserIsLoggedOut;\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  cardManagementLayout() {\n    return (\n      <React.Fragment>\n        <div id=\"cardManagementLayout\">\n          <ManageCards\n            userIsLoggedIn={this.state.userIsLoggedIn}\n            currentUser={this.state.currentUser}\n            currentStack={this.state.currentStack}\n            token={this.state.token}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  cardManagementView() {\n    // console.log(\"CARD MANAGEMENT\");\n    return (\n      <React.Fragment>\n        <div id=\"cardManagementView\">\n          {this.state.userIsLoggedIn ? (\n            <div id=\"loggedInView\">{this.cardManagementLayout()}</div>\n          ) : (\n            <Redirect to=\"/login\" />\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"cardManagementView\">{this.cardManagementView()}</div>\n      </React.Fragment>\n    );\n  }\n}\n","// import React from \"react\";\nimport useDB_Connection from \"../Connection/connection-hook\";\n\nconst connectToDB = useDB_Connection;\n\nasync function LogUserIn(email, psw) {\n  let requestBody = JSON.stringify({\n    userEmail: email,\n    password: psw,\n  });\n  // console.log(\"Log User In\", process.env);\n  const userLogInCheck = await connectToDB(\n    process.env.REACT_APP_BACKEND_URL + \"/userAPI/logIn\",\n    \"POST\",\n    requestBody,\n    {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    }\n  );\n  const data = userLogInCheck;\n  // console.log(\"Log in data handler. Received: \", data, typeof data);\n  if (!data || data === false) {\n    console.log(\"Error on log in. No data received.\");\n  }\n  try {\n    return data;\n  } catch (error) {\n    console.log(\"error on Log in: \", error);\n    return false;\n  }\n}\n\nexport default LogUserIn;\n","import React, { Component } from \"react\";\n//import useDB_Connection from \"../../Data/DB-hook/connection-hook\";\n// Connection\nimport LogUserIn from \"../../utils/Data_Update/logUserIn\";\n// hooks and util\nimport {\n  validateEmail,\n  validatePasswordInput,\n} from \"../../utils/Connection/validate\";\n\nexport default class LogInPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      userIsLoggedIn: props.userIsLoggedIn,\n      errorMessage: \" \",\n    };\n    // data from AI\n    this.LogUserIn = LogUserIn.bind(this);\n    // methods from parent\n    this.logIn_User = props.logIn_User.bind(this);\n    this.handleSubmitLogInForm = this.handleSubmitLogInForm.bind(this);\n    //local methods\n    this.logInView = this.logInView.bind(this);\n    this.logInForm = this.logInForm.bind(this);\n    this.validateCredentials = this.validateCredentials.bind(this);\n    // hooks\n    // this.useDB_Connection = useDB_Connection;\n    // validation\n    this.validateEmail = validateEmail;\n    this.validatePasswordInput = validatePasswordInput;\n    this.logInProcess = this.logInProcess.bind(this);\n  }\n\n  //////////////////////////\n  // Implementation methods\n  //////////////////////////\n\n  async logInProcess(em, psw) {\n    const logInData = await LogUserIn(em, psw);\n    // console.log(\"log in for: \", logInData);\n    if (logInData) {\n      this.logIn_User(logInData);\n    } else {\n      console.log(\"Error on login process. Error 47.\");\n    }\n  }\n\n  validateCredentials(e, p) {\n    if (this.validateEmail(e) === true) {\n      if (this.validatePasswordInput(p) === true) {\n        this.logInProcess(e, p);\n      }\n    } else {\n      this.setState({ errorMessage: \"improper input on log in form\" });\n    }\n  }\n\n  handleSubmitLogInForm(event) {\n    event.preventDefault();\n    this.validateCredentials(this.userEmail.value, this.userPsw.value);\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  logInForm() {\n    return (\n      <div id=\"form\">\n        <form>\n          <div className=\"formElement\">\n            <label>Enter your email</label>\n            <br />\n            <input\n              type=\"email\"\n              label=\"enter your email here\"\n              ref={(input) => (this.userEmail = input)}\n            ></input>\n          </div>\n          <div className=\"formElement\">\n            <label>Enter password</label>\n            <br />\n            <input\n              type=\"password\"\n              label=\"enter your password here\"\n              ref={(input) => (this.userPsw = input)}\n            ></input>\n          </div>\n          <button\n            className=\"simpleButtonStyle\"\n            onClick={this.handleSubmitLogInForm}\n          >\n            Log me in\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n  logInView() {\n    return (\n      <div id=\"loggedInView\">\n        <h2>Log In Page</h2>\n        {this.logInForm()}\n        <div id=\"errorMessage\">{this.state.errorMessage}</div>\n      </div>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.logInView()}</React.Fragment>;\n  }\n}\n","import useDB_Connection from \"../Connection/connection-hook\";\nconst connectToDB = useDB_Connection;\n\n//url, method = \"GET\", body = null, headers = {}\nasync function SignUserUp(userEmail, password, firstName, lastName) {\n  let requestBody = JSON.stringify({\n    userEmail: userEmail,\n    password: password,\n    firstName: firstName,\n    lastName: lastName,\n  });\n  const userSignUpCheck = await connectToDB(\n    process.env.REACT_APP_BACKEND_URL + \"/userAPI/signUp\",\n    \"POST\",\n    requestBody,\n    {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    }\n  );\n  const data = userSignUpCheck;\n  console.log(\"Data from Sign up: \", data);\n}\n\nexport default SignUserUp;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n// Utils\nimport {\n  validateEmail,\n  validatePasswordInput,\n} from \"../../utils/Connection/validate\";\n// Connection to DB\n// import useDB_Connection from \"../../Data/DB-hook/connection-hook\";\nimport SignUserUp from \"../../utils/Data_Update/signUserUp\";\n\nexport default class SignUpPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      userIsLoggedIn: props.userIsLoggedIn,\n      redirectUser: false,\n      errorMessage: \"\",\n    };\n    // from parent\n    this.logInOrSignUpSwitch = props.logInOrSignUpSwitch;\n    // this.updateUser = props.updateUser.bind(this);\n    this.validateCredentials = this.validateAccessCredentials.bind(this);\n    this.handleSubmitSignUpForm = this.handleSubmitSignUpForm.bind(this);\n    // this.SignUserUp = this.SignUserUp.bind(this);\n    // local\n    this.signUpForm = this.signUpForm.bind(this);\n    this.signUpView = this.signUpView.bind(this);\n    // Data from API\n    this.SignUserUp = SignUserUp.bind(this);\n    // utils\n    // validation\n    this.validateEmail = validateEmail;\n    this.validatePasswordInput = validatePasswordInput;\n  }\n\n  proceedToSignUp(userEmail, userPsw, userFirstName, userLastName) {\n    let signUpProcess;\n    try {\n      signUpProcess = this.SignUserUp(\n        userEmail,\n        userPsw,\n        userFirstName,\n        userLastName\n      );\n    } catch {\n      console.log(\"Error on Sign up Process\");\n      return false;\n    }\n    console.log(\"=> \", signUpProcess);\n    if (signUpProcess.status === false || !signUpProcess) {\n      this.setState({ errorMessage: \"Error on sign up process.\" });\n    } else {\n      this.logInOrSignUpSwitch(true);\n      this.setState({ redirectUser: true });\n    }\n  }\n\n  validateAccessCredentials(userEmail, userPassword) {\n    // console.log(\"validate: \", userEmail, userPassword);\n\n    if (this.validateEmail(userEmail) === true) {\n      if (this.validatePasswordInput(userPassword) === true) {\n        // console.log(\"validated\");\n        // console.log(\"proper input\");\n        return true;\n      }\n    } else {\n      console.log(\"invalid input\");\n      return false;\n    }\n  }\n\n  handleSubmitSignUpForm(event) {\n    event.preventDefault();\n    const credentials = {\n      userEmailSignUp: this.userEmail.value,\n      userPswSignUp: this.userPsw.value,\n      userFirstNameSignUp: this.firstName.value,\n      userLastNameSignUp: this.lastName.value,\n    };\n    console.log(\n      \"Received: \",\n      credentials.userEmailSignUp,\n      credentials.userPswSignUp,\n      credentials.userFirstNameSignUp,\n      credentials.userLastNameSignUp\n    );\n    if (\n      this.validateAccessCredentials(\n        credentials.userEmailSignUp,\n        credentials.userPswSignUp\n      ) === true\n    ) {\n      console.log(\"proper input on sign up form\");\n      this.proceedToSignUp(\n        credentials.userEmailSignUp,\n        credentials.userPswSignUp,\n        credentials.userFirstNameSignUp,\n        credentials.userLastNameSignUp\n      );\n    } else {\n      console.log(\n        \"Could not sign up.\",\n        credentials.userEmailSignUp,\n        credentials.userPswSignUp,\n        credentials.userFirstNameSignUp,\n        credentials.userLastNameSignUp\n      );\n    }\n  }\n\n  redirectUser() {\n    return <Redirect to=\"/logIn\" />;\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  signUpForm() {\n    return (\n      <form>\n        <div className=\"formElement\">\n          <label>Enter email</label>\n          <br />\n          <input\n            type=\"email\"\n            label=\"enter your email here\"\n            ref={(input) => (this.userEmail = input)}\n          ></input>\n        </div>\n        <div className=\"formElement\">\n          <label>Enter password</label>\n          <br />\n          <input\n            type=\"password\"\n            label=\"enter your password here\"\n            ref={(input) => (this.userPsw = input)}\n          ></input>\n        </div>\n        <div className=\"formElement\">\n          <label>Enter your first name</label>\n          <br />\n          <input\n            type=\"email\"\n            label=\"enter your name here\"\n            ref={(input) => (this.firstName = input)}\n          ></input>\n        </div>\n        <div className=\"formElement\">\n          <label>Enter your last name</label>\n          <br />\n          <input\n            type=\"email\"\n            label=\"enter your name here\"\n            ref={(input) => (this.lastName = input)}\n          ></input>\n        </div>\n        <button\n          className=\"simpleButtonStyle\"\n          onClick={this.handleSubmitSignUpForm}\n        >\n          Register\n        </button>\n        <p>{this.state.errorMessage}</p>\n      </form>\n    );\n  }\n\n  signUpView() {\n    return (\n      <div id=\"signUpView\">\n        <h2>Sign Up Page</h2>\n        {this.signUpForm()}\n        {this.state.redirectUser ? this.redirectUser() : <div></div>}\n      </div>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.signUpView()}</React.Fragment>;\n  }\n}\n","import React, { Component } from \"react\";\nimport LogInPage from \"./LogSign_LogInPage\";\nimport SignUpPage from \"./LogSign_SignUpPage\";\n// import { useDB_Connection } from \"../DB/DB-hook/connection-hook\";\n//\nimport PileLogo from \"../../assets/icons/pileLogo\";\n// Style\nimport \"../../../src/index.css\";\n\nexport default class LogInSignUp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      userIsLoggedIn: props.userIsLoggedIn,\n      logInOrSignUpState: true,\n    };\n    // ** Binding\n\n    this.logIn_User = props.logIn_User.bind(this);\n    this.LogInPage = LogInPage.bind(this);\n    // this.SignUpPage = SignUpPage.bind(this);\n    this.logInOrSignUpSwitch = this.logInOrSignUpSwitch.bind(this);\n    this.logInOrSignUpDisplay = this.logInOrSignUpDisplay.bind(this);\n    this.logInSignUpView = this.logInSignUpView.bind(this);\n  }\n\n  //////////////////////////\n  // Implementation methods\n  //////////////////////////\n\n  logInOrSignUpSwitch() {\n    this.setState((state) => ({\n      logInOrSignUpState: !state.logInOrSignUpState,\n    }));\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  logInOrSignUpDisplay() {\n    return (\n      <div id=\"logInOrSignUpLayout\">\n        <div id=\"inOutButtonArea\">\n          <h1 className=\"title\">\n            Log in or Sign up\n            <span>\n              <PileLogo className=\"pileLogo\" />\n            </span>\n          </h1>\n        </div>\n        <div id=\"logInOrSignUpViewSwitch\">\n          <button\n            type=\"button\"\n            className=\"simpleButtonStyle\"\n            onClick={this.logInOrSignUpSwitch}\n          >\n            {this.state.logInOrSignUpState ? (\n              <p>Sign up instead</p>\n            ) : (\n              <p> Log in instead</p>\n            )}\n          </button>\n          {this.state.logInOrSignUpState ? (\n            <LogInPage\n              user={this.state.currentUser}\n              currentStack={this.state.currentStack}\n              logIn_User={this.logIn_User}\n            />\n          ) : (\n            <SignUpPage\n              user={this.state.currentUser}\n              currentStack={this.state.currentStack}\n              updateUser={this.updateUser}\n              logInOrSignUpSwitch={this.logInOrSignUpSwitch}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  logInSignUpView() {\n    // console.log(\"LOG IN SIGN UP\");\n    return (\n      <div id=\"loggedInOrSignUpView\">\n        {this.state.userIsLoggedIn\n          ? this.state.userIsLoggedIn\n          : this.logInOrSignUpDisplay()}\n      </div>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.logInSignUpView()}</React.Fragment>;\n  }\n}\n","import React, { Component } from \"react\";\n// hooks\n//import { useDB_Connection } from \"../../DB/DB-hook/connection-hook\";\n\nexport default class ReadCards extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      currentStack: props.currentStack,\n    };\n  }\n\n  showCurrentStack() {\n    if (this.state.currentStack.stackName) {\n      return (\n        <div id=\"cardListContainer\">\n          {this.state.currentStack.cards.map((m, j) => {\n            return (\n              <div className=\"flipCard\" key={j}>\n                <li className=\"flipCardInner\" value={m.front}>\n                  <div className=\"flipCardFront\">\n                    <div className=\"cardTextPositioning\">{m.front}</div>\n                  </div>\n                  <div className=\"flipCardBack\">\n                    <div className=\"cardTextPositioning\">{m.back}</div>\n                  </div>\n                </li>\n              </div>\n            );\n          })}\n          <div></div>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <h3>\n            There was an error retrieving your cards. Please, Reload the\n            application and if the problem persists, inform the developer.\n          </h3>\n        </div>\n      );\n    }\n  }\n\n  render() {\n    return <React.Fragment>{this.showCurrentStack()}</React.Fragment>;\n  }\n}\n","import React, { Component } from \"react\";\n// import history from \"../../utils/history\";\nimport { Redirect } from \"react-router-dom\";\n// hooks\n//import { useDB_Connection } from \"../../DB/DB-hook/connection-hook\";\n\nexport default class SelectNewStack extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userIsLoggedIn: props.userIsLoggedIn,\n      currentStack: props.currentStack,\n      currentUser: props.currentUser,\n      chosenStackId: \"\",\n      chosenStackName: \"\",\n      confirmation: false,\n      redirect: false,\n      messageToUser: \"Choose a new stack and confirm.\",\n    };\n    // methods from parent comp\n    this.setCurrentStack = props.setCurrentStack;\n    //this.selectStackUpdatedStack = props.selectStackUpdatedStack;\n    // local methods\n    this.stackSelector = this.stackSelector.bind(this);\n    this.chooseNewStack = this.chooseNewStack.bind(this);\n\n    this.getNewStackName = this.getNewStackName.bind(this);\n    this.confirmNewStack = this.confirmNewStack.bind(this);\n    this.renderRedirect = this.renderRedirect.bind(this);\n    //this.reloadApp = this.reloadApp.bind(this);\n    // views\n    this.chooseNewStackView = this.chooseNewStackView.bind(this);\n    this.preSelectView = this.preSelectView.bind(this);\n    this.afterSelectView = this.afterSelectView.bind(this);\n  }\n\n  getNewStackName(newStackID) {\n    let listOfStacks = this.state.currentUser.userStacks;\n    for (let l in listOfStacks) {\n      // console.log(\"Checking: \", l, listOfStacks[l].stack_id);\n      if (newStackID === listOfStacks[l].stack_id) {\n        return listOfStacks[l].stack_name;\n      }\n    }\n  }\n\n  chooseNewStack(e) {\n    let newStack = e.target.value;\n    let newStackName = this.getNewStackName(newStack);\n    // console.log(\"choose stack: \", newStack, \"name: \", newStackName);\n    this.setState({\n      chosenStackId: newStack,\n      chosenStackName: newStackName,\n      confirmation: true,\n      messageToUser:\n        \"You will be directed to a consolidation page, as data will be sent to the DataBase.\",\n    });\n  }\n\n  stackSelector() {\n    return (\n      <select className=\"select-css\" onChange={this.chooseNewStack}>\n        <option value=\"0\">Select new stack</option>\n        {this.state.currentUser.userStacks.map((s) => {\n          return (\n            <option key={s.stack_name} value={s.stack_id}>\n              {s.stack_name}\n            </option>\n          );\n        })}\n      </select>\n    );\n  }\n\n  renderRedirect() {\n    if (this.state.redirect) {\n      return (\n        <Redirect\n          to=\"/consolidateChanges\"\n          userIsLoggedIn={this.state.userIsLoggedIn}\n        />\n      );\n    }\n  }\n\n  confirmNewStack() {\n    this.setState({ redirect: true });\n    this.setCurrentStack(this.state.chosenStackId);\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  InformationCard_Select() {\n    return (\n      <div className=\"infoCard\">\n        <p>{this.state.messageToUser}</p>\n      </div>\n    );\n  }\n\n  confirmationButton() {\n    return (\n      <div>\n        <h3> You chose: {this.state.chosenStackName}</h3>\n        {this.renderRedirect()}\n        <button\n          className=\"simpleButtonStyle\"\n          type=\"button\"\n          onClick={this.confirmNewStack}\n        >\n          Confirm change\n        </button>\n      </div>\n    );\n  }\n\n  preSelectView() {\n    return (\n      <div id=\"StackSelection\">\n        <h2>\n          Hi there. Your current stack of cards is:{\" \"}\n          <strong className=\"currentSelectedStack\">\n            {this.state.currentStack.stackName}\n            {\". \"}\n          </strong>\n        </h2>\n        <h3>Which stack do you want to select?</h3>\n        {this.stackSelector()}\n      </div>\n    );\n  }\n\n  afterSelectView() {\n    return (\n      <div id=\"confirmation\">\n        {this.state.confirmation ? this.confirmationButton() : <br />}\n      </div>\n    );\n  }\n\n  chooseNewStackView() {\n    return (\n      <div>\n        {this.state.confirmation\n          ? this.afterSelectView()\n          : this.preSelectView()}\n        {this.InformationCard_Select()}\n      </div>\n    );\n  }\n\n  selectNewStackView() {\n    return (\n      <div id=\"cardSetView\">\n        {this.state.userIsLoggedIn ? (\n          <div id=\"loggedInView\">{this.chooseNewStackView()}</div>\n        ) : (\n          <Redirect to=\"/\" />\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.selectNewStackView()}</React.Fragment>;\n  }\n}\n","import React from \"react\";\n\nconst Collection = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\"\n      />\n    </svg>\n  );\n};\n\nexport default Collection;\n","import React from \"react\";\n\nconst Check2 = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"-4 -2 30 30\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"\n      />\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\"\n      />\n    </svg>\n  );\n};\n\nexport default Check2;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n// internal components\nimport ReadCards from \"./CurStack_ReadCards\";\nimport SelectNewStack from \"./CurStack_SelectNewStack\";\n// Standard Log out page\nimport UserIsLoggedOut from \"../views/UserIsLoggedOut\";\n// Style\nimport \"../../../src/index.css\";\n// Icons\nimport Collection from \"../../assets/icons/collection\";\nimport CheckEye from \"../../assets/icons/checkEye\";\n\nexport default class CurrentStack extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.currentUser,\n      userIsLoggedIn: props.userIsLoggedIn,\n      userStacks: props.userStacks,\n      currentStack: props.currentStack,\n      readOrSelect: true,\n      update: false,\n    };\n    // components\n    this.UserIsLoggedOut = UserIsLoggedOut;\n    this.ReadCards = ReadCards;\n    this.selectNewStack = SelectNewStack;\n    // methods from app.js\n    this.setCurrentStack = props.setCurrentStack;\n    // Methods\n    this.changeStackButton = this.changeStackButton.bind(this);\n    this.currentStackLayout = this.currentStackLayout.bind(this);\n    this.readSelectSwitch = this.readSelectSwitch.bind(this);\n    this.SelectDifferentStackButton = this.SelectDifferentStackButton.bind(\n      this\n    );\n    this.currentStackView = this.currentStackView.bind(this);\n  }\n\n  ////////////////\n  // Implementation methods\n  ////////////////\n\n  readSelectSwitch() {\n    this.setState((state) => ({\n      readOrSelect: !state.readOrSelect,\n    }));\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  SelectDifferentStackButton() {\n    return (\n      <button\n        className=\"buttonStyle\"\n        type=\"button\"\n        onClick={this.readSelectSwitch}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Collection />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Select stack</span>\n            </div>\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  ReadStackButton() {\n    return (\n      <button\n        className=\"buttonStyle\"\n        type=\"button\"\n        onClick={this.readSelectSwitch}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <CheckEye />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Read stack</span>\n            </div>\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  changeStackButton() {\n    return (\n      <div id=\"buttonArea\">\n        {this.state.readOrSelect ? (\n          <div>{this.SelectDifferentStackButton()}</div>\n        ) : (\n          <div>{this.ReadStackButton()}</div>\n        )}\n      </div>\n    );\n  }\n\n  currentStackLayout() {\n    return (\n      <React.Fragment>\n        <div id=\"currentStackLayout\">\n          <div id=\"tinyNavBar\">\n            <div id=\"saluteTheUser\">\n              <h3>Hi {this.state.currentUser.firstName}, welcome back </h3>\n              <br />\n              <p>\n                The current stack is:{\" \"}\n                <span className=\"highlight\">\n                  {this.state.currentStack.stackName}\n                </span>\n              </p>\n              <p>\n                Hover over the card to see the back, or click on it if you are\n                on\n              </p>\n              a mobile.\n            </div>\n            {this.changeStackButton()}\n          </div>\n          <div className=\"cardViewWrap\">\n            {this.state.readOrSelect ? (\n              <ReadCards\n                userIsLoggedIn={this.state.userIsLoggedIn}\n                currentUser={this.state.currentUser}\n                currentStack={this.state.currentStack}\n              />\n            ) : (\n              <SelectNewStack\n                userIsLoggedIn={this.state.userIsLoggedIn}\n                currentStack={this.state.currentStack}\n                currentUser={this.state.currentUser}\n                setCurrentStack={this.setCurrentStack}\n              />\n            )}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  currentStackView() {\n    // console.log(\"CURRENT STACK\");\n    return (\n      <div id=\"currentStackView\">\n        {this.state.userIsLoggedIn ? (\n          <div id=\"loggedInView\">{this.currentStackLayout()}</div>\n        ) : (\n          <div>\n            <Redirect to=\"/\" />\n          </div>\n        )}\n        {/* {this.checkForConsistency()} */}\n      </div>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.currentStackView()}</React.Fragment>;\n  }\n}\n","import React from \"react\";\n\nconst Loader = () => {\n  return <div className=\"loader\"></div>;\n};\n\nexport default Loader;\n","import React, { Component } from \"react\";\nimport { NavLink, Redirect } from \"react-router-dom\";\n// Visual elements\nimport Loader from \"./Loader\";\n\nclass ConsolidateChanges extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userIsLoggedIn: props.userIsLoggedIn,\n      viewSwitch: true,\n      errorMessage: \"\",\n    };\n    this.initialView = this.initialView.bind(this);\n    this.finalView = this.finalView.bind(this);\n    this.ConsolidateChangesLayout = this.ConsolidateChangesLayout.bind(this);\n    this.ConsolidateChangesView = this.ConsolidateChangesView.bind(this);\n  }\n\n  initialView() {\n    return (\n      <div id=\"initialView\">\n        <h1>Processing changes</h1>\n        <div id=\"loading\">\n          <Loader />\n        </div>\n      </div>\n    );\n  }\n\n  finalView() {\n    return (\n      <div id=\"finalView\">\n        <div id=\"backToBeginning\">\n          <div id=\"confirm\">\n            <h4>The changes you made re consolidated in the Database</h4>\n\n            <p> Now you can :</p>\n          </div>\n          <div id=\"backToApp\">\n            <p>\n              Now you can\n              <NavLink to=\"/curStack\">\n                <strong className=\"highlight\"> READ </strong>\n              </NavLink>\n              the new current stack or{\" \"}\n              <NavLink to=\"/cardSet\">\n                <strong className=\"highlight\"> PLAY </strong>\n              </NavLink>{\" \"}\n              it.\n            </p>\n          </div>\n          <div id=\"warn\">\n            <h4>\n              Note that some changes (adding a new stack, for example) will only\n              be visible when you reload the application.\n            </h4>\n            <p>Now let's flip some cards. :-D </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ viewSwitch: false });\n    }, 800);\n  }\n\n  ConsolidateChangesLayout() {\n    return (\n      <div id=\"Consolidate\">\n        {this.state.viewSwitch ? this.initialView() : this.finalView()}\n      </div>\n    );\n  }\n\n  ConsolidateChangesView() {\n    // console.log(\"CONSOLIDATE CHANGES\");\n    return (\n      <div id=\"cardSetView\">\n        {this.state.userIsLoggedIn ? (\n          <div id=\"loggedInView\">{this.ConsolidateChangesLayout()}</div>\n        ) : (\n          <Redirect to=\"/\" />\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.ConsolidateChangesView()}</React.Fragment>;\n  }\n}\n\nexport default ConsolidateChanges;\n","import React from \"react\";\n\nconst Rewind = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M12.066 11.2a1 1 0 000 1.6l5.334 4A1 1 0 0019 16V8a1 1 0 00-1.6-.8l-5.333 4zM4.066 11.2a1 1 0 000 1.6l5.334 4A1 1 0 0011 16V8a1 1 0 00-1.6-.8l-5.334 4z\"\n      />\n    </svg>\n  );\n};\n\nexport default Rewind;\n","import React from \"react\";\n\nconst Stats = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"\n      />\n    </svg>\n  );\n};\n\nexport default Stats;\n","import React, { Component } from \"react\";\n// hooks\n// import { useDB_Connection } from \"../../DB/DB-hook/connection-hook\";\nimport RewindIcon from \"../../assets/icons/rewind\";\nimport StatsIcon from \"../../assets/icons/stats\";\n\nexport default class Stats extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      right: props.right,\n      wrong: props.wrong,\n      lengthOfStack: props.lengthOfStack,\n      guesses: props.right + props.wrong,\n      percentage: ((props.right / (props.right + props.wrong)) * 100).toFixed(\n        2\n      ),\n    };\n    this.reSetGame = props.reSetGame;\n    this.reStart = this.reStart.bind(this);\n    this.stackLevel = this.stackLevel.bind(this);\n    // this.pieChart = this.pieChart.bind(this);\n    this.reStartButton = this.reStartButton.bind(this);\n    this.gameStatsButton = this.gameStatsButton.bind(this);\n    this.gameStatsContents = this.gameStatsContents.bind(this);\n    this.statsLayout = this.statsLayout.bind(this);\n  }\n\n  ////////////////\n  // Implementation methods\n  ////////////////\n\n  reStart(event) {\n    event.preventDefault();\n    // TODO: nodeJs routing to save the data into json (log)??\n    // window.location.reload(false);\n    this.reSetGame();\n    // console.log(\"current card: \", this.state.current);\n  }\n\n  // pieChart() {\n  //   let correct = parseInt(this.state.percentage, 10) + 0.53;\n  //   console.log(\"correct: \", correct, typeof correct);\n  //   let cover = correct.toString() + \" 100\";\n  //   console.log(\"cover: \", cover, typeof cover);\n  //   return (\n  //     <svg id=\"pieGraph\" viewBox=\"0 0 32 32\" width=\"100\" height=\"100\">\n  //       <circle r=\"25\" cx=\"50\" cy=\"50\" strokeDasharray={cover} />\n  //     </svg>\n  //   );\n  // }\n\n  stackLevel() {\n    let infoLevel;\n    console.log(\"length: \", this.state.lengthOfStack);\n    if (this.state.lengthOfStack <= 10) {\n      infoLevel =\n        \"easy, because any stack with less than 10 cards is considered easy.\";\n    } else if (this.state.lengthOfStack <= 20) {\n      infoLevel =\n        \" intermediate, because any stack with more than 10 cards, but less than 20, is considered intermediate.\";\n    } else {\n      infoLevel =\n        \" hard, because any stack with more than 20 cards is considered hard.\";\n    }\n    return infoLevel;\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  gameStatsButton() {\n    return (\n      <button className=\"buttonStyle\" type=\"button\" onClick={this.reStart}>\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <StatsIcon className=\"buttonStyle\" />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Game statistics</span>\n            </div>{\" \"}\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  gameStatsContents() {\n    return (\n      <div id=\"gameStatsContents\">\n        <h2>Game Stats</h2>\n        <div>\n          You finished your stack. This stack was made up of\n          <strong className=\"highlight\"> {this.state.lengthOfStack} </strong>\n          cards.\n        </div>\n        <div>This was {this.stackLevel()}</div>\n        <p>\n          You guessed{\" \"}\n          <strong className=\"highlight\"> {this.state.guesses}</strong> times, of\n          which\n          <strong className=\"highlight\"> {this.state.wrong} </strong> were\n          wrong.\n        </p>\n        <div id=\"percentage\">\n          That means you got{\" \"}\n          <strong className=\"highlight\"> {this.state.percentage}% </strong>of\n          your guesses right.\n          <br />\n          {/* <div id=\"graphView\">\n            Graphical view (<strong className=\"statEmphasis\">yellow </strong>{\" \"}\n            represents the right answers):\n          </div> */}\n          {/* {this.pieChart()} */}\n        </div>\n      </div>\n    );\n  }\n\n  gameStats() {\n    return (\n      <React.Fragment>\n        <div>\n          {this.gameStatsButton()}\n          {this.gameStatsContents()}\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  reStartButton() {\n    return (\n      <button className=\"buttonStyle\" type=\"button\" onClick={this.reStart}>\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <RewindIcon className=\"buttonStyle\" />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\"> Start over</span>\n            </div>\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  reStartTheGame() {\n    return (\n      <div id=\"reStartButton\">\n        {this.reStartButton()}\n        <h4 id=\"reStartQuestion\">Do you want to re-start the stack?</h4>\n      </div>\n    );\n  }\n\n  //TODO make a an array with the cards that were wrong in CardSet and present them in the stats\n\n  statsLayout() {\n    return (\n      <div id=\"gameOverWrap\">\n        <div id=\"gameStats\">{this.gameStats()}</div>\n        <div id=\"reStartMe\">{this.reStartTheGame()}</div>\n      </div>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.statsLayout()}</React.Fragment>;\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Score extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"scoreArea\">\n          <div id=\"ongoingScore\">\n            Right answers:{\" \"}\n            <div className=\"scoreNumbers\">{this.props.rightAnswers}</div>\n            Wrong answers:{\" \"}\n            <div className=\"scoreNumbers\">{this.props.wrongAnswers}</div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\n\nconst Check = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n      />\n    </svg>\n  );\n};\n\nexport default Check;\n","import React from \"react\";\n\nconst Wrong = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M6 18L18 6M6 6l12 12\"\n      />\n    </svg>\n  );\n};\n\nexport default Wrong;\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\n// import { TransitionGroup, Transition } from \"react-transition-group\";\nimport { AnimatePresence, motion } from \"framer-motion\";\n// Standard Log out page\nimport UserIsLoggedOut from \"../views/UserIsLoggedOut\";\n// module\nimport Stats from \"./CardSet_Stats\";\nimport Score from \"./CardSet_Score\";\n// icons\nimport Check from \"../../assets/icons/check\";\nimport Right from \"../../assets/icons/right\";\nimport Wrong from \"../../assets/icons/wrong\";\n\nexport default class CardSet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userIsLoggedIn: props.userIsLoggedIn,\n      currentStack: props.currentStack,\n      cards: props.cards,\n      current: 0,\n      face: true,\n      right: 0,\n      wrong: 0,\n      lengthOfStack: props.cards.length,\n      stackIsOver: false,\n    };\n    // external modules\n    this.UserIsLoggedOut = UserIsLoggedOut;\n    this.Stats = Stats;\n    this.Score = Score;\n    // icons\n    // this.turning = turning;\n    // methods associated with rendering\n    this.cardSide = this.cardSide.bind(this);\n    this.cardCount = this.cardCount.bind(this);\n    this.buttonArea = this.buttonArea.bind(this);\n    this.controlButtons = this.controlButtons.bind(this);\n    this.flipButton = this.flipButton.bind(this);\n    /*     this.score = this.score.bind(this); */\n    // methods for child comp\n    this.reSetGame = this.reSetGame.bind(this);\n    // methods associated with cards\n    this.handleClick = this.handleClick.bind(this);\n    this.removeFromPile = this.removeFromPile.bind(this);\n    this.setAnswerRight = this.setAnswerRight.bind(this);\n    this.setAnswerWrong = this.setAnswerWrong.bind(this);\n    this.nextCardAvailable = this.nextCardAvailable.bind(this);\n    this.updateCurrentCard = this.updateCurrentCard.bind(this);\n    this.controlSide = this.controlSide.bind(this);\n    this.cardFlip = this.cardFlip.bind(this);\n    this.cardSetLayout = this.cardSetLayout.bind(this);\n    this.cardSetView = this.cardSetView.bind(this);\n    this.infoCard = this.infoCard.bind(this);\n  }\n\n  // Reload method, will be called from Stats\n  reSetGame() {\n    this.setState({\n      userIsLoggedIn: this.props.userIsLoggedIn,\n      currentStack: this.props.currentStack,\n      cards: this.props.currentStack.cards,\n      current: 0,\n      face: true,\n      right: 0,\n      wrong: 0,\n      lengthOfStack: this.props.currentStack.cards.length,\n      stackIsOver: false,\n    });\n  }\n\n  ////////////////\n  // Implementation methods\n  ////////////////\n\n  // Removes the item from the pile (called upon Right answer)\n  removeFromPile() {\n    // Most checks are done in the nextCard() method, however, some need to\n    // be performed here or there will be errors on render().\n    const newCardSet = this.state.cards.slice();\n    newCardSet.splice(this.state.current, 1);\n    this.setState(() => ({\n      cards: newCardSet,\n    }));\n    this.updateCurrentCard();\n  }\n\n  // These functions set answerIsRight/wrong in the card array of objects to true/false,\n  // Then, it calls the next functions depending on the conditions/\n  setAnswerRight() {\n    this.setState(() => ({\n      face: true,\n      right: this.state.right + 1,\n    }));\n    // No need to increment, on removing, the array will set back in\n    // we need, though, to check if on removing, the pile won't collapse\n    if (this.nextCardAvailable(this.state)) {\n      this.removeFromPile(this.state);\n    } else {\n      // if, on removing, the pile is empty, the stack is over\n      this.setState({\n        stackIsOver: true,\n      });\n    }\n    return;\n  }\n\n  setAnswerWrong() {\n    this.setState(() => ({\n      face: true,\n      wrong: this.state.wrong + 1,\n    }));\n    if (this.nextCardAvailable(this.state)) {\n      this.updateCurrentCard();\n    }\n    return;\n  }\n\n  // Sequence of logical checks to determine if we should call a next card or not\n  nextCardAvailable() {\n    // Is the pile empty?\n    if (this.state.cards.length === 0) {\n      this.setState(() => ({ stackIsOver: true }));\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  // Updates the number of the current cards\n  updateCurrentCard() {\n    // key aspect is increment or decrement current, to keep the\n    // app from looking for a card number that doesn't exist\n    let next = this.state.current + 1;\n    if (next >= this.state.cards.length - 1) {\n      next = 0;\n    }\n    this.setState(() => ({\n      current: next,\n    }));\n    return;\n  }\n\n  // * Page rendering functions\n\n  // This function shows the back of the current card (works like a switch button)\n  handleClick() {\n    this.setState((state) => ({\n      face: !state.face,\n    }));\n  }\n\n  ////////////////\n  // View methods\n  ////////////////\n\n  infoCard() {\n    return (\n      <div id=\"shortMessage\" className=\"infoCard\">\n        <p>\n          Flip the card with the flip button. Then, indicate ✓ for right answer\n          or ✘ for wrong answer.\n        </p>\n      </div>\n    );\n  }\n\n  cardFlip() {\n    return (\n      <div id=\"flipCard\">\n        <motion.div\n          /*     transition={{ ease: \"easeIn\", duration: 0.7 }} */\n          className=\"cardText\"\n        >\n          {this.state.face ? (\n            <AnimatePresence>\n              <motion.div whileHover={{ scale: 1.02 }} id=\"cardFront\">\n                {this.state.cards[this.state.current].front}\n              </motion.div>\n            </AnimatePresence>\n          ) : (\n            <motion.div\n              whileHover={{ scale: 1.02 }}\n              animate={{ rotateY: 360 }}\n              transition={{ ease: \"easeInOut\", duration: 0.7 }}\n              id=\"cardBack\"\n            >\n              {this.state.cards[this.state.current].back}\n            </motion.div>\n          )}\n        </motion.div>\n      </div>\n    );\n  }\n\n  flipButton() {\n    return (\n      <button className=\"buttonStyle\" type=\"button\" onClick={this.handleClick}>\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\">\n            <div className=\"flipFront\">\n              <Check />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Flip</span>\n            </div>{\" \"}\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  rightAnswerButton() {\n    return (\n      <div id=\"correctButton_Positioning\">\n        <button\n          className=\"buttonStyle\"\n          type=\"button\"\n          onClick={() => this.setAnswerRight(this.state)}\n        >\n          <div className=\"flipContainer\">\n            <div className=\"flipInner\" onClick={this.handleClick}>\n              <div className=\"flipFront\">\n                <Right />\n              </div>\n              <div className=\"flipBack\">\n                <span className=\"buttonMessage\">Right</span>\n              </div>\n            </div>\n          </div>\n        </button>\n      </div>\n    );\n  }\n\n  wrongAnswerButton() {\n    return (\n      <button\n        className=\"buttonStyle\"\n        type=\"button\"\n        onClick={() => this.setAnswerWrong(this.state)}\n      >\n        <div className=\"flipContainer\">\n          <div className=\"flipInner\" onClick={this.handleClick}>\n            <div className=\"flipFront\">\n              <Wrong />\n            </div>\n            <div className=\"flipBack\">\n              <span className=\"buttonMessage\">Wrong</span>\n            </div>\n          </div>\n        </div>\n      </button>\n    );\n  }\n\n  // rendering of right or wrong buttons and call for the setCard\n  controlButtons() {\n    // only shows when the card is in the back view (face===false)\n    if (!this.state.face)\n      return (\n        <React.Fragment>\n          <div id=\"buttonsWrapper\">\n            {this.rightAnswerButton()}\n            {this.wrongAnswerButton()}\n          </div>\n        </React.Fragment>\n      );\n  }\n\n  buttonArea() {\n    return (\n      <div id=\"buttonsArea\">\n        <div id=\"flipButton\">{this.flipButton()}</div>\n        <div id=\"controlButtons\">{this.controlButtons()}</div>\n      </div>\n    );\n  }\n\n  cardCount() {\n    if (\n      this.state.cards.length !== 0 ||\n      (this.state.current !== 0 && this.state.cards.length !== 0)\n    ) {\n      return (\n        <React.Fragment>\n          <div className=\"scoreArea\">\n            <div id=\"currentCard\">\n              Card number:\n              <div className=\"scoreNumbers\">\n                <p>\n                  {this.state.current + 1}/{this.state.cards.length}\n                </p>\n              </div>\n            </div>\n            <br />\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n\n  controlCardArea() {\n    return (\n      <div id=\"controlCardArea\">\n        {this.buttonArea()}\n        <div id=\"info\">{this.infoCard()}</div>\n        <div id=\"scoreCardArea\">\n          <Score\n            rightAnswers={this.state.right}\n            wrongAnswers={this.state.wrong}\n          />\n          <div id=\"cardCount\"> {this.cardCount()} </div>\n          <br />\n          <div id=\"currentPlayStack\">\n            <p>Current stack is: </p>\n            <strong className=\"currentSelectedStack\">\n              {this.state.currentStack.stackName}\n            </strong>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  cardSide() {\n    try {\n      if (this.state.cards.length === 0 || this.state.stackIsOver) {\n        // this.setState({ stackIsOver: true });\n        return (\n          <Stats\n            right={this.state.right}\n            wrong={this.state.wrong}\n            lengthOfStack={this.state.lengthOfStack}\n            reSetGame={this.reSetGame}\n          />\n        );\n      } else {\n        return this.cardFlip();\n      }\n    } catch (E) {\n      console.log(\"error on rendering\", E);\n    }\n  }\n\n  controlSide() {\n    try {\n      if (this.state.cards.length === 0 || this.state.stackIsOver) {\n        // this.setState({ stackIsOver: true });\n        return <div></div>;\n      } else {\n        return this.controlCardArea();\n      }\n    } catch (E) {\n      console.log(\"error on rendering\", E);\n    }\n  }\n\n  cardSetLayout() {\n    return (\n      <div id=\"cardSetLayout\">\n        {this.cardSide()}\n        {this.controlSide()}\n      </div>\n    );\n  }\n\n  cardSetView() {\n    // console.log(\"CARD SET PLAY\");\n    return (\n      <div id=\"cardSetView\">\n        {this.state.userIsLoggedIn ? (\n          <div id=\"loggedInView\">{this.cardSetLayout()}</div>\n        ) : (\n          <Redirect to=\"/\" />\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    return <React.Fragment>{this.cardSetView()}</React.Fragment>;\n  }\n}\n","// import React from \"react\";\nimport useDB_Connection from \"../Connection/connection-hook\";\n\nconst connectToDB = useDB_Connection;\n\nasync function updateCurrentStack(stackNo, token) {\n  // console.log(\"Up stack will request: \", stackNo);\n  let url = process.env.REACT_APP_BACKEND_URL + \"/cardApi/\" + String(stackNo);\n  let header = { Authorization: \"Bearer \" + token };\n  const getStackData = await connectToDB(url, \"GET\", null, header);\n  if (!getStackData || getStackData === undefined) {\n    return false;\n  } else {\n    return getStackData;\n  }\n}\n\nexport default updateCurrentStack;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n// Style\nimport \"./index.scss\";\n//* Navigation elements\n// Base layout\nimport Navigation from \"./components/Navigation/NavBar_0\";\nimport Title from \"./components/Title/Title\";\n// Routed layout\nimport StackManagement from \"./components/StackManagement/StackMan_0\";\nimport CardManagement from \"./components/CardManagement/CardMan_0\";\nimport LogInSignUp from \"./components/LogInSignUp/LogSign_0\";\nimport CurrentStack from \"./components/CurrentStack/CurStack_0\";\n// import Page404 from \"./components/views/Page404\";\nimport ConsolidateChanges from \"./components/views/ConsolidateChanges\";\nimport CardSet from \"./components/CardSet/CardSet_0\";\n// hooks\n// import useDB_Connection from \"./Data/DB-hook/connection-hook\";\n// data update functions\nimport updateCurrentStack from \"./utils/Data_Update/updateCurrentStack\";\n// import updateUserData from \"./Data/Data_Update/updateUserData\";\n// dummy data: used for tests and dev\n// import dummyUser from \"./Data/DummyData/user.json\";\n// import dummyStack from \"./Data/DummyData/technology.json\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      userIsLoggedIn: false,\n      currentUser: \"\",\n      currentStack: \"\",\n      token: \"\",\n      messageToUser: \"Welcome to Flashcards. Log in or Sign up.\",\n    };\n    // Hooks\n    // this.useDB_Connection = useDB_Connection;\n    // data (API) methods\n    this.updateCurrentStack = updateCurrentStack;\n    // this.updateUserData = updateUserData;\n    // state handling\n    this.setCurrentStack = this.setCurrentStack.bind(this);\n    this.logIn_User = this.logIn_User.bind(this);\n    this.logOut_User = this.logOut_User.bind(this);\n    // views\n    this.loggedOutView = this.loggedOutView.bind(this);\n    this.loggedInView = this.loggedInView.bind(this);\n    this.InformationCard_App = this.InformationCard_App.bind(this);\n    // this.baseView = this.baseView.bind(this);\n    this.appView = this.appView.bind(this);\n  }\n\n  ///\n  //* State handling\n  ///\n\n  // TODO: update app to reflect changes on the API feedback.\n  async setCurrentStack(stackNo) {\n    // retrieve new stack data from API\n    // console.log(\"STACK IN\\n. Request for: \", stackNo);\n    let letsUpdateStack;\n    letsUpdateStack = await updateCurrentStack(stackNo, this.state.token)\n      .then((letsUpdateStack) => {\n        this.setState({ currentStack: letsUpdateStack });\n      })\n      .then(() => {\n        this.setState({\n          userIsLoggedIn: !!this.state.currentUser.token,\n        });\n      })\n      .catch((err) => {\n        console.log(\"Error on Stack Update. Error 76.\\n\", err);\n        this.setState({\n          messageToUser: \"There was an error on the Log In(error 76).\",\n        });\n      });\n    if (!letsUpdateStack) {\n      letsUpdateStack = false;\n      return letsUpdateStack;\n    }\n  }\n\n  logIn_User(userData) {\n    let stackId = userData.userStacks[0].stack_id;\n    const logInToken = userData.token;\n    this.setState({\n      currentUser: userData,\n      messageToUser: \"Log in being processed.\",\n      token: logInToken,\n    });\n    // update stack\n    this.setCurrentStack(stackId);\n  }\n\n  logOut_User() {\n    this.setState({\n      userIsLoggedIn: false,\n      currenUser: \" \",\n      currentStack: \" \",\n    });\n    window.location.reload();\n  }\n\n  ///\n  //* Views\n  ///\n\n  InformationCard_App() {\n    return (\n      <div className=\"infoCard\">\n        <p>{this.state.messageToUser}</p>\n      </div>\n    );\n  }\n\n  loggedInView() {\n    return (\n      // <div className=\"flex-container\">\n      <Router>\n        <Title logOut_User={this.logOut_User} />\n        <div id=\"Main_contents\">\n          <div id=\"navBar\">\n            <Navigation\n              currentUser={this.state.currentUser}\n              userIsLoggedIn={this.state.userIsLoggedIn}\n            />\n          </div>\n          <div id=\"currentView\">\n            <Switch>\n              {/* <Route exact path=\"/\" component={BaseRoute} /> */}\n              <Route\n                exact\n                path=\"/curStack\"\n                render={(props) => (\n                  <CurrentStack\n                    {...props}\n                    userIsLoggedIn={this.state.userIsLoggedIn}\n                    currentUser={this.state.currentUser}\n                    currentStack={this.state.currentStack}\n                    setCurrentStack={this.setCurrentStack}\n                  />\n                )}\n              />\n              <Route\n                exact\n                path=\"/cardManagement\"\n                render={(props) => (\n                  <CardManagement\n                    {...props}\n                    userIsLoggedIn={this.state.userIsLoggedIn}\n                    currentUser={this.state.currentUser}\n                    userStacks={this.state.currentUser.userStacks}\n                    currentStack={this.state.currentStack}\n                    token={this.state.token}\n                  />\n                )}\n              />\n              <Route\n                exact\n                path=\"/stackManagement\"\n                render={(props) => (\n                  <StackManagement\n                    {...props}\n                    userIsLoggedIn={this.state.userIsLoggedIn}\n                    currentUser={this.state.currentUser}\n                    userStacks={this.state.currentUser.userStacks}\n                    currentStack={this.state.currentStack}\n                    setCurrentStack={this.setCurrentStack}\n                    token={this.state.token}\n                  />\n                )}\n              />\n              <Route\n                exact\n                path=\"/cardSet\"\n                render={(props) => (\n                  <CardSet\n                    {...props}\n                    userIsLoggedIn={this.state.userIsLoggedIn}\n                    currentStack={this.state.currentStack}\n                    cards={this.state.currentStack.cards}\n                  />\n                )}\n              />\n              <Route\n                exact\n                path=\"/consolidateChanges\"\n                render={(props) => (\n                  <ConsolidateChanges\n                    {...props}\n                    userIsLoggedIn={this.state.userIsLoggedIn}\n                    currentStack={this.state.currentStack}\n                  />\n                )}\n              />\n              <Route exact path=\"/logIn\">\n                {this.state.userIsLoggedIn ? (\n                  <Redirect to=\"/curStack\" />\n                ) : (\n                  <Redirect to=\"/logIn\" />\n                )}\n              </Route>\n              {/* <Route exact path=\"/\">\n              <Redirect to=\"/curStack\" />\n            </Route> */}\n              <Route exact path=\"*\">\n                {this.state.userIsLoggedIn ? (\n                  <Redirect to=\"/curStack\" />\n                ) : (\n                  <Redirect to=\"/logIn\" />\n                )}\n              </Route>\n            </Switch>\n          </div>\n        </div>{\" \"}\n      </Router>\n\n      // </div>\n    );\n  }\n\n  loggedOutView() {\n    return (\n      <div id=\"loggedOutView\">\n        <Router>\n          <Route\n            exact\n            path=\"/logIn\"\n            render={(props) => (\n              <LogInSignUp\n                {...props}\n                userIsLoggedIn={this.state.userIsLoggedIn}\n                currentUser={this.state.currentUser}\n                logIn_User={this.logIn_User}\n              />\n            )}\n          />\n          <Route exact path=\"*\">\n            {this.state.userIsLoggedIn ? (\n              <Redirect to=\"/curStack\" />\n            ) : (\n              <Redirect to=\"/logIn\" />\n            )}\n          </Route>\n        </Router>\n        {this.InformationCard_App()}\n      </div>\n    );\n  }\n\n  appView() {\n    // console.log(\"APP View reload\");\n    if (this.state.userIsLoggedIn === true) {\n      return <div id=\"user_is_logged_in\">{this.loggedInView()}</div>;\n    } else {\n      return <div id=\"user_is_logged_out\">{this.loggedOutView()}</div>;\n    }\n  }\n\n  render() {\n    return <div id=\"App_View\">{this.appView()}</div>;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}